{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260",
    "id": 2170572223,
    "node_id": "PR_kwDOABII586BYE2_",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31260",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31260.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31260.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
    "number": 31260,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "scripted-diff: Type-safe settings retrieval",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR changes the way settings are registered and retrieved to provide more compile-time safety. Currently settings are [registered](https://github.com/ryanofsky/bitcoin/blob/03cff2c1421e5db59963eba1a845ef5dd318c275/src/init.cpp#L504) and [retrieved](https://github.com/ryanofsky/bitcoin/blob/03cff2c1421e5db59963eba1a845ef5dd318c275/src/init.cpp#L173) like:\r\n\r\n```c++\r\n// Register setting\r\nargsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\r\n\r\n// Retrieve setting\r\nargs.GetPathArg(\"-pid\", BITCOIN_PID_FILENAME)\r\n```\r\n\r\nBut this is not ideal because nothing checks that setting names are spelled correctly, or that default values (`BITCOIN_PID_FILENAME`) are used consistently in the help string and retrieval sites, or that settings are retrieved with consistent types (bool, int, string, path, or list). This PR addresses these issues by adding setting [declarations](https://github.com/ryanofsky/bitcoin/blob/416860fc360b3d5aa1a0782ab8f8454b46e6d657/src/init_settings.h#L267-L270) which allow settings to be [registered](https://github.com/ryanofsky/bitcoin/blob/416860fc360b3d5aa1a0782ab8f8454b46e6d657/src/init.cpp#L484) and [retrieved](https://github.com/ryanofsky/bitcoin/blob/416860fc360b3d5aa1a0782ab8f8454b46e6d657/src/init.cpp#L164C38-L164C59) like:\r\n\r\n```c++\r\n// Declare setting\r\nusing PidSetting = common::Setting<\r\n    \"-pid=<file>\", fs::path, {.legacy = true},\r\n    \"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\">\r\n    ::DefaultFn<[] { return BITCOIN_PID_FILENAME; }>;\r\n\r\n// Register setting\r\nPidSetting::Register(argsman);\r\n\r\n// Retrieve setting\r\nPidSetting::Get(args)\r\n```\r\n\r\n---\r\n\r\n#### Suggestions for review\r\n\r\nAll the real changes in this PR are in the last scripted-diff commit:\r\n\r\n- [`31fe4c6f9946` scripted-diff: Replace AddArgs / GetArgs calls with Setting Register / Get calls](https://github.com/bitcoin/bitcoin/pull/31260/commits/31fe4c6f994697dd027be8064c27dde800ebcb65)\r\n\r\nIf you take a few minutes to look at the changes applied in this scripted-diff commit, you'll understand everything this PR is doing. A good place to start looking around in this commit is the generated [`src/init_settings.h`](https://github.com/ryanofsky/bitcoin/blob/pr/scripty/src/init_settings.h) file which declares the settings that get registered in [src/init.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/scripty/src/init.cpp). Then you can look at the surrounding diffs and see they are just replacing `AddArg` and `GetArg` calls.\r\n\r\nThe other notable commit is second commit, which implements the `Setting` class:\r\n\r\n- [`0434e4d86f71` common: Add Setting class to support typed Settings](https://github.com/bitcoin/bitcoin/pull/31260/commits/0434e4d86f71fddcc1e4e8166f62f4d9098ec4ac)\r\n\r\nThe other commits do minor things like moving code or updating linters. The python script that implements the scripted diff is a temporary artifact that gets deleted. The python script is complicated because it does things like parsing c++ code to extract help strings, and figuring out the right types to declare settings with so code compiles. But the entire scope of the script is to (1) generate Setting type definitions, (2) add #includes, and (3) replace `AddArg()` calls with `Register()` calls and `GetArg()` calls with `Get()` calls. So there is not much the script can actually do wrong without triggering build and test failures.\r\n\r\n---\r\n\r\n#### Extensions\r\n\r\nThis PR only adds the ability to declare individual settings with built-in types. It doesn't provide any new runtime behavior, but a branch in issue #22978 extends the `Setting` class implemented here to support runtime setting validation, additional types like `std::variant`, additional conversion options, custom types, custom validation, and groups of settings declared as options structs.\r\n\r\nThis change is mostly orthogonal to #16545. #16545 only provides runtime type checking while this PR only provides compile-time checking with no new runtime behavior. But this change does allow a nicer way of declaring types in #16545, using c++ types like `int` instead of flags like `ALLOW_INT`, or`std::vector<std::string>` instead of `ALLOW_STRING | ALLOW_LIST`.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-11-08T22:34:46Z",
    "updated_at": "2025-10-20T15:10:15Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "81c8227334151188b060f31432531a216d78a907",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ryanofsky:pr/scripty",
      "ref": "pr/scripty",
      "sha": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 11,
        "stargazers_count": 19,
        "watchers_count": 19,
        "size": 295781,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-20T15:25:55Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2025-10-15T12:19:26Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0eeae4d174a41c3fc2eae41e76b929fa3114d6f3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38055,
        "stargazers_count": 86306,
        "watchers_count": 86306,
        "size": 295070,
        "default_branch": "master",
        "open_issues_count": 820,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-19T14:45:52Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-20T13:46:15Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 3548,
    "deletions": 1042,
    "changed_files": 88,
    "commits": 10,
    "review_comments": 132,
    "comments": 10
  },
  "events": [
    {
      "event": "commented",
      "id": 2465853879,
      "node_id": "IC_kwDOABII586S-fG3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465853879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T22:34:49Z",
      "updated_at": "2025-10-20T15:10:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31260.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2539200560), [hodlinator](https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2960951696) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33632](https://github.com/bitcoin/bitcoin/pull/33632) (init: Improve -asmap option behavior and documentation by fjahr)\n* [#33631](https://github.com/bitcoin/bitcoin/pull/33631) (init: Split file path handling out of -asmap option by fjahr)\n* [#33629](https://github.com/bitcoin/bitcoin/pull/33629) (Cluster mempool by sdaftuar)\n* [#33591](https://github.com/bitcoin/bitcoin/pull/33591) (Cluster mempool followups by sdaftuar)\n* [#33540](https://github.com/bitcoin/bitcoin/pull/33540) (argsman, cli: GNU-style command-line option parsing (allows options after non-option arguments) by pablomartin4btc)\n* [#33511](https://github.com/bitcoin/bitcoin/pull/33511) (init: Fix Ctrl-C shutdown hangs during wait calls by ryanofsky)\n* [#33455](https://github.com/bitcoin/bitcoin/pull/33455) (CPack by purpleKarrot)\n* [#33421](https://github.com/bitcoin/bitcoin/pull/33421) (node: add `BlockTemplateCache` by ismaelsadeeq)\n* [#33343](https://github.com/bitcoin/bitcoin/pull/33343) (help: enrich help text for `-loadblock` by HowHsu)\n* [#33324](https://github.com/bitcoin/bitcoin/pull/33324) (blocks: add `-reobfuscate-blocks` arg to xor existing blk/rev on startup by l0rinc)\n* [#33300](https://github.com/bitcoin/bitcoin/pull/33300) (fuzz: compact block harness by Crypt-iQ)\n* [#33215](https://github.com/bitcoin/bitcoin/pull/33215) (Fix compatibility with `-debuglogfile` command-line option by hebasto)\n* [#33214](https://github.com/bitcoin/bitcoin/pull/33214) (rpc: require integer verbosity; remove boolean 'verbose' by fqlx)\n* [#33192](https://github.com/bitcoin/bitcoin/pull/33192) (refactor: unify container presence checks by l0rinc)\n* [#33191](https://github.com/bitcoin/bitcoin/pull/33191) (net: Provide block templates to peers on request by ajtowns)\n* [#33124](https://github.com/bitcoin/bitcoin/pull/33124) (wallet: Improve wallet creation error message with usage hint by chareice)\n* [#33069](https://github.com/bitcoin/bitcoin/pull/33069) ([POC] wallet: Add Support for BIP-353 DNS-Based Bitcoin Address via External Resolver by w0xlt)\n* [#33008](https://github.com/bitcoin/bitcoin/pull/33008) (wallet: support bip388 policy with external signer by Sjors)\n* [#32966](https://github.com/bitcoin/bitcoin/pull/32966) (Silent Payments: Receiving by Eunovo)\n* [#32699](https://github.com/bitcoin/bitcoin/pull/32699) (docs: adds correct updated documentation links by Zeegaths)\n* [#32636](https://github.com/bitcoin/bitcoin/pull/32636) (Split `CWallet::Create()` into `CreateNew` and `LoadExisting` by davidgumberg)\n* [#32427](https://github.com/bitcoin/bitcoin/pull/32427) ((RFC) kernel: Replace leveldb-based BlockTreeDB with flat-file based store by TheCharlatan)\n* [#32380](https://github.com/bitcoin/bitcoin/pull/32380) (Modernize use of UTF-8 in Windows code by hebasto)\n* [#32297](https://github.com/bitcoin/bitcoin/pull/32297) (bitcoin-cli: Add -ipcconnect option by ryanofsky)\n* [#32138](https://github.com/bitcoin/bitcoin/pull/32138) (wallet, rpc: remove settxfee and paytxfee by polespinasa)\n* [#31974](https://github.com/bitcoin/bitcoin/pull/31974) (Drop testnet3 by Sjors)\n* [#31845](https://github.com/bitcoin/bitcoin/pull/31845) (Add -pruneduringinit option to temporarily use another prune target during IBD by luke-jr)\n* [#31723](https://github.com/bitcoin/bitcoin/pull/31723) (node: Add --debug_runs/-waitfordebugger + --debug_cmd by hodlinator)\n* [#31664](https://github.com/bitcoin/bitcoin/pull/31664) (Fees:  add Fee rate Forecaster Manager by ismaelsadeeq)\n* [#31645](https://github.com/bitcoin/bitcoin/pull/31645) ([IBD] coins: increase default UTXO flush batch size to 32 MiB by l0rinc)\n* [#31425](https://github.com/bitcoin/bitcoin/pull/31425) (RFC: Riscv bare metal CI job by TheCharlatan)\n* [#30951](https://github.com/bitcoin/bitcoin/pull/30951) (net: option to disallow v1 connection on ipv4 and ipv6 peers by stratospher)\n* [#30343](https://github.com/bitcoin/bitcoin/pull/30343) (wallet, logging: Replace WalletLogPrintf() with LogInfo() by ryanofsky)\n* [#30342](https://github.com/bitcoin/bitcoin/pull/30342) (kernel, logging: Pass Logger instances to kernel objects by ryanofsky)\n* [#30277](https://github.com/bitcoin/bitcoin/pull/30277) ([DO NOT MERGE] Erlay: bandwidth-efficient transaction relay protocol (Full implementation) by sr-gi)\n* [#30157](https://github.com/bitcoin/bitcoin/pull/30157) (Fee Estimation via Fee rate Forecasters by ismaelsadeeq)\n* [#30059](https://github.com/bitcoin/bitcoin/pull/30059) (Add option dbfilesize to control LevelDB target (\"max\") file size by luke-jr)\n* [#29700](https://github.com/bitcoin/bitcoin/pull/29700) (kernel, refactor: return error status on all fatal errors by ryanofsky)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo over LogPrintf [WIP, NOMERGE, DRAFT] by maflcko)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#29278](https://github.com/bitcoin/bitcoin/pull/29278) (Wallet:  Add `maxfeerate` wallet startup option by ismaelsadeeq)\n* [#28792](https://github.com/bitcoin/bitcoin/pull/28792) (Embed default ASMap as binary dump header file by fjahr)\n* [#27409](https://github.com/bitcoin/bitcoin/pull/27409) (Make GUI and CLI tools use the same datadir by ryanofsky)\n* [#26988](https://github.com/bitcoin/bitcoin/pull/26988) (cli: rework -addrinfo cli to use addresses which aren’t filtered for quality/recency by stratospher)\n* [#26966](https://github.com/bitcoin/bitcoin/pull/26966) (index: initial sync speedup, parallelize process by furszy)\n* [#26022](https://github.com/bitcoin/bitcoin/pull/26022) (Add util::ResultPtr class by ryanofsky)\n* [#25722](https://github.com/bitcoin/bitcoin/pull/25722) (refactor: Use util::Result class for wallet loading by ryanofsky)\n* [#25665](https://github.com/bitcoin/bitcoin/pull/25665) (refactor: Add util::Result failure values, multiple error and warning messages by ryanofsky)\n* [#24539](https://github.com/bitcoin/bitcoin/pull/24539) (Add a \"tx output spender\" index by sstone)\n* [#24230](https://github.com/bitcoin/bitcoin/pull/24230) (indexes: Stop using node internal types and locking cs_main, improve sync logic by ryanofsky)\n* [#19461](https://github.com/bitcoin/bitcoin/pull/19461) (multiprocess: Add bitcoin-gui -ipcconnect option by ryanofsky)\n* [#19460](https://github.com/bitcoin/bitcoin/pull/19460) (multiprocess: Add bitcoin-wallet -ipcconnect option by ryanofsky)\n* [#17783](https://github.com/bitcoin/bitcoin/pull/17783) (common: Disallow calling IsArgSet() on ALLOW_LIST options by ryanofsky)\n* [#17581](https://github.com/bitcoin/bitcoin/pull/17581) (refactor: Remove settings merge reverse precedence code by ryanofsky)\n* [#17580](https://github.com/bitcoin/bitcoin/pull/17580) (refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags by ryanofsky)\n* [#17493](https://github.com/bitcoin/bitcoin/pull/17493) (util: Forbid ambiguous multiple assignments in config file by ryanofsky)\n* [#16545](https://github.com/bitcoin/bitcoin/pull/16545) (refactor: Implement missing error checking for ArgsManager flags by ryanofsky)\n* [#10102](https://github.com/bitcoin/bitcoin/pull/10102) (Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- allows allows -> allows [duplicate word; likely a typo that interferes with readability]\n  (in common/setting.h: \"it just allows allows new runtime...\")\n- accept it accepts -> except it accepts [wrong word; changes meaning/confuses sentence]\n  (in common/setting.h: \"This provides the same functionality as the Default<> accessor described above, accept it accepts a lambda...\")\n- It accept a list -> It accepts a list [subject-verb agreement; \"accept\" -> \"accepts\"]\n  (in common/setting_internal.h: \"It accept a list of constexpr values, and calls tinyformat...\")\n- %sdefault: %u) fee estimates -> default: %u) Fee estimates [remove stray %s and capitalize start of next sentence]\n  (in init_settings.h help string for -acceptstalefeeestimates: \"Read fee estimates even if they are stale (%sdefault: %u) fee estimates are considered stale if they are %s hours old\") \n\nIf you want, I can produce exact suggested replacements inserted into the files.\n\n<sup>drahtbot_id_5_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2465853879",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "convert_to_draft",
      "id": 15228773100,
      "node_id": "CTDE_lADOABII586drAjCzwAAAAOLtKLs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15228773100",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T22:34:57Z"
    },
    {
      "event": "labeled",
      "id": 15229818220,
      "node_id": "LE_lADOABII586drAjCzwAAAAOLxJVs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15229818220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T23:32:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2465902292,
      "node_id": "IC_kwDOABII586S-q7U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465902292",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T23:36:25Z",
      "updated_at": "2024-11-08T23:36:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Current status of this PR is that `bitcoind` and `test_bitcoin` binaries work and functional and unit tests pass, but there are compile errors in the other binaries that need to be fixed, and this also needs to be rebased. The PR is complete with all functionality described above implemented, but it probably needs more documentation. I also would like to add more commits replacing last remaining GetArg / GetIntArg / GetBoolArg / GetArgs / IsArgSet / IsArgNegated method uses with `Setting::Get` and dropping all those methods.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2465902292",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15273260085,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOOW3Q1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15273260085",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "47e30b40eca0eabf85d45e91fc247a74f3a346e8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/47e30b40eca0eabf85d45e91fc247a74f3a346e8",
      "created_at": "2024-11-13T00:28:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15273292339,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOOW_Iz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15273292339",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d8a4a0a8f760cf82cc7f71dfbd3140d11db95790",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d8a4a0a8f760cf82cc7f71dfbd3140d11db95790",
      "created_at": "2024-11-13T00:31:38Z"
    },
    {
      "event": "commented",
      "id": 2472025885,
      "node_id": "IC_kwDOABII586TWB8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2472025885",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T00:36:03Z",
      "updated_at": "2024-11-15T21:14:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 416860fc360b3d5aa1a0782ab8f8454b46e6d657 -> 47e30b40eca0eabf85d45e91fc247a74f3a346e8 ([`pr/scripty.1`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.1) -> [`pr/scripty.2`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.1..pr/scripty.2)) getting the remaining binaries (not just test_bitcoin and bitcoind) to build, simplifying the way optional and default values are used, making many other cleanups and fixes.\r\nRebased 47e30b40eca0eabf85d45e91fc247a74f3a346e8 -> d8a4a0a8f760cf82cc7f71dfbd3140d11db95790 ([`pr/scripty.2`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.2) -> [`pr/scripty.3`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.2-rebase..pr/scripty.3)) due to conflicts\r\nUpdated d8a4a0a8f760cf82cc7f71dfbd3140d11db95790 -> ad32a27e966eac118587cf0e03c1eedaf0c051ed ([`pr/scripty.3`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.3) -> [`pr/scripty.4`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.3..pr/scripty.4)) with a fix for the feature_logging.py test that got broken by the previous optional/default changes. Also includes cmake changes to fix some CI build errors.\r\nUpdated ad32a27e966eac118587cf0e03c1eedaf0c051ed -> 534f9713c9a4a12b8c276585ed6ae96a25d4bc09 ([`pr/scripty.4`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.4) -> [`pr/scripty.5`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.4..pr/scripty.5)) replacing IsArgSet calls with Setting::Value().isNull() instead of using std::optional and Setting::Get() to avoid changing any behavior since Get() fully parses the setting and can throw exceptions, and to reduce uses of std::optional which complicated code. Also add basic unit tests and make various script improvements.\r\nRebased 534f9713c9a4a12b8c276585ed6ae96a25d4bc09 -> 7e572376bdf2e13e896a1aa8f87c3701e2446684 ([`pr/scripty.5`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.5) -> [`pr/scripty.6`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.5-rebase..pr/scripty.6)) with a number of changes intended to fix CI errors, and with a fix for silent merge conflict with #31174\r\nRebased 7e572376bdf2e13e896a1aa8f87c3701e2446684 -> 1f243467cfcaa72a8f665141bdb4e5c5af668dfe ([`pr/scripty.6`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.6) -> [`pr/scripty.7`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.6-rebase..pr/scripty.7)) due to conflict #31287 and many workarounds for various compiler issues in CI and fixes for more linters\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472025885",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "labeled",
      "id": 15273880503,
      "node_id": "LE_lADOABII586drAjCzwAAAAOOZOu3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15273880503",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T01:21:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2472108000,
      "node_id": "IC_kwDOABII586TWV_g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2472108000",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T01:21:21Z",
      "updated_at": "2024-11-13T01:21:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32896439725</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472108000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "unlabeled",
      "id": 15274374736,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOObHZQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15274374736",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T02:01:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15275142184,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOOeCwo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15275142184",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ad32a27e966eac118587cf0e03c1eedaf0c051ed",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ad32a27e966eac118587cf0e03c1eedaf0c051ed",
      "created_at": "2024-11-13T03:21:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15291084109,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOPa21N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15291084109",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "534f9713c9a4a12b8c276585ed6ae96a25d4bc09",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/534f9713c9a4a12b8c276585ed6ae96a25d4bc09",
      "created_at": "2024-11-14T00:40:19Z"
    },
    {
      "event": "labeled",
      "id": 15291424002,
      "node_id": "LE_lADOABII586drAjCzwAAAAOPcJ0C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15291424002",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T01:36:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15301282372,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOQBwpE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15301282372",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e572376bdf2e13e896a1aa8f87c3701e2446684",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7e572376bdf2e13e896a1aa8f87c3701e2446684",
      "created_at": "2024-11-14T16:27:29Z"
    },
    {
      "event": "unlabeled",
      "id": 15301628902,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOQDFPm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15301628902",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T16:50:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 15314841174,
      "node_id": "LE_lADOABII586drAjCzwAAAAOQ1e5W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15314841174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T16:13:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15317503635,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOQ_o6T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15317503635",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1f243467cfcaa72a8f665141bdb4e5c5af668dfe",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1f243467cfcaa72a8f665141bdb4e5c5af668dfe",
      "created_at": "2024-11-15T21:09:28Z"
    },
    {
      "event": "renamed",
      "id": 15317587143,
      "node_id": "RTE_lADOABII586drAjCzwAAAAOQ_9TH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15317587143",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T21:15:00Z",
      "rename": {
        "from": "WIP: scripted-diff: Type-safe settings retrieval",
        "to": "scripted-diff: Type-safe settings retrieval"
      }
    },
    {
      "event": "ready_for_review",
      "id": 15317588909,
      "node_id": "RFRE_lADOABII586drAjCzwAAAAOQ_9ut",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15317588909",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T21:15:09Z"
    },
    {
      "event": "commented",
      "id": 2479964213,
      "node_id": "IC_kwDOABII586T0UA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2479964213",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T21:32:56Z",
      "updated_at": "2024-11-16T02:17:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed a lot of fixes and updates over the past week and marking this PR as no longer wip/draft. This PR is just a refactoring and doesn't change runtime behavior, but it should be a good start to having better defined settings with clear types and default values, avoiding confusion and bugs caused by the current settings API seen in #30529 and #31212 and other PRs, and making API more extensible to support custom types and validation in the future.\r\n\r\n---\r\n\r\nUpdated 1f243467cfcaa72a8f665141bdb4e5c5af668dfe -> c42d27d8c844b721b5aff384b3d014b1e0cc4783 ([`pr/scripty.7`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.7) -> [`pr/scripty.8`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.7..pr/scripty.8)) to fix remaining CI issues.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2479964213",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "unlabeled",
      "id": 15318734489,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOREVaZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15318734489",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T22:37:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15320104732,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAORJj8c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15320104732",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "created_at": "2024-11-16T02:16:53Z"
    },
    {
      "event": "commented",
      "id": 2487700612,
      "node_id": "IC_kwDOABII586UR0yE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2487700612",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T07:22:03Z",
      "updated_at": "2024-11-20T07:22:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "This needs the tidy CI task issues fixed up",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2487700612",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "labeled",
      "id": 15364971623,
      "node_id": "LE_lADOABII586drAjCzwAAAAOT0txn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15364971623",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T10:28:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2448864512,
      "node_id": "PRR_kwDOABII586R9rUA",
      "url": null,
      "actor": null,
      "commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-20T21:35:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "High-level review of c42d27d8c844b721b5aff384b3d014b1e0cc4783\r\n\r\nReview instructions are a nice introduction. Feels a bit risky having links to personal branch instead of specific commit, but it's good to keep it flexible until ACKs come in.\r\n\r\n---\r\n\r\n\r\n### Negation?\r\n\r\nI'm curious how you foresee negation checks being done. Having worked on proper handling of negated args recently, to me it feels like user code should have to jump through a hoop on the way to the non-negated value, if an arg supports negation, to encourage conscious negation logic. `common::Disabled` is currently only used in tests, this goes against this comment from #16545:\r\nhttps://github.com/bitcoin/bitcoin/blob/b5ef85497436c3e9e60c760465d8991592efef07/src/common/args.h#L112-L114\r\n\r\n---\r\n\r\n### Impact on compile time from template magic?\r\n\r\nCompiler: GCC 13.3.0\r\nRan `ccache --clear` and deleted cmake `build` directory before each run.\r\n\r\n#### Before\r\n```\r\nRun #1\r\nreal\t5m13.786s\r\nuser\t63m16.112s\r\nsys\t4m18.988s\r\n\r\nRun #2\r\nreal\t5m18.751s\r\nuser\t65m23.916s\r\nsys\t4m29.586s\r\n```\r\n\r\n#### After\r\n\r\n```\r\nRun #1\r\nreal\t5m16.808s\r\nuser\t65m15.770s\r\nsys\t4m27.238s\r\n\r\nRun #2\r\nreal\t5m21.099s\r\nuser\t66m22.265s\r\nsys\t4m32.162s\r\n```\r\n\r\n#### Conclusion\r\n\r\nSlightly faster before, but overlapping timings. Should be okay.\r\n\r\n---\r\n\r\n### Commit message for f310e17e73bd1cea74aa45fd94192f24df122f86:\r\n\r\nTypo: \"headers from being >be< included\"\r\n\r\n---\r\n\r\n### `Value(args).isNull()`\r\n\r\n`DatadirSetting::Value(args).isNull()` vs `DatadirSettingPath::Get(args)` - feels weird to call the former `Value()` ... it's like `std::optional::value()` but in reverse. The fact that settings are backed by `UniValue`s help explain it, but still looks inelegant. I see this style comes from a [latter revision](https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472025885) to trigger parsing and possible exceptions. Maybe a `DatadirSetting::IsArgSet(args)` wrapper could be added?\r\n\r\n---\r\n\r\n### CamelCasing\r\n\r\nCouldn't we add a dictionary for proper CamelCasing of settings names so that\r\n- `ZmqpubrawtxSetting` -> `ZmqPubRawTxSetting`\r\n- `StopafterblockimportSetting` -> `StopAfterBlockImportSetting`\r\netc?",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2448864512",
      "submitted_at": "2024-11-20T21:35:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15405134111,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOWN7Ef",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405134111",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "27083ecbc221095585cfff3bb208850e564723fd",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/27083ecbc221095585cfff3bb208850e564723fd",
      "created_at": "2024-11-22T23:16:15Z"
    },
    {
      "event": "unlabeled",
      "id": 15405229418,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOWOSVq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405229418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T23:28:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2455631901,
      "node_id": "PRR_kwDOABII586SXfgd",
      "url": null,
      "actor": null,
      "commit_id": "27083ecbc221095585cfff3bb208850e564723fd",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-04T20:57:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased c42d27d8c844b721b5aff384b3d014b1e0cc4783 -> 27083ecbc221095585cfff3bb208850e564723fd ([`pr/scripty.8`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.8) -> [`pr/scripty.9`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.9), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.8-rebase..pr/scripty.9)) to fix conflict with #31317 including suggested changes and some changes to the scripted diff to cover more arguments.\r\nUpdated 27083ecbc221095585cfff3bb208850e564723fd -> b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129 ([`pr/scripty.9`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.9) -> [`pr/scripty.10`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.9..pr/scripty.10)) expanding to cover hidden arguments and fixing temporary bug in early commit to fix for-each-commit job\r\nUpdated b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129 -> 4e33ed4eb054e230436b68c681d978d0e7bea0a1 ([`pr/scripty.10`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.10) -> [`pr/scripty.11`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.10..pr/scripty.11)) with fix for lint error https://cirrus-ci.com/task/6667770497073152\r\nRebased 4e33ed4eb054e230436b68c681d978d0e7bea0a1 -> a4a5226b5b7f240a87a5f078cf0b6a475679b8ab ([`pr/scripty.11`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.11) -> [`pr/scripty.12`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.11-rebase..pr/scripty.12)) due to conflict with #31212\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2448864512\r\n\r\nThanks for the review and testing! The compiler benchmarking is especially interesting and commit message typo should be fixed now. The camelcasing dictionary is also a great idea and I will definitely implement that.\r\n\r\n> ### Negation?\r\n> I'm curious how you foresee negation checks being done. Having worked on proper handling of negated args recently, to me it feels like user code should have to jump through a hoop on the way to the non-negated value, if an arg supports negation, to encourage conscious negation logic. `common::Disabled` is currently only used in tests, this goes against this comment from #16545:\r\n\r\nIn most cases, it makes sense for negated bool arguments to be false, negated int arguments to be 0, and negated string/path/list arguments to be empty. With the `Setting` class and default types these conversions are made automatically, except that for backward compatibility when `.legacy = true` is set, negated strings are returned as \"0\". In cases where the default behavior doesn't make sense, there is support for `std::variant` in my #22978 branch, where custom negation behavior can be implemented by choosing a setting type like `std::variant<Disabled, T>`.\r\n\r\nFrom https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-2265757710: \"`std::variant<Disabled, T>` might be useful for special cases or backwards compatibility to detect negated values and treat them differently from 0 and \"\". For example if you had a `-bwlimit` setting and wanted to treat `-nobwlimit` as \"use unlimited bandwidth\" and `-bwlimit=0` as \"use no bandwidth\" using a variant with a Disabled member allows that.\"\r\n\r\n> ### `Value(args).isNull()`\r\n> `DatadirSetting::Value(args).isNull()` vs `DatadirSettingPath::Get(args)` - feels weird to call the former `Value()` ... it's like `std::optional::value()` but in reverse. The fact that settings are backed by `UniValue`s help explain it, but still looks inelegant. I see this style comes from a [latter revision](https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472025885) to trigger parsing and possible exceptions.\r\n\r\nI tend to agree but just to explain the thinking, the method is called `Value()` because it returns the JSON `SettingsValue` type, and the name makes some sense because it is returning the raw JSON value without interpreting it as a bool/int/string/path or other type. Using the `Value()` method should be pretty strongly discouraged, so it's not neccesarily a bad thing if usage looks inelegant. This PR is only using `Value()` in the scripted-diff commit to emulate `IsArgSet` and `IsArgNegated` behavior and avoid the parsing exceptions you mentioned which could change behavior of the current code and break compatibility.\r\n\r\nBut all the code using `Value()` would be better off not using it. This could be done by switching to better default values or by switching to `std::optional<>` or `std::variant<>` types. There should be basically be no reason to call `Value()` in new code and your PR #31212 and my #30529 will eliminate a bunch of uses of `Value()` here assuming they are merged before this PR.\r\n\r\n> Maybe a `DatadirSetting::IsArgSet(args)` wrapper could be added?\r\n\r\nI would want to avoid this just because I think the `IsArgSet` function is a footgun. I think it's preferable to use `Default<>` and `DefaultFn<>` to set static defaults whenever possible, and to use to use the `std::optional<>` when dynamic defaults are needed, and to never call `IsArgSet` in any case.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2455631901",
      "submitted_at": "2024-11-22T23:37:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "unlabeled",
      "id": 15405517456,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOWPYqQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405517456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T00:11:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 15405517645,
      "node_id": "LE_lADOABII586drAjCzwAAAAOWPYtN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405517645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T00:11:27Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15426561313,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOXfqUh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15426561313",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129",
      "created_at": "2024-11-25T20:48:20Z"
    },
    {
      "event": "labeled",
      "id": 15427132873,
      "node_id": "LE_lADOABII586drAjCzwAAAAOXh13J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15427132873",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T21:43:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2499096956,
      "node_id": "IC_kwDOABII586U9TF8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2499096956",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T21:43:40Z",
      "updated_at": "2024-11-25T21:43:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33503226227</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2499096956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15457802622,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOZW1l-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15457802622",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "created_at": "2024-11-27T21:30:57Z"
    },
    {
      "event": "unlabeled",
      "id": 15458169067,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOZYPDr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15458169067",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T22:28:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15532395696,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOdzYyw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15532395696",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "created_at": "2024-12-04T20:54:58Z"
    },
    {
      "event": "reviewed",
      "id": 2492047895,
      "node_id": "PRR_kwDOABII586UiaIX",
      "url": null,
      "actor": null,
      "commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-10T14:02:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, it's a lot better to have the compiler do the job for us.\r\nI just scrolled through to understand the gist of it - but it's a humongous change, I'm toast for today.\r\nDo you think it would be possible to split this into tiny PRs that change each settings-block one-by-one instead?\r\nThat way we can iterate on the first to see if we could validate and parse and normalize the values there as well.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2492047895",
      "submitted_at": "2024-12-10T14:02:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15626860621,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOjbvhN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15626860621",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7a24a9dea0387637f604852d85aaac761203bcb6",
      "created_at": "2024-12-12T00:29:48Z"
    },
    {
      "event": "reviewed",
      "id": 2496920898,
      "node_id": "PRR_kwDOABII586U0_1C",
      "url": null,
      "actor": null,
      "commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-12T00:35:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews!\r\n\r\nUpdated a4a5226b5b7f240a87a5f078cf0b6a475679b8ab -> 7a24a9dea0387637f604852d85aaac761203bcb6 ([`pr/scripty.12`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.12) -> [`pr/scripty.13`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.13), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.12..pr/scripty.13)) implementing various suggestions like the camelcase map and extending to cover more test settings. At this point am getting pretty close to being able to drop the GetArg/GetArgs/IsArgSet/etc methods entirely.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2492047895\r\n\r\n> Do you think it would be possible to split this into tiny PRs that change each settings-block one-by-one instead?\r\n> That way we can iterate on the first to see if we could validate and parse and normalize the values there as well.\r\n\r\nThere are around 200 settings, so I feel like a single atomic scripted-diff commit t is probably the best approach to take getting this change over with, but depending on what your concern is and what you are trying to verify I can definitely change the script to produce other output.\r\n\r\nIf the idea is to spot-check individual settings, and make sure the replacements are valid, the way I've been doing that is just to view the scripted-diff commit with `git log -p -n1` and then search the diff for individual settings like `LimitAncestorSizeSetting` and confirm the diffs in the places where it is registered & retrieved & defined make sense and don't change previous behavior.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2496920898",
      "submitted_at": "2024-12-12T00:35:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "reviewed",
      "id": 2476736939,
      "node_id": "PRR_kwDOABII586ToAGr",
      "url": null,
      "actor": null,
      "commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-12T14:46:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed 7a24a9dea0387637f604852d85aaac761203bcb6\r\n\r\nThanks for adding `NAME_MAP` to get CamelCase!\r\n\r\nSurface-level nit time I'm afraid, aside from my curiosity regarding your reasoning around `*SettingPath`.\r\n",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2476736939",
      "submitted_at": "2024-12-12T14:46:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "commented",
      "id": 2539200560,
      "node_id": "IC_kwDOABII586XWSAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2539200560",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-12T14:59:04Z",
      "updated_at": "2024-12-12T14:59:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> There are around 200 settings, so I feel like a single atomic scripted-diff commit is probably the best approach to take\r\n\r\n> If the idea is to spot-check individual settings, and make sure the replacements are valid\r\n\r\nI'd like to offer an alternative, since I can only ACK if I have reviewed every line manually - but that's not something I can do here.\r\nSo instead of approaching this row-by-row (apply each change to every occurance and continue with different changeset in different PRs), I would be interested in doing the changes end-to-end for a small subset of the settings instead (i.e. settings with validation and normalization and error handling and type safety for the helpers only, keeping the others completely intact) - i.e. column-by-column (using a tabular iteration as a metaphor).\r\n\r\nI know it's more work that way, but I'm afraid I can't meaningfully review the changes otherwise - but would like to help, I think this is a good general direction.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2539200560",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15654383838,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOlEvDe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15654383838",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e12edf7661384f593b5868b3f3374613773019d9",
      "created_at": "2024-12-13T23:00:33Z"
    },
    {
      "event": "reviewed",
      "id": 2503194507,
      "node_id": "PRR_kwDOABII586VM7eL",
      "url": null,
      "actor": null,
      "commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-13T23:11:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the additional reviews!\r\n\r\nUpdated 7a24a9dea0387637f604852d85aaac761203bcb6 -> e12edf7661384f593b5868b3f3374613773019d9 ([`pr/scripty.13`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.13) -> [`pr/scripty.14`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.13..pr/scripty.14)) with a cleanups to the scripted diff to make it possible to run incrementally and deal with some of l0rinc's concerns.\r\n\r\nI didn't get to make most of the other requested updates yet, but have a list of changes I want to include in the next push:\r\n\r\n- [ ] add settings namespace https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882266574\r\n- [ ] drop get_fn https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877987824\r\n- [ ] simplify linter regex or remove linter https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878053891\r\n- [ ] remove stale include comment https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878099055\r\n- [ ] clean up -capturemessages default value https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878112735\r\n- [ ] move SettingConstruct function to traits class https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877971170\r\n- [ ] add constexpr to constant declrations https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1880959898\r\n- [ ] make clang-format and other formatting fixes from:\r\n  - https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2476736939:\r\n  - https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881823636\r\n  - https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882154802\r\n  - https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882160658\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2539200560\r\n\r\n> I'd like to offer an alternative, since I can only ACK if I have reviewed every line manually - but that's not something I can do here. So instead of approaching this row-by-row (apply each change to every occurance and continue with different changeset in different PRs), I would be interested in doing the changes end-to-end for a small subset of the settings instead (i.e. settings with validation and normalization and error handling and type safety for the helpers only, keeping the others completely intact) - i.e. column-by-column (using a tabular iteration as a metaphor).\r\n\r\nYou might consider giving a partial ACK to the parts of the PR you are ok with, and pointing out other parts you don't feel able to sign off on.\r\n\r\nBut I think the underlying issue here might be that you haven't totally grokked yet which changes are included and are not included in this PR, which is understandable because the scripted diff is very big, so it is hard to see that changes you might be expecting are *not* being made, and that the scope of the PR is in fact, very limited.\r\n\r\nTo help clarify things, I decided to follow up with your idea from [last review](https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2492047895) and show what this change would look like in tiny commits instead of in a big commit. I would encourage you to maybe just look at few of these commits at random, and either see that that changes are obvious or ask me any questions about what is not obvious.\r\n\r\nIf you still couldn't ack the PR after this because you couldn't review every line manually that would be understandable. But you should at least be able to see that the script is really just replacing GetArg calls with equivalent Get calls and AddArg calls with equivalent Register calls and not doing anything else beyond that.\r\n\r\nFor reference the branch with tiny commits can be found at https://github.com/ryanofsky/bitcoin/commits/pr/scripty-tiny and there aren't any differences between it and this PR, other than being split up into more commits. The branch was generated by running the script with a new `--git-commit` option to automatically create a git commit after each setting replacement.\r\n\r\n<details><summary>commits</summary>\r\n<p>\r\n\r\n- 629c302c18d4281f41a4995b125c9da00842fe72 init_settings.h: Add CheckAddrManSetting\r\n- de6edd0be26028fd075db5f2dc6b89933047d1b1 bench/bench_bitcoin_settings.h: Add AsymptoteSetting\r\n- f77817559f49fe24b4b925dbfef3e1159917207b bench/bench_bitcoin_settings.h: Add FilterSetting\r\n- 3f6a9a5a30f965c40b35046c58ce57909ae189f7 bench/bench_bitcoin_settings.h: Add ListSetting\r\n- d99f3abd8ccfb46c80c9612a2c4bd3046fea790f bench/bench_bitcoin_settings.h: Add MinTimeSetting\r\n- beec29c6ae836053d0bf27bc077984accd3c3c68 bench/bench_bitcoin_settings.h: Add OutputCsvSetting\r\n- 882691605648043f6bd23ffcd8d35b3dc227999b bench/bench_bitcoin_settings.h: Add OutputJsonSetting\r\n- 9af4351a845b92b18ccf83dd0834fb16102b6dcd bench/bench_bitcoin_settings.h: Add SanityCheckSetting\r\n- 1c6b7c1573fad99d358b5fb4ade29ee2d04346a9 bench/bench_bitcoin_settings.h: Add PriorityLevelSetting\r\n- 905da021f53dbcb689b787f56d2589ae5986c1e3 bitcoin-cli_settings.h: Add VersionSetting\r\n- 0b0ebac2527346ecf2f9ea6941bc5431f52dea1f bitcoin-tx_settings.h: Add VersionSetting\r\n- e65ce5c42529269ebb7419ddca3cb47059114e10 bitcoin-util_settings.h: Add VersionSetting\r\n- a385cc0e1dd0f598594444c7d80107ab76d0a06a bitcoin-wallet_settings.h: Add VersionSetting\r\n- a2a5bef599fb47be1e8fbc9d6c96c39c5b3e57df init_settings.h: Add VersionSetting\r\n- 83aa8e1774b26fe01970f896fdff62b3c9473243 bitcoin-cli_settings.h: Add ConfSetting\r\n- 8c975b648a35052c8cdebb61ddfe26259f96de62 init_settings.h: Add ConfSetting\r\n- 8c838fc3f10ebdb109628100eed2ee67fc24fcd9 bitcoin-cli_settings.h: Add DataDirSetting\r\n- fb3adf1d712e2d561f49b9b6fb8d3bfb720a7f22 bitcoin-wallet_settings.h: Add DataDirSetting\r\n- ee24f487c433f44ea28d37d47918385a56fa7b98 init_settings.h: Add DataDirSetting\r\n- 9b362e5927dcd986764f5195da7ea0f6171e4add bitcoin-cli_settings.h: Add GenerateSetting\r\n- e09cdbf684c143797d401386f57866d71fe11192 bitcoin-cli_settings.h: Add AddrInfoSetting\r\n- 8a218f6487999cb3c651beb1fb7b34e5c53b0bac bitcoin-cli_settings.h: Add GetInfoSetting\r\n- aa3735d5351369f53f7a04200e7fbfc1618a1b91 bitcoin-cli_settings.h: Add NetInfoSetting\r\n- 823c35145f47d653613cb6cefb3ed74a33057755 bitcoin-cli_settings.h: Add ColorSetting\r\n- 40a01303e0969c73028a9cef7fa38d3e39540ef3 bitcoin-cli_settings.h: Add NamedSetting\r\n- e17f559ed909a3af27381b5b79be91c2dc616f4c bitcoin-cli_settings.h: Add RpcClientTimeoutSetting\r\n- a04605877bf237b77f1a476f615f9edd188abccb bitcoin-cli_settings.h: Add RpcConnectSetting\r\n- 8d025240f63bda53d6f1698d70bb76c8c6bf7a3e bitcoin-cli_settings.h: Add RpcCookieFileSetting\r\n- 4d9c4c3d879b73e581cb6e170eec2925ee7ecc0e init_settings.h: Add RpcCookieFileSetting\r\n- b944834b4f8d0739f363156bef49336a2b907e06 bitcoin-cli_settings.h: Add RpcPasswordSetting\r\n- 9013423e6c9696096df676c1ab24603cedbcb62d init_settings.h: Add RpcPasswordSetting\r\n- 887be1f9ab45ebb64a98b214ac837f7bb9f3ae0c bitcoin-cli_settings.h: Add RpcPortSetting\r\n- 9a50a1c78b1d60b345cbc3f8567bb5cc0cfc22b2 init_settings.h: Add RpcPortSetting\r\n- 61acb9c19f8987e56a1a48a61e1286c5baeb5339 bitcoin-cli_settings.h: Add RpcUserSetting\r\n- e5a521f0ba3c757f43804a0c652f483a652eba6a init_settings.h: Add RpcUserSetting\r\n- 806970e5cbcdf90b8fdde2b7eda5c80ae0147656 bitcoin-cli_settings.h: Add RpcWaitSetting\r\n- 0759754a0efee0ea777aa816340edbec66c81e7f bitcoin-cli_settings.h: Add RpcWaitTimeoutSetting\r\n- 5f994b0e62827540e873bffa18899feb0fb4d3d8 bitcoin-cli_settings.h: Add RpcWalletSetting\r\n- 7501ba291648a928010196536e98c2fccd13b170 bitcoin-cli_settings.h: Add StdinSetting\r\n- 9d6269672e0eac2fd3146994bbfabaaea3cf598f bitcoin-cli_settings.h: Add StdinRpcPassSetting\r\n- ece4be24cd8b975c44f350139ca6b6cd10d046fd bitcoin-cli_settings.h: Add StdinWalletPassphraseSetting\r\n- 7fddf02115f99677e70f7178515763fc64dc205a bitcoin-tx_settings.h: Add CreateSetting\r\n- 24774031d2aa0935e6bd3baa3b220b861a77ffe0 bitcoin-tx_settings.h: Add JsonSetting\r\n- 51c5e9bba705135349caeb99f1efe578795ade39 bitcoin-tx_settings.h: Add TxIdSetting\r\n- 45938ac6f3a9106a98ff6bc48f9cf0963136b046 bitcoin-tx_settings.h: Add DelInSetting\r\n- 83baad12ee849a0fc8828768eaff54343e16720e bitcoin-tx_settings.h: Add DelOutSetting\r\n- f9afb2ee4a2dc63a4ae83e700c9e03285d586c0a bitcoin-tx_settings.h: Add InSetting\r\n- dd0094d7820e23e078e6dff54dd2853deddfa6d1 bitcoin-tx_settings.h: Add LockTimeSetting\r\n- 10a8a2a2d0e343e5f094ff61bd416c22becf7be5 bitcoin-tx_settings.h: Add NVersionSetting\r\n- 3a1cde32ece50d791df69c5ef448f2fde40d3940 bitcoin-tx_settings.h: Add OutAddrSetting\r\n- 0ff44bc8d904f9ae37a81cb999bb23ac5bc2b021 bitcoin-tx_settings.h: Add OutDataSetting\r\n- 2b13f62fdc9e8375dd48b13fd4da74d70d830688 bitcoin-tx_settings.h: Add OutMultiSigSetting\r\n- 2e601c4c1584fec7559827d1bcdacc662eca2336 bitcoin-tx_settings.h: Add OutPubKeySetting\r\n- 7d536cf7d5b708fc958291ac8ad373c244cf2735 bitcoin-tx_settings.h: Add OutScriptSetting\r\n- 0c930c4bb1c78beb7b6e10b3675bee2711c2857d bitcoin-tx_settings.h: Add ReplaceableSetting\r\n- aa908568de2338a04a4ba109d7d553b1a0c692e7 bitcoin-tx_settings.h: Add SignSetting\r\n- d64d5a35317fa49f137a64f7af5c095fd8cbb2ca bitcoin-tx_settings.h: Add LoadSetting\r\n- 12f800e39743eb7c8b5221d612ebcde51b3288d0 bitcoin-tx_settings.h: Add SetSetting\r\n- c02c8be1472e981958f88e2006722375774eaeaa bitcoin-wallet_settings.h: Add WalletSetting\r\n- 0c005ddf2fd2fb3c0cf43ad24b1c3e3d2b5e1a60 dummywallet_settings.h: Add WalletSettingHidden\r\n- 62cdd5505eca429190f6a9eb22d7148c859e53c1 wallet/init_settings.h: Add WalletSetting\r\n- 4525e0552d5799578b90523e0f6bd38e57b27c96 bitcoin-wallet_settings.h: Add DumpFileSetting\r\n- a556efef3fcd4e6b0a38d45f05a3b043df209429 bitcoin-wallet_settings.h: Add DebugSetting\r\n- abbb8b30fcebea1a9b048d5d636fcb53c4e826bf init/common_settings.h: Add DebugSetting\r\n- da8a53a4bb3482ebe174715e7a9aa8cddd283cf0 bitcoin-wallet_settings.h: Add DescriptorsSetting\r\n- 91b8fdcf602e50abce7a9aac3ef278636ce81059 bitcoin-wallet_settings.h: Add LegacySetting\r\n- 33024701ae24cf36ead528e72a005927b5062556 bitcoin-wallet_settings.h: Add FormatSetting\r\n- 02a675be3d231e248cbdddf89ad25033376600f2 bitcoin-wallet_settings.h: Add PrintToConsoleSetting\r\n- 3e9a3ed1468de8c3e87f051d9c4fd32684e93a05 init/common_settings.h: Add PrintToConsoleSetting\r\n- a8011d247f85f22a907dd24394832d1426127f21 bitcoin-wallet_settings.h: Add WithInternalBdbSetting\r\n- 0cd3abc3d1efdae32bfb46818144aa06fc15a364 init_settings.h: Add DaemonSetting\r\n- 5d49aa7a154403831e9f9be7087edbc34988775e init_settings.h: Add DaemonSetting\r\n- 37db1a3d3eab543883b5bb3294c8358dca2a8b4b init_settings.h: Add DaemonWaitSetting\r\n- 1922241b7479293be87bec83bae3d11a40bff452 init_settings.h: Add DaemonWaitSetting\r\n- 8b8342663d2f8414c20c1345818e21cee1c6682c chainparamsbase_settings.h: Add SignetSeedNodeSetting\r\n- 308213012464d5a860e9ce5ee1bfaa973e08b9c1 chainparamsbase_settings.h: Add SignetChallengeSetting\r\n- c32750713ec2f7d56a66f44fbe387c5f5cf1ad39 init_settings.h: Add FastPruneSetting\r\n- ffc8916fe3d57a9e371edfb76fe593f94a016300 chainparamsbase_settings.h: Add TestActivationHeightSetting\r\n- 5cedd342ef18e0533114a0b3122f6d12654823bd chainparamsbase_settings.h: Add VbParamsSetting\r\n- ddb714affc34c6fc15708525666d1c39aff937fd chainparamsbase_settings.h: Add ChainSetting\r\n- 58362384726e112c17ac2871799e97c2c2ba074b chainparamsbase_settings.h: Add RegTestSetting\r\n- 052bff16d83846f7b6a7ea699e0c1c6a33ebf6d4 test/argsman_tests_settings.h: Add RegTestSetting\r\n- d0b4246e9721d611439abbdd41c125920855085c chainparamsbase_settings.h: Add TestNetSetting\r\n- c5ac6a3effbce3ddd55cb5608662294257584454 test/argsman_tests_settings.h: Add TestNetSetting\r\n- 946a5e550da9a2c88e85f09cf8a1b2925a48fba8 chainparamsbase_settings.h: Add TestNet4Setting\r\n- 185435faae18a6773a06cb939b198863dba521f6 chainparamsbase_settings.h: Add SignetSetting\r\n- 37f90b1c7853b768c974a30fe14617d6585cda34 common/args_settings.h: Add HelpSetting\r\n- 445e3389901d6f2afb6301d04eddda33779f9fba common/args_settings.h: Add HSettingHidden\r\n- 0d0bfed05ba7512ad660cce4dc50b8e39fe0f497 test/argsman_tests_settings.h: Add HSetting\r\n- 03e5da2267f6f0d44dba8bdc676b5b44f811eb17 common/args_settings.h: Add QSettingHidden\r\n- 7370e40e9b90c4f0838fd0ed50cb7432ed5363bd init_settings.h: Add BlocksDirSetting\r\n- 55790e70ecc08ea3fdd67351325c33a57d7dec6a init_settings.h: Add SettingsSetting\r\n- b92f21eaacc7c6d24bd89f773c02b85b3f339b26 init_settings.h: Add HelpDebugSetting\r\n- bc6d1edf29386532d47ef79356bc13d21f59838b init_settings.h: Add TestSetting\r\n- 1579e188c8dc747dad9d1208df79682417202496 init_settings.h: Add AllowIgnoredConfSetting\r\n- b68649f668921ba312845b36c2d2c2e37dc206bc dummywallet_settings.h: Add AddressTypeSettingHidden\r\n- 1c7f776320d2a330010c3d63196052666514cf1f wallet/init_settings.h: Add AddressTypeSetting\r\n- 54ced9a1450063a3dc6a28db6fe062a70ad67c1d dummywallet_settings.h: Add AvoidPartialSpendsSettingHidden\r\n- 7002a86aae96cc0d5b7af9180d809d1654d446bf wallet/init_settings.h: Add AvoidPartialSpendsSetting\r\n- a5ac859fe003e7d648e8447711fbc984d92deb3f dummywallet_settings.h: Add ChangeTypeSettingHidden\r\n- 3373cb01df9a6afc9193a4f25219bfbdb4ed504a wallet/init_settings.h: Add ChangeTypeSetting\r\n- c718f08485a02e2c324593881d446d1f637305f4 dummywallet_settings.h: Add ConsolidateFeeRateSettingHidden\r\n- 344bcd6b3d41c68cfabc21095da6578050c8de37 wallet/init_settings.h: Add ConsolidateFeeRateSetting\r\n- 108bbc99688f3e78d315c3228efb82c5e03639a8 dummywallet_settings.h: Add DisableWalletSettingHidden\r\n- 05b93c0f7eb08f28b99f41131d18a86542a4f1a3 wallet/init_settings.h: Add DisableWalletSetting\r\n- c12eba219182b02042a22ca84e365e2be3e9ad37 dummywallet_settings.h: Add DiscardFeeSettingHidden\r\n- deda151e0b7fdd0054f80e70f239a558ade35488 wallet/init_settings.h: Add DiscardFeeSetting\r\n- f48dd55391f8f68d8759c0ffeb8f6b76643898ce dummywallet_settings.h: Add FallbackFeeSettingHidden\r\n- 9e2597924fcf4a31f43949f374d7677a080e6845 wallet/init_settings.h: Add FallbackFeeSetting\r\n- c8e5428029fd9bc469ed39b5372d3eddc8512a0b dummywallet_settings.h: Add KeyPoolSettingHidden\r\n- 490c2f37dbec61e97dd8fb3027cb6f1e0edf69e3 wallet/init_settings.h: Add KeyPoolSetting\r\n- f9566d3742ca49dfb97cc087b280634df7831801 dummywallet_settings.h: Add MaxApsFeeSettingHidden\r\n- 376fdee411779eae1002caa0af9bff5058c5abdf wallet/init_settings.h: Add MaxApsFeeSetting\r\n- cbaf3922cbe60a3723c7eb5a44f1412c427291ce dummywallet_settings.h: Add MaxTxFeeSettingHidden\r\n- 69ee8a665d5fa3a922f30d436f6e4a23d8889acd wallet/init_settings.h: Add MaxTxFeeSetting\r\n- b934bcf0eac23125db80527397fa3f847c210f0b dummywallet_settings.h: Add MinTxFeeSettingHidden\r\n- e4362bdc78f89cb7551c2385f5829c54d70ac614 wallet/init_settings.h: Add MinTxFeeSetting\r\n- c146a592e95bb020228822c68406e5f5f8856462 dummywallet_settings.h: Add PayTxFeeSettingHidden\r\n- 66ef6eb9083946b031c2acdb2efc56cdf5bf3857 wallet/init_settings.h: Add PayTxFeeSetting\r\n- 76cf2750323a37050efd024d31df686654f20316 dummywallet_settings.h: Add SignerSettingHidden\r\n- 1f1e3c79285ed9942e4e534b79210fb792c05efa wallet/init_settings.h: Add SignerSetting\r\n- 615d346860e6ba356f6c2df0befdc313ad73972d dummywallet_settings.h: Add SpendZeroConfChangeSettingHidden\r\n- 441426730c57ed023a8d99669a4ba6944bb3c7fd wallet/init_settings.h: Add SpendZeroConfChangeSetting\r\n- 8faf6280d2f980280045c880a5bd5745de7662ec dummywallet_settings.h: Add TxConfirmTargetSettingHidden\r\n- 0e43216d8e433988c70cb610ee2024a356c6145c wallet/init_settings.h: Add TxConfirmTargetSetting\r\n- ef3552976575b8cdaab7f9bc0f3daa009e7e1220 dummywallet_settings.h: Add WalletBroadcastSettingHidden\r\n- 3c645b32df118052126e3020b81f789f27be4b70 wallet/init_settings.h: Add WalletBroadcastSetting\r\n- 5081192ab3fb1474c76e900a7fa6b0a0370b3105 dummywallet_settings.h: Add WalletDirSettingHidden\r\n- cf23fcb5ab2ada9427b8dc816f5cb130e01488b7 wallet/init_settings.h: Add WalletDirSetting\r\n- f0991aa925b894f673a14c36b2f23fa9db81064e dummywallet_settings.h: Add WalletNotifySettingHidden\r\n- ce7f97b648eb33e653713c0995f4286ac44ea098 wallet/init_settings.h: Add WalletNotifySetting\r\n- 5737f6f76ce37523f30a414cfae438575c0abaaa dummywallet_settings.h: Add WalletRbfSettingHidden\r\n- da7aa72e8d4f55ce7344d22a26dfa22ebf326c38 wallet/init_settings.h: Add WalletRbfSetting\r\n- 08750010a611e1c37196dc181502a9ecd7a26d8f dummywallet_settings.h: Add DbLogSizeSettingHidden\r\n- 99138f876cde5361e4f4ba67a0c0fee964d6a168 wallet/init_settings.h: Add DbLogSizeSetting\r\n- afce0b2c173ebe4614ea0caec1f6cedc994b9759 wallet/init_settings.h: Add DbLogSizeSetting\r\n- f76b5659591ad31703b870cc5f9b55acdd77ae6e dummywallet_settings.h: Add FlushWalletSettingHidden\r\n- 607e1524fd51d66988140c2da66e44b89cf831fc wallet/init_settings.h: Add FlushWalletSetting\r\n- d3cf734028614f80a83ea4e0005650c775da026d dummywallet_settings.h: Add PrivDbSettingHidden\r\n- 0443bd1d9771c04763aea4597a3e3777cfb7545f wallet/init_settings.h: Add PrivDbSetting\r\n- 967d2ab2287130d6a9183cfd6f1e9149c044bef2 dummywallet_settings.h: Add WalletRejectLongChainsSettingHidden\r\n- 138ade7c65ddc259fc9c1b7e5f3a7d9850568748 wallet/init_settings.h: Add WalletRejectLongChainsSetting\r\n- 9eb1d33fe99f5d90340a9b09746b46ea4303a6a9 dummywallet_settings.h: Add WalletCrossChainSettingHidden\r\n- f0850b79b7a8444b15b583c899a84ecab5c58c6e wallet/init_settings.h: Add WalletCrossChainSetting\r\n- aa5759a0326b4fd334410c8139b646d1dd79e5d3 dummywallet_settings.h: Add UnsafeSqliteSyncSettingHidden\r\n- a523c051ce391955e1dadeddc408730c69aeb282 wallet/init_settings.h: Add UnsafeSqliteSyncSetting\r\n- 760042994b366c3c20ca3a02a45b3dded715af2e wallet/init_settings.h: Add UnsafeSqliteSyncSetting\r\n- 04718dd1160020cb6d2be8f9501b0f1499e59c56 dummywallet_settings.h: Add SwapBdbEndianSettingHidden\r\n- bb4a6db55375fc235994957be7cf7f0952fbe862 wallet/init_settings.h: Add SwapBdbEndianSetting\r\n- c7a4801965a517a3a6eb4a7d4ba1185ea5391140 init_settings.h: Add RpcCookiePermsSetting\r\n- 32e5ecab28fd7b7ca903d4d1403d217b75b25bce init_settings.h: Add RpcAuthSetting\r\n- 9f3b099d226ee45ec9dc1b8d60c52d8b95806232 init_settings.h: Add RpcWhitelistDefaultSetting\r\n- 1b8c00a9bf84432883e6d7f7d3fff3b41b37232b init_settings.h: Add RpcWhitelistSetting\r\n- dc35e93d702cd61353e950de6af1804ba88b6d74 init_settings.h: Add RpcAllowIpSetting\r\n- 3edc421ec0c6ccad17c2fedd97b1fd439f8a5fe8 init_settings.h: Add RpcBindSetting\r\n- ebc782b68f99d7b82aeca85d98ba5f74384d7176 init_settings.h: Add RpcServerTimeoutSetting\r\n- 5d7ad0fca3dee767e8cff4207042dab152a509c9 init_settings.h: Add RpcWorkQueueSetting\r\n- caae5926c3b1d71bb0429e7ea9e12d0ba8181e88 init_settings.h: Add RpcThreadsSetting\r\n- 82051ef57edc3b397f611cfce0a9492cf2fd0b3e init_settings.h: Add AlertNotifySetting\r\n- 075c8c840cbab00f05b6fb02a4fe171717ce1b57 init_settings.h: Add AssumeValidSetting\r\n- 315fb27bc90daf2675ac10266637baf96f506f71 init_settings.h: Add BlocksXorSetting\r\n- 14bdf003fcbbcf500e4f8fed99970ed3d6d94066 init_settings.h: Add BlockNotifySetting\r\n- 479ba69378a6997c82738760ef5360140dda2f5e init_settings.h: Add BlockReconstructionExtraTxnSetting\r\n- 347792a9b0f7f03dfbded6de58f6c5c5c49e4e4a init_settings.h: Add BlocksOnlySetting\r\n- a5bcedc57fbdc55eece6d5c9cd227f4463ae0fdb init_settings.h: Add CoinStatsIndexSetting\r\n- db4921818b56f87bf02e6e8f81600641af8110f1 init_settings.h: Add DbBatchSizeSetting\r\n- 3f6fa286a8cf5d63ed03bb8af5629e84a8e721c4 init_settings.h: Add DbCacheSetting\r\n- 0264cced794bbc7a4ee0e30df0faea07bfb8b47a init_settings.h: Add IncludeConfSetting\r\n- 6ee33acffd4cdb28e905a696e0c94999e55e3700 init_settings.h: Add LoadBlockSetting\r\n- 6425f0b5ff76f8cea05de43e0c98525cdd873a98 init_settings.h: Add MaxMemPoolSetting\r\n- 85dab4356573c9ec8b30a42a8d1cc0a561cebd56 init_settings.h: Add MaxOrphanTxSetting\r\n- e619ecd41a7e2357ed7d222a0e6a877459e52f42 init_settings.h: Add MempoolExpirySetting\r\n- df3e9a063a08d2f2874c19c58158eee00c27db0e init_settings.h: Add MinimumChainWorkSetting\r\n- 2764eb8b28c7f10a8ac806183e1f86c7ca6f217f init_settings.h: Add ParSetting\r\n- 17376faf931325c229c6b8762f38a6eec960ca63 init_settings.h: Add PersistMempoolSetting\r\n- fb41ffc33e1a0a6ea61738927b4d4d1ac843e859 init_settings.h: Add PersistMempoolV1Setting\r\n- b1f729c0e4bc7b440a03f80ddd9fb7c6a6e04042 init_settings.h: Add PidSetting\r\n- 609f12c2bf62ce64bf21e8b354472a56ca34fcc8 init_settings.h: Add PruneSetting\r\n- d2fa73374d1f98dcd3f102fc2310d135a31014ac init_settings.h: Add ReIndexSetting\r\n- e263abc4776f9c6a83be1e9c0388b9d85297810c init_settings.h: Add ReIndexChainstateSetting\r\n- 9ec093ac80e193be93b2109ce4565ae31afaddf1 init_settings.h: Add StartupNotifySetting\r\n- e3ce95432f4bab29314739b38251dc89d67abc64 init_settings.h: Add ShutdownNotifySetting\r\n- cbd8bc6ba6fc86e51fbb3d61b94caf99451f57ae init_settings.h: Add TxIndexSetting\r\n- ae32edd1904452b71d9c136c9253034b6639c0f8 init_settings.h: Add BlockFilterIndexSetting\r\n- 6d0d5d5fef80770dcd95bccb6f31e46e086ca582 init_settings.h: Add AddNodeSetting\r\n- 7f72dca6ae0dd4760770690c7cabc6f5c97973c5 init_settings.h: Add AsMapSetting\r\n- 991ec891e03ee275d033c95dc4d4d6dd3a7e2fda init_settings.h: Add BanTimeSetting\r\n- 87974e3b99d4be7238784b453abe0c19872c45c4 init_settings.h: Add BindSetting\r\n- f0e10515cb5e2eb91bbd84b3cd7e02592cc11dfd init_settings.h: Add CJdnsReachableSetting\r\n- 7ea60e5f2165c565501ecd56966c109a4fbc401f init_settings.h: Add ConnectSetting\r\n- ddadc92aaf641e015a7c2953947a7d84f0f0f1dd init_settings.h: Add DiscoverSetting\r\n- da9b692ce0fc1a8f605cde928f9230c38f21900e init_settings.h: Add DnsSetting\r\n- 356de6d1d5275cb946fd93a0a29c99af264120b9 init_settings.h: Add DnsSeedSetting\r\n- e2cde81ffd7c34f7af872533232b9779d82a03d8 init_settings.h: Add ExternalIpSetting\r\n- f7fcc6c40cbc517ac6f4e375da2c8ee45dbc4ea5 init_settings.h: Add FixedSeedsSetting\r\n- 75f09e9b65fa046dd84b40c0fc7f9d94a485daec init_settings.h: Add ForceDnsSeedSetting\r\n- 54fae03b659343f14b9695a876466af7c3eacd13 init_settings.h: Add ListenSetting\r\n- ecc06b0a6cc1deefe7f039822d9fd836a5b06ae0 qt/test/optiontests_settings.h: Add ListenSetting\r\n- 20455952b6352b8ba40f29cf9c9d4fc45fc6a106 init_settings.h: Add ListenOnionSetting\r\n- dde91440bf3cd0c94c408f943c2496ad911d8cf0 qt/test/optiontests_settings.h: Add ListenOnionSetting\r\n- cceb11ee8e595a0ba62a34a25199a209a15ae6d3 init_settings.h: Add MaxConnectionsSetting\r\n- 87e799c87ad975281e9224e77dbad3a39ca2bbbf init_settings.h: Add MaxReceiveBufferSetting\r\n- e7e6e6079759d95a36da29f2e970ee42c1d9d307 init_settings.h: Add MaxSendBufferSetting\r\n- 80064afed91d448078b553fcd665a68a8a78ab00 init_settings.h: Add MaxUploadTargetSetting\r\n- 85cd5f61b2b56d9e916909823e9b0905e76d54ad init_settings.h: Add OnionSetting\r\n- f14a1f37b4956d78d39db4c5b29f7ad227bdd3d8 init_settings.h: Add OnionSetting2\r\n- cacf9025457ef2a6f0c77a5f8ffa5ac5b1583cb5 init_settings.h: Add I2pSamSetting\r\n- 7e7cfd57fd66e96db46dfa5c439cdb68f358a543 init_settings.h: Add I2pAcceptIncomingSetting\r\n- 6854657aecb42774c37b985e183cbb002c0e8831 init_settings.h: Add OnlyNetSetting\r\n- 466180bb889b61c171176570ffbd2ff94e770ddd init_settings.h: Add V2TransportSetting\r\n- f2eee78c218348cc6010d12f8de025bd69fb16c2 init_settings.h: Add PeerBloomFiltersSetting\r\n- 20a40d7ef3eb96dc8c6412e443dd39211a753e51 init_settings.h: Add PeerBlockFiltersSetting\r\n- 1a066f1e34ca77cc7d574318406318f3ee9fb9a2 init_settings.h: Add TxReconciliationSetting\r\n- 1f1fedb4b56ed627e3cf16a24ccd0f13474b72e8 init_settings.h: Add PortSetting\r\n- 3009fccda000391d0bfb3470be4185e3428aa48d init_settings.h: Add ProxySetting\r\n- 2ef2c4d6785d21dc3d0a28ebf7880e81c0e7eb75 init_settings.h: Add ProxySetting2\r\n- 8565e2a94029bf9fba41ba82d6a97982b445abb2 init_settings.h: Add ProxyRandomizeSetting\r\n- 7b24325590eb2b564e05b1ede7a1ecf0c6c7637b init_settings.h: Add SeedNodeSetting\r\n- c9dc6adb4885f5572d706b63cda728c08542eed0 init_settings.h: Add NetworkActiveSetting\r\n- f6af1a1b6c858f9398bae0d0dd84e4a0c7563cf2 init_settings.h: Add TimeoutSetting\r\n- 65d5d86c0e0cfe3f28adc283bba86240d0590c57 init_settings.h: Add PeerTimeoutSetting\r\n- da1674addc078c43840887ce08362fd1e062fecf init_settings.h: Add TorControlSetting\r\n- 01bc31938c64ff5b1e829d8c748123535482cfbf init_settings.h: Add TorPasswordSetting\r\n- 1fad250fc57b75f425de2d8e38fd1374dfaaa4a8 init_settings.h: Add UpnpSetting\r\n- 337276ffa7a92df7ce469003395f8b34931b5836 init_settings.h: Add NatPmpSetting\r\n- 1a55acf1b7d06e3dd3974022581ddeae931dd8fb init_settings.h: Add WhiteBindSetting\r\n- 0ad26ac1193f0448b948879ce93e0c7c1a924169 init_settings.h: Add WhiteListSetting\r\n- a429fc7db7347fdd9612d90e92f593a03e485fa5 init_settings.h: Add ZmqPubHashBlockSetting\r\n- 8005821b84fb89932fbd1bd64c8b3d9867981357 init_settings.h: Add ZmqPubHashBlockSetting\r\n- 638051f79db799eb80dbbbdf24c6fe552892b050 init_settings.h: Add ZmqPubHashTxSetting\r\n- 6d75dba3c4ee64905aeee9c88e254c8b495d6d79 init_settings.h: Add ZmqPubHashTxSetting\r\n- 160dbaa74fcf44ee05d94462973c8951a76a3680 init_settings.h: Add ZmqPubRawBlockSetting\r\n- 8b248f34a18fdd418e84ac012f719cd0b5e53ed3 init_settings.h: Add ZmqPubRawBlockSetting\r\n- 73eb0539da59895427c29d0f2d044ddac5574139 init_settings.h: Add ZmqPubRawTxSetting\r\n- 97b2eaf057e17c04a5a14902356afad80f76bab6 init_settings.h: Add ZmqPubRawTxSetting\r\n- 9b318310279f54f5156a9f378c3b2b0ff614912b init_settings.h: Add ZmqPubSequenceSetting\r\n- 6327fc1420c224c52289947013671123c839168d init_settings.h: Add ZmqPubSequenceSetting\r\n- 2a2b8d612c1a625101c6fd3e8d286e42ad3e8aab init_settings.h: Add ZmqPubHashBlockHwmSetting\r\n- 7f8941580176df724dc618ef2d7e9ae2bfe43b06 init_settings.h: Add ZmqPubHashBlockHwmSetting\r\n- 1519547c97e3dfb70346c696f9d0696e1b2f2aba init_settings.h: Add ZmqPubHashTxHwmSetting\r\n- f41423cc01ea02d96f9299b9889aa790c02fb2d8 init_settings.h: Add ZmqPubHashTxHwmSetting\r\n- 1ab11c6ea8655f4397fd1451c69db12046bea942 init_settings.h: Add ZmqPubRawBlockHwmSetting\r\n- fb42ff4ea80ec4e8be4325be984cb9169a1a6377 init_settings.h: Add ZmqPubRawBlockHwmSetting\r\n- bcbe35bbdd5fc1621aaa656f461034b3c6621948 init_settings.h: Add ZmqPubRawTxHwmSetting\r\n- 22b652d6196deaff39eade7fa330e5a86243a53a init_settings.h: Add ZmqPubRawTxHwmSetting\r\n- 265da9af822b937b91053680533a5d272fd92846 init_settings.h: Add ZmqPubSequenceHwmSetting\r\n- 3424d69f65254d4f5994969b25cb115ae69705a4 init_settings.h: Add ZmqPubSequenceHwmSetting\r\n- ec6797de12390ca03f39bf50830c3fd8acc09ed6 init_settings.h: Add CheckBlocksSetting\r\n- c03829ae2b1c710ace052127de58debb33cb8efa init_settings.h: Add CheckLevelSetting\r\n- affd1dbef5ee585cadf9211a545d1c7e38582d0d init_settings.h: Add CheckBlockIndexSetting\r\n- 848b7024f74ef23c5be554a2362a1fa76d90d2d7 init_settings.h: Add CheckMempoolSetting\r\n- 201bd2712eb6ded936414d009f5b7665de7912bd init_settings.h: Add CheckPointsSetting\r\n- a40b6331421427efe2f079ede6c4cd90ae6ecb96 init_settings.h: Add DeprecatedRpcSetting\r\n- aa1b89261cf7974bef3165ed756138456f7f186f init_settings.h: Add StopAfterBlockImportSetting\r\n- 2b3b1f9ecc993873f032f45783be6c974b5937b5 init_settings.h: Add StopAtHeightSetting\r\n- 773fdfc870b4d86b11b03a1d393e45c4e6b2e7ce init_settings.h: Add LimitAncestorCountSetting\r\n- 3a183d53e5fcafb49ecf35167a8752822fbcc548 init_settings.h: Add LimitAncestorSizeSetting\r\n- 8b406660d03573b1bc6bb7ba7450ae47fa901009 init_settings.h: Add LimitDescendantCountSetting\r\n- cb881aaf7fba23433519c7ca0a3477568af4e03d init_settings.h: Add LimitDescendantSizeSetting\r\n- 6e756937b70480f68b7db94bfea73c60b12f4587 init_settings.h: Add CaptureMessagesSetting\r\n- bee79e1cff694d5a6f12e5795b7dbc0dea91ce41 init_settings.h: Add MockTimeSetting\r\n- 807a5bd3e5d391cdf5968fbf5aa7ae87f2e24b68 init_settings.h: Add MaxSigCacheSizeSetting\r\n- adfaae91480e2fe955c3bdbf90cdaab9ce45b320 init_settings.h: Add MaxTipAgeSetting\r\n- 8e98f004e5e5a8b7c1bb8e06f309d24367321e89 init_settings.h: Add PrintPrioritySetting\r\n- 10431d0836b22a2b74c7e75007e65edb23e5e4b4 init_settings.h: Add UaCommentSetting\r\n- a56d7446006b120af0f8e253e7e3e5334d2822c1 init_settings.h: Add AcceptNonstdTxnSetting\r\n- a0e7932b201a0a1ad2ce320800a695e05276ecd6 init_settings.h: Add IncrementalRelayFeeSetting\r\n- 980180219aafa82401b58b6f1081352695b32ce1 init_settings.h: Add DustRelayFeeSetting\r\n- 7cd2d20e0014ae7eac2a51bfb6e5bc1077cb172d init_settings.h: Add AcceptStaleFeeEstimatesSetting\r\n- c95daffbba472d12427786e5bbd030d649d0660a init_settings.h: Add BytesPerSigOpSetting\r\n- 86d4d5117b0aeaa20d8e4c7ef5073f2ba6eae929 init_settings.h: Add DataCarrierSetting\r\n- b04fe015e9bae11b6e5ca7fbeee9b580e8d50c7e init_settings.h: Add DataCarrierSizeSetting\r\n- 735eb320c14964b65415fb16afff51e6960584e4 init_settings.h: Add PermitBareMultiSigSetting\r\n- 076881bbb817d47c55145f8ad6aad879ca8b048f init_settings.h: Add MinRelayTxFeeSetting\r\n- 36de8b45709ccbb36663bbb3a5fa1f4822d9dd2a init_settings.h: Add WhiteListForceRelaySetting\r\n- 0d7db4e95291358cb33a881088feb2dec9d52058 init_settings.h: Add WhiteListRelaySetting\r\n- 8e287d6c7a8acc859d93fbc051af7a18d64ebfb0 init_settings.h: Add BlockMaxWeightSetting\r\n- e066fac23b979569ec278dfe9ec4376fc733cd86 init_settings.h: Add BlockMinTxFeeSetting\r\n- 80d3188b6cd7c7bf74f829c184c01ad0e74d2dab init_settings.h: Add BlockVersionSetting\r\n- 10c206f312e0b515eceb164f277df18378963dcb init_settings.h: Add RestSetting\r\n- 12e26bd486145d4a94745924c5c89462e76c11fb init_settings.h: Add RpcDocCheckSetting\r\n- c43e5ac59444d1b8b6c7e6147250a155633bbacb init_settings.h: Add ServerSetting\r\n- aea9101f7af9900cd941c44d8bcbb212f6ead58d init_settings.h: Add IpcBindSetting\r\n- f80898a27a2c92a6e5cbc93c1f1845c8154dc799 init_settings.h: Add DbCrashRatioSettingHidden\r\n- 52542f98f2c223299bd1989d523f1141f845a5a3 init_settings.h: Add ForceCompactDbSettingHidden\r\n- cada2e835b8f297ce6e1ecffc4d96adfadd7678b init_settings.h: Add ChooseDataDirSettingHidden\r\n- c82eb648f2c1b85d4c8cf601c87ec250f1e7961b qt/bitcoin_settings.h: Add ChooseDataDirSetting\r\n- 60ef0aef9576bdceaf660608fc90abccebff0946 init_settings.h: Add LangSettingHidden\r\n- 4f2ce372dd825cd024efd2a27ee654df3d076260 qt/bitcoin_settings.h: Add LangSetting\r\n- f8ad80eadedb9cc4e8fe130f510c61222668410c init_settings.h: Add MinSettingHidden\r\n- 90340b22f599f8d04feb5134f5ca859bb8aca2aa qt/bitcoin_settings.h: Add MinSetting\r\n- d54d6b357d717e60f1d1ed885d241d6471f56f5d init_settings.h: Add ResetGuiSettingsSettingHidden\r\n- b0917f426b828764309e7f2ae37e9bff538643f2 qt/bitcoin_settings.h: Add ResetGuiSettingsSetting\r\n- 9221d42140ed1f4be9f768c65aaba1d81ad07ec0 init_settings.h: Add SplashSettingHidden\r\n- d49aee0381c7b0c31ece9489c9a4e7d8f89c3064 qt/bitcoin_settings.h: Add SplashSetting\r\n- fccda5314bde902936488c8939663c721b580f0d init_settings.h: Add UiPlatformSettingHidden\r\n- 0b5e165cee59f63b8de431108076eeab5b085b4f qt/bitcoin_settings.h: Add UiPlatformSetting\r\n- 023a48ca857e7ab60f59e55389e535d4f5085b26 init/common_settings.h: Add DebugLogFileSetting\r\n- df0357f631f82572140f2cb92e7461043c389710 init/common_settings.h: Add DebugExcludeSetting\r\n- c5e2b10e1a7142eaf8c75a3a908347c8d07d5804 init/common_settings.h: Add LogIpsSetting\r\n- bbd771ad67c767f53fa5cae56480d325cc31d2af init/common_settings.h: Add LogLevelSetting\r\n- 7ef24bde66cf21ce9f65d48a3cebadfff89d6e78 test/logging_tests_settings.h: Add LogLevelSetting2\r\n- eb2e4920a5fada57ea7155604feaf770a94ec87f test/logging_tests_settings.h: Add LogLevelSetting3\r\n- cf456d2eac9f76fc34c0aaa6421d0a10e83660ac test/logging_tests_settings.h: Add LogLevelSetting4\r\n- 195c9df9065727f8c74c9de625afdaf0492caab7 init/common_settings.h: Add LogTimestampsSetting\r\n- 285f6b9d16d4cc881ed1d4cf438588a0c813c8f3 init/common_settings.h: Add LogThreadNamesSetting\r\n- 00df3ca690289b2ce931f8cddf47db6e84a26b69 init/common_settings.h: Add LogSourceLocationsSetting\r\n- 1fcfdf07c14605d68b6caeb040bc63f81a3d8e12 init/common_settings.h: Add LogTimeMicrosSetting\r\n- 5aa9b6a81ecdebb058b4252b17cf41d4d3d1f8ea init/common_settings.h: Add LogLevelAlwaysSetting\r\n- fa4fdddff5d3e7e27a6a7832f2f727111aad1495 init/common_settings.h: Add ShrinkDebugFileSetting\r\n- 3afbe803afecb315867d0c51be4504bc2465ab49 test/argsman_tests_settings.h: Add ValueSetting\r\n- d5c4257f896bb2c4dc8b22d8db25be5d6933a7e6 test/argsman_tests_settings.h: Add ASetting\r\n- 99e47d470c7724062832e8a9f6a2c6c1eea35b03 test/argsman_tests_settings.h: Add BSetting\r\n- f53edaca22653363289b3cb0ed1ee5f33cba9a05 test/argsman_tests_settings.h: Add CccSetting\r\n- 77ac1340e0f5390a8bd5d4b2d5cdb65c6ef3cf1f test/argsman_tests_settings.h: Add FSetting\r\n- 14069b581bc63df9af21380dd6765132a189ae52 test/argsman_tests_settings.h: Add FSetting2\r\n- 76077a22c60b4ec86c54da8b12930d9a4e1d5e2c test/argsman_tests_settings.h: Add DSetting\r\n- 8be21a3e3b12caf4cd7c03d76c511f9199979338 test/argsman_tests_settings.h: Add NobSetting\r\n- 4c945dfd16dafd0d11afa73463db6d9332cc5c26 test/argsman_tests_settings.h: Add CSetting\r\n- f94dd3e186dd377da8fc28809a084221558293df test/argsman_tests_settings.h: Add ESetting\r\n- 5d4d4594ee3f8bf55a7579b2db377a0537ad3af2 test/argsman_tests_settings.h: Add FooSetting\r\n- 6b759d61c290b332fd81c4a4dab65ef39d6f7a01 test/getarg_tests_settings.h: Add FooSetting\r\n- 1497a6cefabaa5982eeceb7811a15e24aa933be4 test/getarg_tests_settings.h: Add FooSetting2\r\n- 55ae97e84dbd0f78f0ccb0b71b0fd5346d8393ea test/argsman_tests_settings.h: Add BarSetting\r\n- 7afc408fd96a3d2f7540a0e2b8ce30a35b3f5fe6 test/getarg_tests_settings.h: Add BarSetting\r\n- 06d3bb955bb3dd8882de960f992b696bc0d0df05 test/argsman_tests_settings.h: Add FffSetting\r\n- 0f00fd2f8c201491d88d8177c9d3f36d9bc4e3e8 test/argsman_tests_settings.h: Add GggSetting\r\n- c5177532722115fcd2ce9e2457f1d9a3d39fb6cc test/argsman_tests_settings.h: Add ISetting\r\n- 2d42d3761444d4593ad686113ac0851012198e03 test/argsman_tests_settings.h: Add ZzzSetting\r\n- 9a61b59d61ef25a2f6a3b8181051331ac260b3d9 test/argsman_tests_settings.h: Add IiiSetting\r\n- 398784c6270c81bcb62b4f181caf095494322315 test/argsman_tests_settings.h: Add NofffSetting\r\n- 47daaf52e9a66b2f3090bab57ee0450de69560ab test/argsman_tests_settings.h: Add NogggSetting\r\n- c027b9658e31511d48a042ab472ebefc662d1b2c test/argsman_tests_settings.h: Add NohSetting\r\n- 1c9ca198b97cda54dc6612af1f16727fb9b261a9 test/argsman_tests_settings.h: Add NoiSetting\r\n- 474cc8e15ca67e94a11a196389daa7ef071b07bd test/argsman_tests_settings.h: Add StrTest1Setting\r\n- 4379937cc3278231ad133750c6469d31acf03df6 test/argsman_tests_settings.h: Add StrTest2Setting\r\n- 9bd1f1650252abc85f7c0f18ce2f828b8a0b261f test/argsman_tests_settings.h: Add IntTest1Setting\r\n- f1605dcf380403103ddcaab3c3586995f3af7526 test/argsman_tests_settings.h: Add IntTest2Setting\r\n- 6cd811986c8fa45e6f017e46a5ab88b6a83567f9 test/argsman_tests_settings.h: Add IntTest3Setting\r\n- a35142c3a0eb357bb69f406ff884d9fdefd9166e test/argsman_tests_settings.h: Add BoolTest1Setting\r\n- ebaf5760e023cbe43d0eb74bdda0e8d90df02ba7 test/argsman_tests_settings.h: Add BoolTest2Setting\r\n- bff218dbe13e40af8ba3d16a2929f9058534614a test/argsman_tests_settings.h: Add BoolTest3Setting\r\n- 041c36954883fe37e4233cf1b6c732b2780eed56 test/argsman_tests_settings.h: Add BoolTest4Setting\r\n- 52884b3d4f2879f056d520cb751709b641328960 test/argsman_tests_settings.h: Add PriTest1Setting\r\n- f11eef2216b82ce5a3ba7618849b85d1e7954135 test/argsman_tests_settings.h: Add PriTest2Setting\r\n- 0827f502993ede574a9a76013986625c5eea9bb9 test/argsman_tests_settings.h: Add PriTest3Setting\r\n- 0d91519f66bf4539efacc33194f78194f12723b7 test/argsman_tests_settings.h: Add PriTest4Setting\r\n- 2418f99972124708fa9d6e3a1783d395f757a39b test/getarg_tests_settings.h: Add FoSetting\r\n- ea6a25c224f418b23c60aa9f0000854d6adcae1c test/getarg_tests_settings.h: Add FooOSetting\r\n- 865a9323ab3761045bad9abece5d5eebcdec0507 test/getarg_tests_settings.h: Add DirSetting\r\n- f9fffcbda7100c633235261f6507e2258bc41ed1 test/util/setup_common_settings.h: Add TestDataDirSetting\r\n\r\n</p>\r\n</details>",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2503194507",
      "submitted_at": "2024-12-13T23:04:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "labeled",
      "id": 15654845381,
      "node_id": "LE_lADOABII586drAjCzwAAAAOlGfvF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15654845381",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-14T01:02:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2526132864,
      "node_id": "PRR_kwDOABII586WkbqA",
      "url": null,
      "actor": null,
      "commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-31T06:20:26Z",
      "author_association": "NONE",
      "body": "2024-12-14T00:04:24.9747967Z Cleaning up orphan processes",
      "user": {
        "login": "Pitan1993",
        "id": 157320224,
        "node_id": "U_kgDOCWCEIA",
        "avatar_url": "https://avatars.githubusercontent.com/u/157320224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Pitan1993",
        "html_url": "https://github.com/Pitan1993",
        "followers_url": "https://api.github.com/users/Pitan1993/followers",
        "following_url": "https://api.github.com/users/Pitan1993/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Pitan1993/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Pitan1993/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Pitan1993/subscriptions",
        "organizations_url": "https://api.github.com/users/Pitan1993/orgs",
        "repos_url": "https://api.github.com/users/Pitan1993/repos",
        "events_url": "https://api.github.com/users/Pitan1993/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Pitan1993/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2526132864",
      "submitted_at": "2024-12-31T03:10:20Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "comment_deleted",
      "id": 15788546473,
      "node_id": "CDE_lADOABII586drAjCzwAAAAOtEhmp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15788546473",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-31T06:20:30Z"
    },
    {
      "event": "reviewed",
      "id": 2623495377,
      "node_id": "PRR_kwDOABII586cX1zR",
      "url": null,
      "actor": null,
      "commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-18T13:08:50Z",
      "author_association": "MEMBER",
      "body": "left two questions/suggestions",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2623495377",
      "submitted_at": "2025-02-18T13:08:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "reviewed",
      "id": 2623972209,
      "node_id": "PRR_kwDOABII586cZqNx",
      "url": null,
      "actor": null,
      "commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-18T15:25:48Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2623972209",
      "submitted_at": "2025-02-18T15:25:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16356985412,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAPO88pE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16356985412",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "215f55567b2af1677f9971a0ca03e86d09fbb726",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/215f55567b2af1677f9971a0ca03e86d09fbb726",
      "created_at": "2025-02-18T23:46:00Z"
    },
    {
      "event": "reviewed",
      "id": 2625238938,
      "node_id": "PRR_kwDOABII586cefea",
      "url": null,
      "actor": null,
      "commit_id": "215f55567b2af1677f9971a0ca03e86d09fbb726",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-18T23:46:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased e12edf7661384f593b5868b3f3374613773019d9 -> 215f55567b2af1677f9971a0ca03e86d09fbb726 ([`pr/scripty.14`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.14) -> [`pr/scripty.15`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.14-rebase..pr/scripty.15)) due to various conflicts.\r\n\r\nThanks for the review! I definitely want to follow up on the HelpFn suggestion.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2625238938",
      "submitted_at": "2025-02-18T23:46:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "unlabeled",
      "id": 16357215174,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAPO90vG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16357215174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-19T00:19:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16373134696,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAPP6jVo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16373134696",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "31fe4c6f994697dd027be8064c27dde800ebcb65",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/31fe4c6f994697dd027be8064c27dde800ebcb65",
      "created_at": "2025-02-19T23:31:00Z"
    },
    {
      "event": "reviewed",
      "id": 2628216843,
      "node_id": "PRR_kwDOABII586cp2gL",
      "url": null,
      "actor": null,
      "commit_id": "31fe4c6f994697dd027be8064c27dde800ebcb65",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-19T23:35:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 215f55567b2af1677f9971a0ca03e86d09fbb726 -> 31fe4c6f994697dd027be8064c27dde800ebcb65 ([`pr/scripty.15`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.15) -> [`pr/scripty.16`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.15..pr/scripty.16)) changing HelpFn arguments as suggested to make them more extensible and support querying default values",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2628216843",
      "submitted_at": "2025-02-19T23:35:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "commented",
      "id": 2670078049,
      "node_id": "IC_kwDOABII586fJihh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2670078049",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-20T00:22:12Z",
      "updated_at": "2025-02-20T00:22:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/37504402027</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2670078049",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "labeled",
      "id": 16373549346,
      "node_id": "LE_lADOABII586drAjCzwAAAAPP8Iki",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16373549346",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-20T00:22:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2631611128,
      "node_id": "PRR_kwDOABII586c2zL4",
      "url": null,
      "actor": null,
      "commit_id": "31fe4c6f994697dd027be8064c27dde800ebcb65",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-21T01:31:57Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2631611128",
      "submitted_at": "2025-02-21T01:31:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "labeled",
      "id": 16542818818,
      "node_id": "LE_lADOABII586drAjCzwAAAAPaB2IC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16542818818",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-04T00:46:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16580314928,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAPcQ4cw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16580314928",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b3968352b292c8c69dffbaa9c54a17405e246289",
      "created_at": "2025-03-04T22:26:33Z"
    },
    {
      "event": "commented",
      "id": 2699103082,
      "node_id": "IC_kwDOABII586g4Qtq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2699103082",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-04T22:27:51Z",
      "updated_at": "2025-10-20T15:10:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 31fe4c6f994697dd027be8064c27dde800ebcb65 -> b3968352b292c8c69dffbaa9c54a17405e246289 ([`pr/scripty.16`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.16) -> [`pr/scripty.17`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.16-rebase..pr/scripty.17)) due to conflict with #31916. Also debugged the linker errors that happened in https://cirrus-ci.com/task/4624196052975616?logs=ci#L3843, implemented a workaround and reported a bug upstream https://github.com/llvm/llvm-project/issues/129778\n<!-- begin push-18 -->\nRebased b3968352b292c8c69dffbaa9c54a17405e246289 -> 08de69a37d9ef79075dbd31a19b13f7b0e4ae6b9 ([`pr/scripty.17`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.17) -> [`pr/scripty.18`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.18), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.17-rebase..pr/scripty.18))<!-- end -->\n<!-- begin push-19 -->\nUpdated 08de69a37d9ef79075dbd31a19b13f7b0e4ae6b9 -> d77ae6f8b0bcd3825d04e5bb4c7d5861c02486ff ([`pr/scripty.18`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.18) -> [`pr/scripty.19`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.19), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.18..pr/scripty.19))<!-- end --> fixing ci errors due to missing includes https://github.com/bitcoin/bitcoin/actions/runs/18514124171?pr=31260\n<!-- begin push-20 -->\nUpdated d77ae6f8b0bcd3825d04e5bb4c7d5861c02486ff -> 43f84b2f07ff0cdd41adfce25813cca029b43f26 ([`pr/scripty.19`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.19) -> [`pr/scripty.20`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.19..pr/scripty.20))<!-- end --> fixing more ci errors from missing includes https://github.com/bitcoin/bitcoin/actions/runs/18566910866?pr=31260\n<!-- begin push-21 -->\nUpdated 43f84b2f07ff0cdd41adfce25813cca029b43f26 -> 994aeec0351871249334ccb957016f55f88bc31f ([`pr/scripty.20`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.20) -> [`pr/scripty.21`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.21), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.20..pr/scripty.21))<!-- end --> fixing more ci errors from missing includes https://github.com/bitcoin/bitcoin/actions/runs/18572451076?pr=31260\n<!-- begin push-22 -->\nUpdated 994aeec0351871249334ccb957016f55f88bc31f -> 7787b1c264f3fc6b99a6efaf7c6fa8ea55bfc626 ([`pr/scripty.21`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.21) -> [`pr/scripty.22`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.21..pr/scripty.22))<!-- end --> fixing more ci errors from missing includes https://github.com/bitcoin/bitcoin/actions/runs/18578799880/job/52969481716?pr=31260\n<!-- begin push-23 -->\nUpdated 7787b1c264f3fc6b99a6efaf7c6fa8ea55bfc626 -> ddd24800e2b976718685a7cf1d79685ac1d65c42 ([`pr/scripty.22`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.22) -> [`pr/scripty.23`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.22..pr/scripty.23))<!-- end --> fixing more ci errors from missing includes https://github.com/bitcoin/bitcoin/actions/runs/18580143542/job/52973230594?pr=31260\n<!-- begin push-24 -->\nUpdated ddd24800e2b976718685a7cf1d79685ac1d65c42 -> 6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558 ([`pr/scripty.23`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.23) -> [`pr/scripty.24`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.23..pr/scripty.24))<!-- end --> fixing more ci errors from missing includes https://github.com/bitcoin/bitcoin/actions/runs/18594047920/job/53015631305?pr=31260",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2699103082",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "unlabeled",
      "id": 16582441141,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAPcY_i1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16582441141",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-04T23:40:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16583211092,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAPcb7hU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16583211092",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-05T00:07:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16752196175,
      "node_id": "LE_lADOABII586drAjCzwAAAAPmgjpP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16752196175",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T01:25:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2960951696,
      "node_id": "PRR_kwDOABII586wfImQ",
      "url": null,
      "actor": null,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-02T12:58:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Overdue Concept ACK b3968352b292c8c69dffbaa9c54a17405e246289\r\n\r\nLooking back at this, I realize there's actually not *that* much going on. No (intended) changes in behavior when executing the code, just installing compile time guardrails.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2960951696",
      "submitted_at": "2025-07-02T12:58:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ3MmYwMWY1MDM3MGJhODlhNTc1NThiM2FhNzU5ZTk1NjgxZjI0NWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d72f01f50370ba89a57558b3aa759e95681f245e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d72f01f50370ba89a57558b3aa759e95681f245e",
      "tree": {
        "sha": "04542eaea6311c4ee5bf755efae9abe74ed67ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04542eaea6311c4ee5bf755efae9abe74ed67ae3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2987102dd13f965c7a0bf1d5b8ee15bcf025398",
          "sha": "d2987102dd13f965c7a0bf1d5b8ee15bcf025398",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d2987102dd13f965c7a0bf1d5b8ee15bcf025398"
        }
      ],
      "message": "common: expose SettingToPath function",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-08T14:25:28Z"
      },
      "sha": "d72f01f50370ba89a57558b3aa759e95681f245e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIwOTg2NGQyM2I1MDRkOTI4Y2RmYjk5OTBiZWQ4ZWFkZjAxMmMzZTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/209864d23b504d928cdfb9990bed8eadf012c3e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/209864d23b504d928cdfb9990bed8eadf012c3e7",
      "tree": {
        "sha": "69f2e76e853bc03949516880176f49568ed0a93b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69f2e76e853bc03949516880176f49568ed0a93b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d72f01f50370ba89a57558b3aa759e95681f245e",
          "sha": "d72f01f50370ba89a57558b3aa759e95681f245e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d72f01f50370ba89a57558b3aa759e95681f245e"
        }
      ],
      "message": "common: Add Setting class to support typed Settings",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-08T21:26:51Z"
      },
      "sha": "209864d23b504d928cdfb9990bed8eadf012c3e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZhMjNiYmFlNWZhMjI3NzZjYWVhNzVkZGU4ZGNiZmMxMGU3NWY4ZTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a23bbae5fa22776caea75dde8dcbfc10e75f8e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6a23bbae5fa22776caea75dde8dcbfc10e75f8e8",
      "tree": {
        "sha": "dd0c6cd4e21658811f6180963cafc83a8190c31e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd0c6cd4e21658811f6180963cafc83a8190c31e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/209864d23b504d928cdfb9990bed8eadf012c3e7",
          "sha": "209864d23b504d928cdfb9990bed8eadf012c3e7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/209864d23b504d928cdfb9990bed8eadf012c3e7"
        }
      ],
      "message": "test: Add test for common::Setting class",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-13T16:38:11Z"
      },
      "sha": "6a23bbae5fa22776caea75dde8dcbfc10e75f8e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRhZTI2MjY0YzMzYjliMWNkMjdhM2NhY2ZlMGQxN2IwYTE4ZDY0ODI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dae26264c33b9b1cd27a3cacfe0d17b0a18d6482",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dae26264c33b9b1cd27a3cacfe0d17b0a18d6482",
      "tree": {
        "sha": "7814819da8a226cd840de0a7d730631b24223342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7814819da8a226cd840de0a7d730631b24223342"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a23bbae5fa22776caea75dde8dcbfc10e75f8e8",
          "sha": "6a23bbae5fa22776caea75dde8dcbfc10e75f8e8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6a23bbae5fa22776caea75dde8dcbfc10e75f8e8"
        }
      ],
      "message": "init, refactor: Prepare AddArg calls for scripted-diff\n\nAvoid string concatenation and add missing namespace names so AddArg calls can\nbe moved to header files in an upcoming scripted-diff.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-15T20:26:55Z"
      },
      "sha": "dae26264c33b9b1cd27a3cacfe0d17b0a18d6482"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkMjk0OGVlODE3NmIxMmUwNTIwODJjOWJmN2NhZTI4YjgwZDA2Mzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2948ee8176b12e052082c9bf7cae28b80d0639",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2948ee8176b12e052082c9bf7cae28b80d0639",
      "tree": {
        "sha": "789a93f8d5f830d6c22d37cc56ca791422e2bb21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/789a93f8d5f830d6c22d37cc56ca791422e2bb21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dae26264c33b9b1cd27a3cacfe0d17b0a18d6482",
          "sha": "dae26264c33b9b1cd27a3cacfe0d17b0a18d6482",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dae26264c33b9b1cd27a3cacfe0d17b0a18d6482"
        }
      ],
      "message": "move-only: move AddArg default values to headers\n\nMove constant declarations referenced in AddArg calls to headers so AddArg\ncalls be moved to header files in an upcoming scripted-diff.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-05T19:33:09Z"
      },
      "sha": "1d2948ee8176b12e052082c9bf7cae28b80d0639"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVjMDUxYmI5ZDRiMTg0MGVhZmU5MDk5YWQ3NTVkZGFjNGFhZmQyOTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec051bb9d4b1840eafe9099ad755ddac4aafd294",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ec051bb9d4b1840eafe9099ad755ddac4aafd294",
      "tree": {
        "sha": "fffce25377f361306fca7b391164c68d71183dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fffce25377f361306fca7b391164c68d71183dec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2948ee8176b12e052082c9bf7cae28b80d0639",
          "sha": "1d2948ee8176b12e052082c9bf7cae28b80d0639",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2948ee8176b12e052082c9bf7cae28b80d0639"
        }
      ],
      "message": "refactor: Prepare AddHiddenArgs call for scripted-diff\n\nDrop hidden_args vector so all AddHiddenArgs calls can be replaced in upcoming\nscripted diff.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-25T20:02:43Z"
      },
      "sha": "ec051bb9d4b1840eafe9099ad755ddac4aafd294"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY0MGIzMDI1YTFhOTYyNThiZmUyMjEwMGIwYzA0YTQ5NmYyY2RjYTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/640b3025a1a96258bfe22100b0c04a496f2cdca2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/640b3025a1a96258bfe22100b0c04a496f2cdca2",
      "tree": {
        "sha": "9687dfcd6693b87697a9d64b67f5b2bb2107a177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9687dfcd6693b87697a9d64b67f5b2bb2107a177"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec051bb9d4b1840eafe9099ad755ddac4aafd294",
          "sha": "ec051bb9d4b1840eafe9099ad755ddac4aafd294",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec051bb9d4b1840eafe9099ad755ddac4aafd294"
        }
      ],
      "message": "lint: Fixes for _settings.h headers\n\nLinter changes to deal with _settings.h headers added in the next commit.\n\nIn circular-dependencies.py, prevent _settings.h headers from being included\ntransitively. Add a new check that makes it an error to include _settings.h\nfrom another header file, rather than a .cpp file. Use this fact to avoid\nerrors about .cpp files including _settings.h files being circularly dependent\nbased on each other.\n\nIn check-doc.py update test to look for Setting::Get and Setting::Register\ninstead of GetArg and AddArg.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-10T19:52:00Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-14T12:20:52Z"
      },
      "sha": "640b3025a1a96258bfe22100b0c04a496f2cdca2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20282218147,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS46haj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20282218147",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "08de69a37d9ef79075dbd31a19b13f7b0e4ae6b9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/08de69a37d9ef79075dbd31a19b13f7b0e4ae6b9",
      "created_at": "2025-10-15T00:41:51Z"
    },
    {
      "event": "unlabeled",
      "id": 20282348213,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAS47BK1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20282348213",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-15T00:56:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc1YzU1ZTZmM2E3ZGYxZDhlZDhhOGU1YmZkZDJhNDEzYWY1MTM5NmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75c55e6f3a7df1d8ed8a8e5bfdd2a413af51396d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/75c55e6f3a7df1d8ed8a8e5bfdd2a413af51396d",
      "tree": {
        "sha": "21a89a2f83b52b154d1f730021d4e6f9bcc0e425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21a89a2f83b52b154d1f730021d4e6f9bcc0e425"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/640b3025a1a96258bfe22100b0c04a496f2cdca2",
          "sha": "640b3025a1a96258bfe22100b0c04a496f2cdca2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/640b3025a1a96258bfe22100b0c04a496f2cdca2"
        }
      ],
      "message": "cmake: Add univalue, boost, and libevent include directories\n\nAdd univalue include directory to libraries that need it it because they will\ninclude it indirectly through setting.h files, and add libevent include\ndirectory to libraries that need it because they will include it indirectly\nthrough init_settings.h which includes torcontrol.h which includes\nevent2/util.h.\n\nThe missing cmake library dependencies trigger CI errors that may not happen on\nall systems depending in how package include paths are laid out. In particular\nthe torcontrol / libevent errors only seem to happen on macos with homebrew.\n\nIt would probably be good to streamline headers to avoid these dependencies in\nthe future. It would be good if the torcontrol header did not have a pulic\ndependency on libevent or, if it was just split up and the DEFAULT_TOR_CONTROL\nand DEFAULT_TOR_CONTROL_PORT constants needed by init_settings.h to a different\nfile.\n\nErrors look like:\n\nD:\\a\\bitcoin\\bitcoin\\src\\common\\setting.h(10,1): error C1083: Cannot open include file: 'univalue.h': No such file or directory [D:\\a\\bitcoin\\bitcoin\\build\\src\\bitcoin.vcxproj]\n\nIn file included from /home/admin/actions-runner/_work/_temp/src/bitcoin.cpp:7:\nIn file included from /home/admin/actions-runner/_work/_temp/src/bitcoin_settings.h:4:\n/home/admin/actions-runner/_work/_temp/src/common/setting.h:10:10: fatal error: 'univalue.h' file not found\n   10 | #include <univalue.h>\n      |          ^~~~~~~~~~~~\n1 error generated.\n\nD:\\a\\bitcoin\\bitcoin\\src\\txmempool.h(27,1): error C1083: Cannot open include file: 'boost/multi_index/hashed_index.hpp': No such file or directory [D:\\a\\bitcoin\\bitcoin\\build\\src\\bitcoin.vcxproj]\n\nIn file included from /home/admin/actions-runner/_work/_temp/src/validation.h:29,\n                 from /home/admin/actions-runner/_work/_temp/src/node/chainstatemanager_args.h:9,\n                 from /home/admin/actions-runner/_work/_temp/src/init_settings.h:21,\n                 from /home/admin/actions-runner/_work/_temp/src/bitcoin.cpp:10:\n/home/admin/actions-runner/_work/_temp/src/txmempool.h:27:10: fatal error: boost/multi_index/hashed_index.hpp: No such file or directory\n   27 | #include <boost/multi_index/hashed_index.hpp>\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/qt/bitcoin.cpp:14:\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/init_settings.h:30:\n/Users/runner/work/bitcoin/bitcoin/src/torcontrol.h:14:10: fatal error: 'event2/util.h' file not found\n   14 | #include <event2/util.h>\n      |          ^~~~~~~~~~~~~~~\n1 error generated.\nninja: build stopped: subcommand failed.\n\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/test/util/setup_common.cpp:17:\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/init_settings.h:30:\n/Users/runner/work/bitcoin/bitcoin/src/torcontrol.h:14:10: fatal error: 'event2/util.h' file not found\n   14 | #include <event2/util.h>\n      |          ^~~~~~~~~~~~~~~\n1 error generated.\n\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/common/config.cpp:6:\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/init_settings.h:30:\n/Users/runner/work/bitcoin/bitcoin/src/torcontrol.h:14:10: fatal error: 'event2/util.h' file not found\n   14 | #include <event2/util.h>\n      |          ^~~~~~~~~~~~~~~\n1 error generated.\n\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/bitcoin.cpp:10:\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/init_settings.h:30:\n/Users/runner/work/bitcoin/bitcoin/src/torcontrol.h:14:10: fatal error: 'event2/util.h' file not found\n   14 | #include <event2/util.h>\n      |          ^~~~~~~~~~~~~~~\n1 error generated.\n\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/bitcoind.cpp:15:\nIn file included from /Users/runner/work/bitcoin/bitcoin/src/init_settings.h:30:\n/Users/runner/work/bitcoin/bitcoin/src/torcontrol.h:14:10: fatal error: 'event2/util.h' file not found\n   14 | #include <event2/util.h>\n      |          ^~~~~~~~~~~~~~~\n1 error generated.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-16T15:30:02Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-16T15:30:02Z"
      },
      "sha": "75c55e6f3a7df1d8ed8a8e5bfdd2a413af51396d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNmYTg4ODc0MjhiNzI0ZGU0YmE0YzNmMGJhNjEyZDBlYTdkZTE2Mzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfa8887428b724de4ba4c3f0ba612d0ea7de1638",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cfa8887428b724de4ba4c3f0ba612d0ea7de1638",
      "tree": {
        "sha": "d223d900c3237f563312c83838cd74450347d9e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d223d900c3237f563312c83838cd74450347d9e2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75c55e6f3a7df1d8ed8a8e5bfdd2a413af51396d",
          "sha": "75c55e6f3a7df1d8ed8a8e5bfdd2a413af51396d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/75c55e6f3a7df1d8ed8a8e5bfdd2a413af51396d"
        }
      ],
      "message": "contrib: Add script to replace AddArgs / GetArgs calls with Setting Register / Get calls\n\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-16T15:30:02Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-05T15:05:46Z"
      },
      "sha": "cfa8887428b724de4ba4c3f0ba612d0ea7de1638"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjYzRiMzFlMWU4ZWM5ZWVhNGQ0MWZhYmY2NDA1Yzk3YzhkYWI1NTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "tree": {
        "sha": "904f6519b786224c8425644613ea7e0e6e1d42c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/904f6519b786224c8425644613ea7e0e6e1d42c7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfa8887428b724de4ba4c3f0ba612d0ea7de1638",
          "sha": "cfa8887428b724de4ba4c3f0ba612d0ea7de1638",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cfa8887428b724de4ba4c3f0ba612d0ea7de1638"
        }
      ],
      "message": "scripted-diff: Replace AddArgs / GetArgs calls with Setting Register / Get calls\n\nThis commit is a pure refactoring and does not change behavior in any way.\n\n-BEGIN VERIFY SCRIPT-\npython contrib/devtools/reg-settings.py\ngit add -N src/bench/bench_bitcoin_settings.h src/bitcoin_settings.h src/bitcoin-tx_settings.h src/bitcoin-util_settings.h src/bitcoin-wallet_settings.h src/chainparamsbase_settings.h src/common/args_settings.h src/init/common_settings.h src/init_settings.h src/qt/bitcoin_settings.h src/test/argsman_tests_settings.h src/test/logging_tests_settings.h src/wallet/init_settings.h src/dummywallet_settings.h src/qt/test/optiontests_settings.h src/test/getarg_tests_settings.h\ngit rm contrib/devtools/reg-settings.py\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-10-16T15:30:02Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-12T18:45:58Z"
      },
      "sha": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20322451628,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS7UACs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20322451628",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d77ae6f8b0bcd3825d04e5bb4c7d5861c02486ff",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d77ae6f8b0bcd3825d04e5bb4c7d5861c02486ff",
      "created_at": "2025-10-16T15:44:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20326964952,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS7lN7Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20326964952",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "43f84b2f07ff0cdd41adfce25813cca029b43f26",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/43f84b2f07ff0cdd41adfce25813cca029b43f26",
      "created_at": "2025-10-16T19:25:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20331811874,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS73tQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20331811874",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "994aeec0351871249334ccb957016f55f88bc31f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/994aeec0351871249334ccb957016f55f88bc31f",
      "created_at": "2025-10-17T00:39:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20332593738,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS76sJK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20332593738",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7787b1c264f3fc6b99a6efaf7c6fa8ea55bfc626",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7787b1c264f3fc6b99a6efaf7c6fa8ea55bfc626",
      "created_at": "2025-10-17T02:04:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20344641714,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS8opiy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20344641714",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ddd24800e2b976718685a7cf1d79685ac1d65c42",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ddd24800e2b976718685a7cf1d79685ac1d65c42",
      "created_at": "2025-10-17T13:22:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20382608246,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAS-5et2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20382608246",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "created_at": "2025-10-20T15:09:59Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850502858",
      "pull_request_review_id": 2448864512,
      "id": 1850502858,
      "node_id": "PRRC_kwDOABII585uTG7K",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;",
      "path": "src/common/setting.h",
      "position": 53,
      "original_position": 39,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "f9910935c880c782c2b1d35acd38e1e18e6b4ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f9910935c880c782c2b1d35acd38e1e18e6b4ad8:\r\nWhat is `StringLiteral(std::nullptr_t) ->`? I take it some kind of template specialization but haven't come across regular braces and arrows being used in this way before.\r\n\r\nEdit:\r\nIt could be a constructor but I would expect `StringLiteral::StringLiteral` as it appears outside the type definition.\r\nIt kind of looks like a function prototype C++11-style return type, but there's no body.\r\nHappy to learn more modern rules for things, I'm a bit out of date.",
      "created_at": "2024-11-20T15:16:04Z",
      "updated_at": "2024-11-22T19:53:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850502858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850502858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850595520",
      "pull_request_review_id": 2448864512,
      "id": 1850595520,
      "node_id": "PRRC_kwDOABII585uTdjA",
      "diff_hunk": "@@ -271,9 +273,14 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n \n fs::path ArgsManager::GetPathArg(std::string arg, const fs::path& default_value) const\n {\n-    if (IsArgNegated(arg)) return fs::path{};\n-    std::string path_str = GetArg(arg, \"\");\n-    if (path_str.empty()) return default_value;\n+    return SettingToPath(GetSetting(arg)).value_or(default_value);\n+}\n+\n+std::optional<fs::path> SettingToPath(const common::SettingsValue& value)\n+{\n+    if (value.isFalse()) return fs::path{};",
      "path": "src/common/args.cpp",
      "position": 23,
      "original_position": 22,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is `isFalse()` equivalent to the former `IsArgNegated()` use?",
      "created_at": "2024-11-20T16:06:07Z",
      "updated_at": "2024-11-20T21:35:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850595520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850595520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850653892",
      "pull_request_review_id": 2448864512,
      "id": 1850653892,
      "node_id": "PRRC_kwDOABII585uTrzE",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n+/** Priority level default value, run \"all\" priority levels */\n+static const std::string DEFAULT_PRIORITY{\"all\"};",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 1,
      "original_position": 17,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In b51a156f388926175afdbc50c2d563db404e3b81:\r\nI've learned to accept `static constexpr` (+`inline`...) in headers, but these other non-`constexpr` statics seem like they end up being \"file-local\" static vars in *every compilation unit* that includes them. Seems off?",
      "created_at": "2024-11-20T16:39:57Z",
      "updated_at": "2024-11-20T21:35:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850653892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850653892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850670602",
      "pull_request_review_id": 2448864512,
      "id": 1850670602,
      "node_id": "PRRC_kwDOABII585uTv4K",
      "diff_hunk": "@@ -55,8 +73,19 @@ def module_name(path):\n             if match:\n                 include = match.group(1)\n                 included_module = module_name(include)\n-                if included_module is not None and included_module in deps and included_module != module:\n+                if included_module and included_module in deps and included_module != module:\n                     deps[module].add(included_module)\n+                included_by[include].add(arg)\n+\n+# Trigger an error if any module listed as being nontransitive if ever included",
      "path": "contrib/devtools/circular-dependencies.py",
      "position": 1,
      "original_position": 60,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n# Trigger an error if any module listed as being nontransitive is ever included\r\n```",
      "created_at": "2024-11-20T16:50:28Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850670602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850670602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850692509",
      "pull_request_review_id": 2448864512,
      "id": 1850692509,
      "node_id": "PRRC_kwDOABII585uT1Od",
      "diff_hunk": "@@ -926,40 +886,40 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n-    if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n+    if (V2transportSetting::Get(args)) {\n         g_local_services = ServiceFlags(g_local_services | NODE_P2P_V2);\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (PeerblockfiltersSetting::Get(args)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n \n         g_local_services = ServiceFlags(g_local_services | NODE_COMPACT_FILTERS);\n     }\n \n-    if (args.GetIntArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (PruneSetting::Get(args, 0)) {\n+        if (TxindexSetting::Get(args))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-reindex-chainstate\", false)) {\n+        if (ReindexChainstateSetting::Get(args)) {\n             return InitError(_(\"Prune mode is incompatible with -reindex-chainstate. Use full -reindex instead.\"));\n         }\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false\n-    if (args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED) && !args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)){\n+    if (ForcednsseedSetting::Get(args) && !DnsseedSetting::Get(args, DEFAULT_DNSSEED)){",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 571,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How come we keep the default value in one of the cases here but not the other, both are using `.GetBoolArg` in the original?\r\n\r\nSeems to compile fine when switching `DnsseedSetting` from using `::HelpArgs<DEFAULT_DNSSEED>` to `::Default<DEFAULT_DNSSEED>` like the `ForcednsseedSetting`.",
      "created_at": "2024-11-20T17:03:15Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850692509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850692509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850701093",
      "pull_request_review_id": 2448864512,
      "id": 1850701093,
      "node_id": "PRRC_kwDOABII585uT3Ul",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/args.h>\n+#include <common/setting.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <string>\n+#include <vector>\n+\n+using common::Disabled;\n+using common::Setting;\n+using common::SettingOptions;\n+using common::SettingsValue;\n+using common::Unset;\n+\n+template<typename T>\n+class SettingTest\n+{\n+public:\n+    using S = Setting<\"-s\", T, SettingOptions{.legacy = true}, \"\">;\n+\n+    SettingTest() {\n+        S::Register(m_args);\n+    }\n+\n+    SettingTest& AddArg(std::string arg) {\n+        m_argv.push_back(std::move(arg));\n+        return *this;\n+    }\n+\n+    SettingTest& Parse() {\n+        std::vector<const char*> argv;\n+        for (const auto& arg : m_argv) argv.push_back(arg.c_str());\n+        std::string error;\n+        bool result = m_args.ParseParameters(argv.size(), argv.data(), error);\n+        BOOST_CHECK_EQUAL(result, true);\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        return *this;\n+    }\n+\n+    T Get() {\n+        return S::Get(m_args);\n+    }\n+\n+    SettingsValue Value() {\n+        return S::Value(m_args);\n+    }\n+\n+private:\n+    ArgsManager m_args;\n+    std::vector<std::string> m_argv{\"unused\"};\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(setting_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(GetOptional)\n+{\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.Parse().Get(), std::nullopt);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Get(), 3);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Value().write(), \"\\\"3\\\"\");\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-nos=1\").Parse().Get(), 0);",
      "path": "src/test/setting_tests.cpp",
      "position": 77,
      "original_position": 64,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe add value-less negation?\r\n```C++\r\nBOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-nos\").Parse().Get(), 0);\r\n```",
      "created_at": "2024-11-20T17:09:17Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850701093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850701093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850906340",
      "pull_request_review_id": 2448864512,
      "id": 1850906340,
      "node_id": "PRRC_kwDOABII585uUpbk",
      "diff_hunk": "@@ -0,0 +1,593 @@\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    extern_args: list[str] = field(default_factory=list)\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    parens = 0\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            parens += 1\n+        elif c == \")\":\n+            if parens == 0: break\n+            parens -= 1\n+        elif c == \",\" and parens == 0:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2):])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len+1],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end():])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'(!*)\\b((?:\\w|\\.|->)+)(\\.|->)(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5):])\n+            obj_name = match.group(2)\n+            if match.group(3) == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len+1],\n+                obj_name=obj_name,\n+                arg_name=call_args[0].strip().strip('\"'),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            function_name = match.group(4)\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)\n+            default_arg = call_args[1].strip() if len(call_args) > 1 else None\n+            default_value = (\n+                True if data_type == DataType.STRING and default_arg == '\"\"' else\n+                True if data_type == DataType.INT and default_arg == \"0\" else\n+                True if data_type == DataType.BOOL and default_arg == \"false\" else\n+                default_arg if default_arg is not None else\n+                None if data_type in (DataType.STRING, DataType.INT, DataType.BOOL) else\n+                True if data_type in (DataType.PATH, DataType.STRING_LIST) else\n+                False)\n+            gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\n+    return adds, gets\n+\n+def make_setting(settings, call):\n+    name = call.arg_name.lstrip(\"-\")\n+    if name in settings:\n+        setting = settings[name]\n+    else:\n+        setting = settings[name] = Setting(call.arg_name)\n+    return setting\n+\n+def flags_to_options(flag_str):\n+    flags = set()\n+    for flag in flag_str.split(\"|\"):\n+        flags.add(flag.strip())\n+\n+    def pop(flag):\n+        if flag in flags:\n+            flags.remove(flag)\n+            return True\n+        return False\n+\n+    options = [\".legacy = true\"]\n+    if pop(\"ArgsManager::DEBUG_ONLY\"):\n+        options.append(\".debug_only = true\")\n+    if pop(\"ArgsManager::NETWORK_ONLY\"):\n+        options.append(\".network_only = true\")\n+    if pop(\"ArgsManager::SENSITIVE\"):\n+        options.append(\".sensitive = true\")\n+    if pop(\"ArgsManager::DISALLOW_NEGATION\"):\n+      options.append(\".disallow_negation = true\")\n+    if pop(\"ArgsManager::DISALLOW_ELISION\"):\n+        options.append(\".disallow_elision = true\")\n+    pop(\"ArgsManager::ALLOW_ANY\")\n+    if flags:\n+        raise Exception(\"Unknown flags {flags!r}\")\n+    return options\n+\n+def collect_argument_information(src_dir):\n+    files = get_files_with_args(src_dir)\n+    settings: Dict[str, Setting] = {}\n+    for file in files:\n+        adds, gets = parse_calls(file)\n+        for add in adds:\n+            setting = make_setting(settings, add.call)\n+            setting.adds.append(add)\n+        for get in gets:\n+            setting = make_setting(settings, get.call)\n+            setting.gets.append(get)\n+\n+    for arg_name, setting in settings.items():\n+        setting_name = ''.join(word.capitalize() for word in arg_name.split('-')) + \"Setting\"\n+        counter = collections.Counter()\n+\n+        for add in setting.adds:\n+            add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\n+            key = add.call.context, add.call.arg_name\n+            add_setting_name = setting_name\n+            counter[key] += 1\n+            if counter[key] > 1: add_setting_name += str(counter[key])\n+\n+            for get in setting.gets:\n+                if not add.call.context == get.call.context and not add.call.context == \"main\":\n+                    continue\n+                if get.add is None:\n+                    get.add = add\n+                if get.data_type in add.data_types:\n+                    setting_type = add.data_types[get.data_type]\n+                else:\n+                    setting_type = add.data_types[get.data_type] = SettingType(add_setting_name)\n+                if get.default_value is not False:\n+                    setting_type.defaults.add(get.default_value)\n+\n+            # Clean up data types. Add if empty, remove if redundant, set primary\n+            if len(add.data_types) == 0:\n+                add.data_types[DataType.UNSET] = SettingType(add_setting_name)\n+            add.data_types[min(add.data_types.keys())].primary = True\n+            for data_type in (DataType.DISABLED, DataType.UNSET):\n+                if data_type in add.data_types and not add.data_types[data_type].primary:\n+                    del add.data_types[data_type]\n+\n+            for data_type, setting_type in add.data_types.items():\n+                # If same setting is retrieved as different types, add suffixes to distinguish setting names\n+                if not setting_type.primary:\n+                    setting_type.name += (\n+                        \"List\" if data_type == DataType.STRING_LIST else\n+                        \"Str\" if data_type == DataType.STRING else\n+                        \"Path\" if data_type == DataType.PATH else\n+                        \"Int\" if data_type == DataType.INT else\n+                        \"Bool\" if data_type == DataType.BOOL else\n+                        \"Disabled\" if data_type == DataType.DISABLED else\n+                        \"Unset\" if data_type == DataType.UNSET else\n+                        None\n+                    )\n+                # Only set ::Default<> if there are no GetArg calls returning\n+                # std::optional and there is a single consistent default.\n+                if None not in setting_type.defaults and len(setting_type.defaults) == 1:\n+                    default_value = next(iter(setting_type.defaults))\n+                    assert default_value is not None\n+                    if default_value is not True:\n+                        for pattern, options in ARG_PATTERNS.items():\n+                            if pattern in default_value and options.extern:\n+                                default_value = False\n+                                break\n+                            if pattern == default_value and options.namespace:\n+                                default_value = f\"{options.namespace}::{default_value}\"\n+                    setting_type.default_value = default_value\n+    return settings\n+\n+@dataclass\n+class SettingsHeader:\n+    includes: set[str] = field(default_factory=set)\n+    defs: list[str] = field(default_factory=list)\n+\n+def generate_setting_headers(settings):\n+    headers_content = collections.defaultdict(SettingsHeader)\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header = headers_content[add.include_path]\n+            help_runtime = False\n+            extern = []\n+            for pattern, options in ARG_PATTERNS.items():\n+                if pattern in add.help_text or any(pattern in a for a in add.help_args):\n+                    if options.include_path:\n+                        header.includes.add(options.include_path)\n+                    help_runtime = help_runtime or options.runtime\n+                    if options.extern:\n+                        extern.append(pattern)\n+                        add.extern_args.append(pattern)\n+\n+            for data_type, setting_type in sorted(add.data_types.items(), key=lambda p: p[0]):\n+                ctype = (\"std::vector<std::string>\" if data_type == DataType.STRING_LIST else\n+                         \"std::string\" if data_type == DataType.STRING else\n+                         \"fs::path\" if data_type == DataType.PATH else\n+                         \"int64_t\" if data_type == DataType.INT else\n+                         \"bool\" if data_type == DataType.BOOL else\n+                         \"common::Disabled\" if data_type == DataType.DISABLED else\n+                         \"common::Unset\" if data_type == DataType.UNSET else\n+                         None)\n+                if None in setting_type.defaults:\n+                    ctype = f\"std::optional<{ctype}>\"\n+                help_str = \"\"\n+                if setting_type.primary:\n+                    help_str = f\",\\n    {add.help_text}\"\n+                extra = \"\"\n+                help_args = ', '.join(a for a in add.help_args)\n+                default_arg = (setting_type.default_value if setting_type.default_value is not True else\n+                               '\"\"' if data_type == DataType.STRING else\n+                               \"0\" if data_type == DataType.INT else\n+                               \"false\" if data_type == DataType.BOOL else\n+                               f\"{ctype}{{}}\")\n+                if setting_type.default_value is True and (not help_args or help_args != default_arg):\n+                    default_arg = False\n+                if default_arg:\n+                    default_runtime = False\n+                    for pattern, options in ARG_PATTERNS.items():\n+                        if setting_type.default_value is not True and pattern in setting_type.default_value:\n+                            if options.include_path:\n+                                header.includes.add(options.include_path)\n+                            default_runtime = default_runtime or options.runtime\n+                            assert not options.extern\n+                    if default_runtime:\n+                        extra += f\"\\n    ::DefaultFn<[] {{ return {default_arg}; }}>\"\n+                    else:\n+                        extra += f\"\\n    ::Default<{default_arg}>\"\n+                if ((help_args and setting_type.primary) or default_arg) and help_args != default_arg:\n+                    if help_runtime or extern:\n+                        lambda_args = \", \".join(f\"const auto& {a}\" for a in [\"fmt\"] + extern)\n+                        extra += f\"\\n    ::HelpFn<[]({lambda_args}) {{ return strprintf(fmt, {help_args}); }}>\"\n+                    else:\n+                        extra += f\"\\n    ::HelpArgs<{help_args}>\"\n+                if add.category != \"OptionsCategory::OPTIONS\" and setting_type.primary:\n+                        extra += f\"\\n    ::Category<{add.category}>\"\n+                options = flags_to_options(add.flags)\n+                # Writing common::SettingOptions{...} instead of just {...}\n+                # should be unneccesary because latter is valid initialization\n+                # syntax in C++20, but unfortunately it is only supported as of\n+                # clang 18. clang 17 and early versions do not seem to allow\n+                # using designated initializers to initialize template\n+                # parameters.\n+                options_str = f\"common::SettingOptions{{{', '.join(options)}}}\" if options else \"\"\n+                setting_definition = f\"\\nusing {setting_type.name} = common::Setting<\\n    {add.summary}, {ctype}, {options_str}{help_str}>{extra};\\n\"\n+                header.defs.append(setting_definition)\n+\n+    for header_file_path, header in headers_content.items():\n+        if not os.path.exists(header_file_path):\n+            guard = \"BITCOIN_\" + re.sub(\"^src/\", \"\", header_file_path).replace('/', '_').replace('.', '_').replace('-', '_').upper()\n+            namespace = get_file_namespace(header_file_path)\n+            namespace_str = \"\"\n+            if namespace:\n+                namespace_str = f\"namespace {namespace} {{\\n}} // namespace {namespace}\\n\"\n+            with open(header_file_path, 'w') as f:\n+                f.write(f\"#ifndef {guard}\\n#define {guard}\\n{namespace_str}\\n#endif // {guard}\\n\")\n+        add_to_file(\n+            header_file_path,\n+            [f\"#include <{include}>\\n\" for include in header.includes | {\"common/setting.h\"}],\n+            [\"#include <string>\\n\", \"#include <vector>\\n\"],\n+            header.defs)\n+\n+def add_to_file(file_path, local_includes, system_includes=(), defs=()):\n+    with open(file_path, 'r') as f:\n+        lines = f.readlines()\n+    # Identify the include blocks and their positions\n+    local_include_start, local_include_end = None, None\n+    system_include_start, system_include_end = None, None\n+    self_include = f\"#include <{file_path.replace('src/', '').replace('.cpp', '.h')}>\"\n+    first = last = self = None\n+    for i, line in enumerate(lines):\n+        if line.startswith('#include') and \"IWYU pragma: keep\" not in line and not line.startswith(self_include):\n+            if local_include_start is None:\n+                local_include_start = i\n+            elif system_include_start is None and local_include_end is not None:\n+                system_include_start = i\n+        elif system_include_start is not None and system_include_end is None:\n+            system_include_end = i\n+        elif local_include_start is not None and local_include_end is None:\n+            local_include_end = i\n+        elif line.startswith('#include'):\n+            self = True\n+        if first is None and not line.startswith(\"//\") and not line.startswith(\"#ifndef\") and not line.startswith(\"#define\") and line != \"\\n\":\n+            first = i\n+        if line != \"\\n\" and not line.startswith(\"#endif\") and not line.startswith(\"} // namespace \"):\n+            last = i + 1\n+\n+    if system_include_start is None and system_include_end is None and not self:\n+        system_include_start, system_include_end = local_include_start, local_include_end\n+        local_include_end = system_include_start\n+\n+    lines[last:last] = defs\n+\n+    if system_includes:\n+        head = []\n+        tail = []\n+        if system_include_start is None and system_include_end is None:\n+            system_include_start = system_include_end = min(first, last)\n+            head += [\"\\n\"]\n+            if first < last + 1: tail += [\"\\n\"]\n+        elif local_include_end == system_include_start:\n+            head += [\"\\n\"]\n+        existing_includes = lines[system_include_start:system_include_end]\n+        lines[system_include_start:system_include_end] = head + sorted(set(system_includes) | set(existing_includes)) + tail\n+\n+    if local_includes:\n+        head = []\n+        if local_include_start is None and local_include_end is None:\n+            local_include_start = local_include_end = min(first, last)\n+            if lines[local_include_start-1:local_include_start+1] != [\"\\n\", \"\\n\"]: head = [\"\\n\"]\n+        existing_includes = lines[local_include_start:local_include_end]\n+        lines[local_include_start:local_include_end] = head + sorted(set(local_includes) | set(existing_includes))\n+\n+    with open(file_path, 'w') as f:\n+        f.writelines(lines)\n+\n+def modify_source_files(settings):\n+    includes_to_add = {}\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header_file_path = add.include_path\n+            relative_include = os.path.relpath(header_file_path, start=\"src/\").replace(os.sep, '/')\n+            file_path = add.call.file\n+            if file_path not in includes_to_add:\n+                includes_to_add[file_path] = set()\n+            includes_to_add[file_path].add(f\"#include <{relative_include}>\\n\")\n+            with open(file_path, 'r') as f:\n+                content = f.read()\n+            register_args = \", \".join([add.call.obj_name] + add.extern_args)\n+            default_data_type = min(add.data_types.keys())\n+            new_content = content.replace(\n+                add.call.call_text,\n+                f\"{add.data_types[default_data_type].name}::Register({register_args})\"\n+            )\n+            with open(file_path, 'w') as f:\n+                f.write(new_content)\n+    # map file path -> list (old, new) replacement tuples made so far\n+    replacements = collections.defaultdict(list)\n+    for setting in settings.values():\n+        for get in setting.gets:\n+            # FIXME handle these by generating synthetic AddArg calls without corresponding Register()\n+            if get.add is None:\n+                #import pprint\n+                #print(\"*\"*80)\n+                #print(f\"Bad get call with no corresponding type\")\n+                #pprint.pprint(get)",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 446,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "f33c0b1969ee4c1c36475c876f46d9085feee134",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f33c0b1969ee4c1c36475c876f46d9085feee134:\r\nWIP?",
      "created_at": "2024-11-20T19:59:56Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850906340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850906340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 443,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850981914",
      "pull_request_review_id": 2448864512,
      "id": 1850981914,
      "node_id": "PRRC_kwDOABII585uU74a",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;\n+\n+    static void Register(auto& manager, auto&&... register_options)\n+    {\n+        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\n+    }\n+\n+    static T Get(auto& manager)\n+    {\n+        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\n+    }\n+\n+    static value_t Get(auto& manager, const value_t& default_value)\n+    {\n+        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\n+    }\n+\n+    static SettingsValue Value(auto& manager)",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 66,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f9910935c880c782c2b1d35acd38e1e18e6b4ad8:\r\nBetter to document type? This style of using `auto` as function-arg-type when not necessary feels like the opposite of C++ concepts, potentially leading to downstream compile errors. But interested to hear reasoning behind it.\r\n```suggestion\r\n    static void Register(ArgsManager& manager, auto&&... register_options)\r\n    {\r\n        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\r\n    }\r\n\r\n    static T Get(const ArgsManager& manager)\r\n    {\r\n        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\r\n    }\r\n\r\n    static value_t Get(const ArgsManager& manager, const value_t& default_value)\r\n    {\r\n        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\r\n    }\r\n\r\n    static SettingsValue Value(const ArgsManager& manager)\r\n```",
      "created_at": "2024-11-20T21:07:42Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850981914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850981914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850983219",
      "pull_request_review_id": 2448864512,
      "id": 1850983219,
      "node_id": "PRRC_kwDOABII585uU8Mz",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 147,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Document types and remove unused `T`?\r\n```suggestion\r\ntemplate<SettingOptions options, auto help>\r\nvoid SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\r\n```",
      "created_at": "2024-11-20T21:08:51Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850983219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850983219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850996627",
      "pull_request_review_id": 2448864512,
      "id": 1850996627,
      "node_id": "PRRC_kwDOABII585uU_eT",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingConstruct(auto default_fn)\n+{\n+    if constexpr (std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        return {};\n+    } else {\n+        return default_fn();\n+    }\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingGet(auto& manager, std::string_view summary, auto default_fn, auto get_fn)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 171,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nT SettingGet(const ArgsManager& manager, std::string_view summary, auto default_fn, auto get_fn)\r\n```",
      "created_at": "2024-11-20T21:21:41Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850996627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850996627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854656393",
      "pull_request_review_id": 2455631901,
      "id": 1854656393,
      "node_id": "PRRC_kwDOABII585ui8-J",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;",
      "path": "src/common/setting.h",
      "position": 53,
      "original_position": 39,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "f9910935c880c782c2b1d35acd38e1e18e6b4ad8",
      "in_reply_to_id": 1850502858,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850502858\r\n\r\n> What is `StringLiteral(std::nullptr_t) ->`?\r\n\r\nThis is a template deduction guide used to be able to pass nullptr_t as a string literal (used for a few settings that are only retrieved and never registered). I could explain more but chatgpt is much more great at this type of question: https://chatgpt.com/share/6740f058-e900-800a-afdf-7b56760db068",
      "created_at": "2024-11-22T21:02:41Z",
      "updated_at": "2024-11-22T23:37:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854656393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854656393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854659942",
      "pull_request_review_id": 2455631901,
      "id": 1854659942,
      "node_id": "PRRC_kwDOABII585ui91m",
      "diff_hunk": "@@ -271,9 +273,14 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n \n fs::path ArgsManager::GetPathArg(std::string arg, const fs::path& default_value) const\n {\n-    if (IsArgNegated(arg)) return fs::path{};\n-    std::string path_str = GetArg(arg, \"\");\n-    if (path_str.empty()) return default_value;\n+    return SettingToPath(GetSetting(arg)).value_or(default_value);\n+}\n+\n+std::optional<fs::path> SettingToPath(const common::SettingsValue& value)\n+{\n+    if (value.isFalse()) return fs::path{};",
      "path": "src/common/args.cpp",
      "position": 23,
      "original_position": 22,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850595520,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850595520\r\n\r\n> Is `isFalse()` equivalent to the former `IsArgNegated()` use?\r\n\r\nYes exactly,, if you look at the definition of IsArgNegated() it is just returning `isFalse()`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2638fdb4f934be96b7c798dbac38ea5ab8a6374a/src/common/args.cpp#L454\r\n\r\nThis works because of the translation of negated values to `false` in `InterpretValue`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2638fdb4f934be96b7c798dbac38ea5ab8a6374a/src/common/args.cpp#L121\r\n",
      "created_at": "2024-11-22T21:06:36Z",
      "updated_at": "2024-11-22T23:37:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854659942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854659942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854744728",
      "pull_request_review_id": 2455631901,
      "id": 1854744728,
      "node_id": "PRRC_kwDOABII585ujSiY",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n+/** Priority level default value, run \"all\" priority levels */\n+static const std::string DEFAULT_PRIORITY{\"all\"};",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 1,
      "original_position": 17,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850653892,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850653892\r\n\r\n> In [b51a156](https://github.com/bitcoin/bitcoin/commit/b51a156f388926175afdbc50c2d563db404e3b81): I've learned to accept `static constexpr` (+`inline`...) in headers, but these other non-`constexpr` statics seem like they end up being \"file-local\" static vars in _every compilation unit_ that includes them. Seems off?\r\n\r\nGood catch. I wanted to avoid changing these to keep the commit move-only as much as possible but it doesn't make sense to have std::strings that could do allocations duplicated across translation units, so they are switched to constexpr string literal types now. I think the other static const values should not be a problem since they should just be stripped out if not referenced and not create any symbols, so I did leave those, but could change if preferred.",
      "created_at": "2024-11-22T21:36:57Z",
      "updated_at": "2024-11-22T23:39:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854744728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854744728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854755963",
      "pull_request_review_id": 2455631901,
      "id": 1854755963,
      "node_id": "PRRC_kwDOABII585ujVR7",
      "diff_hunk": "@@ -55,8 +73,19 @@ def module_name(path):\n             if match:\n                 include = match.group(1)\n                 included_module = module_name(include)\n-                if included_module is not None and included_module in deps and included_module != module:\n+                if included_module and included_module in deps and included_module != module:\n                     deps[module].add(included_module)\n+                included_by[include].add(arg)\n+\n+# Trigger an error if any module listed as being nontransitive if ever included",
      "path": "contrib/devtools/circular-dependencies.py",
      "position": 1,
      "original_position": 60,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850670602,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850670602\r\n\r\nThanks, fixed comment",
      "created_at": "2024-11-22T21:41:13Z",
      "updated_at": "2024-11-22T23:39:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854755963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854755963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854758000",
      "pull_request_review_id": 2455631901,
      "id": 1854758000,
      "node_id": "PRRC_kwDOABII585ujVxw",
      "diff_hunk": "@@ -926,40 +886,40 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n-    if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n+    if (V2transportSetting::Get(args)) {\n         g_local_services = ServiceFlags(g_local_services | NODE_P2P_V2);\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (PeerblockfiltersSetting::Get(args)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n \n         g_local_services = ServiceFlags(g_local_services | NODE_COMPACT_FILTERS);\n     }\n \n-    if (args.GetIntArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (PruneSetting::Get(args, 0)) {\n+        if (TxindexSetting::Get(args))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-reindex-chainstate\", false)) {\n+        if (ReindexChainstateSetting::Get(args)) {\n             return InitError(_(\"Prune mode is incompatible with -reindex-chainstate. Use full -reindex instead.\"));\n         }\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false\n-    if (args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED) && !args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)){\n+    if (ForcednsseedSetting::Get(args) && !DnsseedSetting::Get(args, DEFAULT_DNSSEED)){",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 571,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850692509,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850692509\r\n\r\n> How come we keep the default value in one of the cases here but not the other, both are using .GetBoolArg in the original?\r\n\r\nThe scripted diff will only assign default values to Setting types if the same default value is used every place a setting is retrieved.\r\n\r\nIn this case the `-dnsseed` setting is retrieved 5 different places, and 4 of the places look like `args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)` where `DEFAULT_DNSSEED` is `true` and the return value is `bool` but one place looks like [`args.GetBoolArg(\"-dnsseed\")`](https://github.com/bitcoin/bitcoin/blob/2638fdb4f934be96b7c798dbac38ea5ab8a6374a/src/init.cpp#L1498) where the return value is `std::optional<bool>` and the default value is `std::nullopt`. \r\n\r\nLooking at the surrounding code, it seems like this inconsistency is intentional. The code treats an explicitly set `-dnsseed` differently than the default value and triggers an error if it is specified along with with `-onlynet`. Conceptually it seems like the `-dnseed` setting really has three values: \"yes\" \"no\" and \"always\" and the default value is \"yes\" but an explicitly set `-dnsseed` value means \"always\" and triggers an error if it cannot be satisfied.\r\n\r\nA cleaner way to implement support for `-dnsseed` would probably be to define an `Options` struct and interpret `-dnseed` and related settings one place instead of 5 different places. But for the purposes of this PR, no behavior is changing and new code basically looks the same as the old code and shouldn't be much more or much less confusing.",
      "created_at": "2024-11-22T21:43:45Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854758000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854758000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854796297",
      "pull_request_review_id": 2455631901,
      "id": 1854796297,
      "node_id": "PRRC_kwDOABII585ujfIJ",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/args.h>\n+#include <common/setting.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <string>\n+#include <vector>\n+\n+using common::Disabled;\n+using common::Setting;\n+using common::SettingOptions;\n+using common::SettingsValue;\n+using common::Unset;\n+\n+template<typename T>\n+class SettingTest\n+{\n+public:\n+    using S = Setting<\"-s\", T, SettingOptions{.legacy = true}, \"\">;\n+\n+    SettingTest() {\n+        S::Register(m_args);\n+    }\n+\n+    SettingTest& AddArg(std::string arg) {\n+        m_argv.push_back(std::move(arg));\n+        return *this;\n+    }\n+\n+    SettingTest& Parse() {\n+        std::vector<const char*> argv;\n+        for (const auto& arg : m_argv) argv.push_back(arg.c_str());\n+        std::string error;\n+        bool result = m_args.ParseParameters(argv.size(), argv.data(), error);\n+        BOOST_CHECK_EQUAL(result, true);\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        return *this;\n+    }\n+\n+    T Get() {\n+        return S::Get(m_args);\n+    }\n+\n+    SettingsValue Value() {\n+        return S::Value(m_args);\n+    }\n+\n+private:\n+    ArgsManager m_args;\n+    std::vector<std::string> m_argv{\"unused\"};\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(setting_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(GetOptional)\n+{\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.Parse().Get(), std::nullopt);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Get(), 3);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Value().write(), \"\\\"3\\\"\");\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-nos=1\").Parse().Get(), 0);",
      "path": "src/test/setting_tests.cpp",
      "position": 77,
      "original_position": 64,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850701093,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850701093\r\n\r\n> Maybe add value-less negation?\r\n\r\nThanks! Added. The test is currently very minimal, and I hope to do more with it, especially after this PR when I would like to add support for runtime settings validation.",
      "created_at": "2024-11-22T22:22:56Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854796297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854796297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854804622",
      "pull_request_review_id": 2455631901,
      "id": 1854804622,
      "node_id": "PRRC_kwDOABII585ujhKO",
      "diff_hunk": "@@ -0,0 +1,593 @@\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    extern_args: list[str] = field(default_factory=list)\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    parens = 0\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            parens += 1\n+        elif c == \")\":\n+            if parens == 0: break\n+            parens -= 1\n+        elif c == \",\" and parens == 0:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2):])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len+1],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end():])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'(!*)\\b((?:\\w|\\.|->)+)(\\.|->)(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5):])\n+            obj_name = match.group(2)\n+            if match.group(3) == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len+1],\n+                obj_name=obj_name,\n+                arg_name=call_args[0].strip().strip('\"'),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            function_name = match.group(4)\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)\n+            default_arg = call_args[1].strip() if len(call_args) > 1 else None\n+            default_value = (\n+                True if data_type == DataType.STRING and default_arg == '\"\"' else\n+                True if data_type == DataType.INT and default_arg == \"0\" else\n+                True if data_type == DataType.BOOL and default_arg == \"false\" else\n+                default_arg if default_arg is not None else\n+                None if data_type in (DataType.STRING, DataType.INT, DataType.BOOL) else\n+                True if data_type in (DataType.PATH, DataType.STRING_LIST) else\n+                False)\n+            gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\n+    return adds, gets\n+\n+def make_setting(settings, call):\n+    name = call.arg_name.lstrip(\"-\")\n+    if name in settings:\n+        setting = settings[name]\n+    else:\n+        setting = settings[name] = Setting(call.arg_name)\n+    return setting\n+\n+def flags_to_options(flag_str):\n+    flags = set()\n+    for flag in flag_str.split(\"|\"):\n+        flags.add(flag.strip())\n+\n+    def pop(flag):\n+        if flag in flags:\n+            flags.remove(flag)\n+            return True\n+        return False\n+\n+    options = [\".legacy = true\"]\n+    if pop(\"ArgsManager::DEBUG_ONLY\"):\n+        options.append(\".debug_only = true\")\n+    if pop(\"ArgsManager::NETWORK_ONLY\"):\n+        options.append(\".network_only = true\")\n+    if pop(\"ArgsManager::SENSITIVE\"):\n+        options.append(\".sensitive = true\")\n+    if pop(\"ArgsManager::DISALLOW_NEGATION\"):\n+      options.append(\".disallow_negation = true\")\n+    if pop(\"ArgsManager::DISALLOW_ELISION\"):\n+        options.append(\".disallow_elision = true\")\n+    pop(\"ArgsManager::ALLOW_ANY\")\n+    if flags:\n+        raise Exception(\"Unknown flags {flags!r}\")\n+    return options\n+\n+def collect_argument_information(src_dir):\n+    files = get_files_with_args(src_dir)\n+    settings: Dict[str, Setting] = {}\n+    for file in files:\n+        adds, gets = parse_calls(file)\n+        for add in adds:\n+            setting = make_setting(settings, add.call)\n+            setting.adds.append(add)\n+        for get in gets:\n+            setting = make_setting(settings, get.call)\n+            setting.gets.append(get)\n+\n+    for arg_name, setting in settings.items():\n+        setting_name = ''.join(word.capitalize() for word in arg_name.split('-')) + \"Setting\"\n+        counter = collections.Counter()\n+\n+        for add in setting.adds:\n+            add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\n+            key = add.call.context, add.call.arg_name\n+            add_setting_name = setting_name\n+            counter[key] += 1\n+            if counter[key] > 1: add_setting_name += str(counter[key])\n+\n+            for get in setting.gets:\n+                if not add.call.context == get.call.context and not add.call.context == \"main\":\n+                    continue\n+                if get.add is None:\n+                    get.add = add\n+                if get.data_type in add.data_types:\n+                    setting_type = add.data_types[get.data_type]\n+                else:\n+                    setting_type = add.data_types[get.data_type] = SettingType(add_setting_name)\n+                if get.default_value is not False:\n+                    setting_type.defaults.add(get.default_value)\n+\n+            # Clean up data types. Add if empty, remove if redundant, set primary\n+            if len(add.data_types) == 0:\n+                add.data_types[DataType.UNSET] = SettingType(add_setting_name)\n+            add.data_types[min(add.data_types.keys())].primary = True\n+            for data_type in (DataType.DISABLED, DataType.UNSET):\n+                if data_type in add.data_types and not add.data_types[data_type].primary:\n+                    del add.data_types[data_type]\n+\n+            for data_type, setting_type in add.data_types.items():\n+                # If same setting is retrieved as different types, add suffixes to distinguish setting names\n+                if not setting_type.primary:\n+                    setting_type.name += (\n+                        \"List\" if data_type == DataType.STRING_LIST else\n+                        \"Str\" if data_type == DataType.STRING else\n+                        \"Path\" if data_type == DataType.PATH else\n+                        \"Int\" if data_type == DataType.INT else\n+                        \"Bool\" if data_type == DataType.BOOL else\n+                        \"Disabled\" if data_type == DataType.DISABLED else\n+                        \"Unset\" if data_type == DataType.UNSET else\n+                        None\n+                    )\n+                # Only set ::Default<> if there are no GetArg calls returning\n+                # std::optional and there is a single consistent default.\n+                if None not in setting_type.defaults and len(setting_type.defaults) == 1:\n+                    default_value = next(iter(setting_type.defaults))\n+                    assert default_value is not None\n+                    if default_value is not True:\n+                        for pattern, options in ARG_PATTERNS.items():\n+                            if pattern in default_value and options.extern:\n+                                default_value = False\n+                                break\n+                            if pattern == default_value and options.namespace:\n+                                default_value = f\"{options.namespace}::{default_value}\"\n+                    setting_type.default_value = default_value\n+    return settings\n+\n+@dataclass\n+class SettingsHeader:\n+    includes: set[str] = field(default_factory=set)\n+    defs: list[str] = field(default_factory=list)\n+\n+def generate_setting_headers(settings):\n+    headers_content = collections.defaultdict(SettingsHeader)\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header = headers_content[add.include_path]\n+            help_runtime = False\n+            extern = []\n+            for pattern, options in ARG_PATTERNS.items():\n+                if pattern in add.help_text or any(pattern in a for a in add.help_args):\n+                    if options.include_path:\n+                        header.includes.add(options.include_path)\n+                    help_runtime = help_runtime or options.runtime\n+                    if options.extern:\n+                        extern.append(pattern)\n+                        add.extern_args.append(pattern)\n+\n+            for data_type, setting_type in sorted(add.data_types.items(), key=lambda p: p[0]):\n+                ctype = (\"std::vector<std::string>\" if data_type == DataType.STRING_LIST else\n+                         \"std::string\" if data_type == DataType.STRING else\n+                         \"fs::path\" if data_type == DataType.PATH else\n+                         \"int64_t\" if data_type == DataType.INT else\n+                         \"bool\" if data_type == DataType.BOOL else\n+                         \"common::Disabled\" if data_type == DataType.DISABLED else\n+                         \"common::Unset\" if data_type == DataType.UNSET else\n+                         None)\n+                if None in setting_type.defaults:\n+                    ctype = f\"std::optional<{ctype}>\"\n+                help_str = \"\"\n+                if setting_type.primary:\n+                    help_str = f\",\\n    {add.help_text}\"\n+                extra = \"\"\n+                help_args = ', '.join(a for a in add.help_args)\n+                default_arg = (setting_type.default_value if setting_type.default_value is not True else\n+                               '\"\"' if data_type == DataType.STRING else\n+                               \"0\" if data_type == DataType.INT else\n+                               \"false\" if data_type == DataType.BOOL else\n+                               f\"{ctype}{{}}\")\n+                if setting_type.default_value is True and (not help_args or help_args != default_arg):\n+                    default_arg = False\n+                if default_arg:\n+                    default_runtime = False\n+                    for pattern, options in ARG_PATTERNS.items():\n+                        if setting_type.default_value is not True and pattern in setting_type.default_value:\n+                            if options.include_path:\n+                                header.includes.add(options.include_path)\n+                            default_runtime = default_runtime or options.runtime\n+                            assert not options.extern\n+                    if default_runtime:\n+                        extra += f\"\\n    ::DefaultFn<[] {{ return {default_arg}; }}>\"\n+                    else:\n+                        extra += f\"\\n    ::Default<{default_arg}>\"\n+                if ((help_args and setting_type.primary) or default_arg) and help_args != default_arg:\n+                    if help_runtime or extern:\n+                        lambda_args = \", \".join(f\"const auto& {a}\" for a in [\"fmt\"] + extern)\n+                        extra += f\"\\n    ::HelpFn<[]({lambda_args}) {{ return strprintf(fmt, {help_args}); }}>\"\n+                    else:\n+                        extra += f\"\\n    ::HelpArgs<{help_args}>\"\n+                if add.category != \"OptionsCategory::OPTIONS\" and setting_type.primary:\n+                        extra += f\"\\n    ::Category<{add.category}>\"\n+                options = flags_to_options(add.flags)\n+                # Writing common::SettingOptions{...} instead of just {...}\n+                # should be unneccesary because latter is valid initialization\n+                # syntax in C++20, but unfortunately it is only supported as of\n+                # clang 18. clang 17 and early versions do not seem to allow\n+                # using designated initializers to initialize template\n+                # parameters.\n+                options_str = f\"common::SettingOptions{{{', '.join(options)}}}\" if options else \"\"\n+                setting_definition = f\"\\nusing {setting_type.name} = common::Setting<\\n    {add.summary}, {ctype}, {options_str}{help_str}>{extra};\\n\"\n+                header.defs.append(setting_definition)\n+\n+    for header_file_path, header in headers_content.items():\n+        if not os.path.exists(header_file_path):\n+            guard = \"BITCOIN_\" + re.sub(\"^src/\", \"\", header_file_path).replace('/', '_').replace('.', '_').replace('-', '_').upper()\n+            namespace = get_file_namespace(header_file_path)\n+            namespace_str = \"\"\n+            if namespace:\n+                namespace_str = f\"namespace {namespace} {{\\n}} // namespace {namespace}\\n\"\n+            with open(header_file_path, 'w') as f:\n+                f.write(f\"#ifndef {guard}\\n#define {guard}\\n{namespace_str}\\n#endif // {guard}\\n\")\n+        add_to_file(\n+            header_file_path,\n+            [f\"#include <{include}>\\n\" for include in header.includes | {\"common/setting.h\"}],\n+            [\"#include <string>\\n\", \"#include <vector>\\n\"],\n+            header.defs)\n+\n+def add_to_file(file_path, local_includes, system_includes=(), defs=()):\n+    with open(file_path, 'r') as f:\n+        lines = f.readlines()\n+    # Identify the include blocks and their positions\n+    local_include_start, local_include_end = None, None\n+    system_include_start, system_include_end = None, None\n+    self_include = f\"#include <{file_path.replace('src/', '').replace('.cpp', '.h')}>\"\n+    first = last = self = None\n+    for i, line in enumerate(lines):\n+        if line.startswith('#include') and \"IWYU pragma: keep\" not in line and not line.startswith(self_include):\n+            if local_include_start is None:\n+                local_include_start = i\n+            elif system_include_start is None and local_include_end is not None:\n+                system_include_start = i\n+        elif system_include_start is not None and system_include_end is None:\n+            system_include_end = i\n+        elif local_include_start is not None and local_include_end is None:\n+            local_include_end = i\n+        elif line.startswith('#include'):\n+            self = True\n+        if first is None and not line.startswith(\"//\") and not line.startswith(\"#ifndef\") and not line.startswith(\"#define\") and line != \"\\n\":\n+            first = i\n+        if line != \"\\n\" and not line.startswith(\"#endif\") and not line.startswith(\"} // namespace \"):\n+            last = i + 1\n+\n+    if system_include_start is None and system_include_end is None and not self:\n+        system_include_start, system_include_end = local_include_start, local_include_end\n+        local_include_end = system_include_start\n+\n+    lines[last:last] = defs\n+\n+    if system_includes:\n+        head = []\n+        tail = []\n+        if system_include_start is None and system_include_end is None:\n+            system_include_start = system_include_end = min(first, last)\n+            head += [\"\\n\"]\n+            if first < last + 1: tail += [\"\\n\"]\n+        elif local_include_end == system_include_start:\n+            head += [\"\\n\"]\n+        existing_includes = lines[system_include_start:system_include_end]\n+        lines[system_include_start:system_include_end] = head + sorted(set(system_includes) | set(existing_includes)) + tail\n+\n+    if local_includes:\n+        head = []\n+        if local_include_start is None and local_include_end is None:\n+            local_include_start = local_include_end = min(first, last)\n+            if lines[local_include_start-1:local_include_start+1] != [\"\\n\", \"\\n\"]: head = [\"\\n\"]\n+        existing_includes = lines[local_include_start:local_include_end]\n+        lines[local_include_start:local_include_end] = head + sorted(set(local_includes) | set(existing_includes))\n+\n+    with open(file_path, 'w') as f:\n+        f.writelines(lines)\n+\n+def modify_source_files(settings):\n+    includes_to_add = {}\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header_file_path = add.include_path\n+            relative_include = os.path.relpath(header_file_path, start=\"src/\").replace(os.sep, '/')\n+            file_path = add.call.file\n+            if file_path not in includes_to_add:\n+                includes_to_add[file_path] = set()\n+            includes_to_add[file_path].add(f\"#include <{relative_include}>\\n\")\n+            with open(file_path, 'r') as f:\n+                content = f.read()\n+            register_args = \", \".join([add.call.obj_name] + add.extern_args)\n+            default_data_type = min(add.data_types.keys())\n+            new_content = content.replace(\n+                add.call.call_text,\n+                f\"{add.data_types[default_data_type].name}::Register({register_args})\"\n+            )\n+            with open(file_path, 'w') as f:\n+                f.write(new_content)\n+    # map file path -> list (old, new) replacement tuples made so far\n+    replacements = collections.defaultdict(list)\n+    for setting in settings.values():\n+        for get in setting.gets:\n+            # FIXME handle these by generating synthetic AddArg calls without corresponding Register()\n+            if get.add is None:\n+                #import pprint\n+                #print(\"*\"*80)\n+                #print(f\"Bad get call with no corresponding type\")\n+                #pprint.pprint(get)",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 446,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "f33c0b1969ee4c1c36475c876f46d9085feee134",
      "in_reply_to_id": 1850906340,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850906340\r\n\r\n> WIP?\r\n\r\nUnclear right now. Adding this wasn't as necessary as I initially thought it might be to remove most of the GetArg* calls in the codebase. But I am looking into more ways to expand the PR and maybe drop the GetArg methods methods entirely. Depending on how much work this it could be a follow-up and in any case doesn't need to block anything.",
      "created_at": "2024-11-22T22:33:17Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854804622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854804622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 443,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806210",
      "pull_request_review_id": 2455631901,
      "id": 1854806210,
      "node_id": "PRRC_kwDOABII585ujhjC",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;\n+\n+    static void Register(auto& manager, auto&&... register_options)\n+    {\n+        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\n+    }\n+\n+    static T Get(auto& manager)\n+    {\n+        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\n+    }\n+\n+    static value_t Get(auto& manager, const value_t& default_value)\n+    {\n+        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\n+    }\n+\n+    static SettingsValue Value(auto& manager)",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 66,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850981914,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "reL https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850981914\r\n\r\n> In [f991093](https://github.com/bitcoin/bitcoin/commit/f9910935c880c782c2b1d35acd38e1e18e6b4ad8): Better to document type? This style of using `auto` as function-arg-type when not necessary feels like the opposite of C++ concepts, potentially leading to downstream compile errors. But interested to hear reasoning behind it.\r\n\r\nGood catch, this was just done early in a prototype and I never changed it. Updated to use explicit types now.",
      "created_at": "2024-11-22T22:35:29Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854806210",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806918",
      "pull_request_review_id": 2455631901,
      "id": 1854806918,
      "node_id": "PRRC_kwDOABII585ujhuG",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 147,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850983219,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "reL https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850983219\r\n\r\n> Document types and remove unused `T`?\r\n\r\nThanks! Added types. I do want to keep T around because my changes in #22978 branch adding runtime setting validation need to know the setting type (also so `T` and `options` are available consistently as template parameters).",
      "created_at": "2024-11-22T22:36:46Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854806918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854807220",
      "pull_request_review_id": 2455631901,
      "id": 1854807220,
      "node_id": "PRRC_kwDOABII585ujhy0",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingConstruct(auto default_fn)\n+{\n+    if constexpr (std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        return {};\n+    } else {\n+        return default_fn();\n+    }\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingGet(auto& manager, std::string_view summary, auto default_fn, auto get_fn)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 171,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850996627,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850996627\r\n\r\nThanks! Applied change.\r\n\r\n",
      "created_at": "2024-11-22T22:37:21Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854807220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854807220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877946605",
      "pull_request_review_id": 2492047895,
      "id": 1877946605,
      "node_id": "PRRC_kwDOABII585v7zDt",
      "diff_hunk": "@@ -25,11 +27,11 @@ using util::SplitString;\n \n void ReadSigNetArgs(const ArgsManager& args, CChainParams::SigNetOptions& options)\n {\n-    if (args.IsArgSet(\"-signetseednode\")) {\n-        options.seeds.emplace(args.GetArgs(\"-signetseednode\"));\n+    if (!SignetseednodeSetting::Value(args).isNull()) {",
      "path": "src/chainparams.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "existence checking seems to be relied on often, maybe we could add an IsSet method to Settings (maybe even an `bool isSet() const { return (typ != VNULL); }` to `UniValie`):\r\n```C++\r\n    static bool IsSet(const ArgsManager& manager)\r\n    {\r\n        return !Value(manager).isNull();\r\n    }\r\n```\r\nsimplifying these to:\r\n```suggestion\r\n    if (SignetseednodeSetting::IsSet(args)) {\r\n```",
      "created_at": "2024-12-10T11:44:49Z",
      "updated_at": "2024-12-10T14:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877946605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877946605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877951686",
      "pull_request_review_id": 2492047895,
      "id": 1877951686,
      "node_id": "PRRC_kwDOABII585v70TG",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;",
      "path": "src/common/setting.h",
      "position": 82,
      "original_position": 49,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My IDE suggests that we use the typename keyword before such dependent types:\r\n```suggestion\r\n    using value_t = typename internal::RemoveOptional<T>::type;\r\n```",
      "created_at": "2024-12-10T11:48:13Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877951686",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877951686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877966780",
      "pull_request_review_id": 2492047895,
      "id": 1877966780,
      "node_id": "PRRC_kwDOABII585v73-8",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#ifndef BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+#define BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+\n+#include <chainparamsbase.h>\n+#include <common/setting.h>\n+\n+#include <string>\n+#include <vector>\n+\n+using SignetseednodeSetting = common::Setting<",
      "path": "src/chainparamsbase_settings.h",
      "position": 1,
      "original_position": 10,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me we're using suffix naming to group values - could we use a namespace instead?\r\n```C++\r\nnamespace Setting {\r\nusing Signetseednode = common::Setting<\r\n    \"-signetseednode\", std::vector<std::string>, common::SettingOptions{.legacy = true, .disallow_negation = true},\r\n    \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\">\r\n    ::Category<OptionsCategory::CHAINPARAMS>;\r\n```\r\nreferring to it as:\r\n```C++\r\n        options.seeds.emplace(Setting::Signetseednode::Get(args));\r\n```",
      "created_at": "2024-12-10T11:57:29Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877966780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877966780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877971170",
      "pull_request_review_id": 2492047895,
      "id": 1877971170,
      "node_id": "PRRC_kwDOABII585v75Di",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else if constexpr (!std::is_same_v<decltype(help.value), std::nullptr_t>) {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 160,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`options` seems unused here",
      "created_at": "2024-12-10T12:00:30Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877971170",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877971170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877986848",
      "pull_request_review_id": 2492047895,
      "id": 1877986848,
      "node_id": "PRRC_kwDOABII585v784g",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else if constexpr (!std::is_same_v<decltype(help.value), std::nullptr_t>) {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingConstruct(auto default_fn)\n+{\n+    if constexpr (std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        return {};\n+    } else {\n+        return default_fn();\n+    }\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingGet(const ArgsManager& manager, std::string_view summary, auto default_fn, auto get_fn)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 171,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`auto default_fn` is bit surprising here, superficially seems like an over-generalized getter. Will review it later in more detail (is it some `constexpr` constraint? Will check later...).",
      "created_at": "2024-12-10T12:11:51Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877986848",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877986848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877987824",
      "pull_request_review_id": 2492047895,
      "id": 1877987824,
      "node_id": "PRRC_kwDOABII585v79Hw",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 147,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`get_fn` seems unused",
      "created_at": "2024-12-10T12:12:37Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877987824",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877987824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877991186",
      "pull_request_review_id": 2492047895,
      "id": 1877991186,
      "node_id": "PRRC_kwDOABII585v798S",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 31,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: we're already inide `common`",
      "created_at": "2024-12-10T12:15:12Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877991186",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1877991186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878005160",
      "pull_request_review_id": 2492047895,
      "id": 1878005160,
      "node_id": "PRRC_kwDOABII585v8BWo",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In other cases we've used a single template method, instead of each type or case having its own explicit implementation - would it make sense to unify this as well?\r\n```suggestion\r\ntemplate<typename T, SettingOptions options>\r\nstruct SettingTraits\r\n{\r\n    static bool Get(const SettingsValue& setting, T&)\r\n    {\r\n        if constexpr (std::is_same_v<T, Unset>) return setting.isNull();\r\n        if constexpr (std::is_same_v<T, Enabled>) return setting.isTrue();\r\n        if constexpr (std::is_same_v<T, Disabled>) return setting.isFalse();\r\n        // ... other specializations (using options param as well)\r\n        return false;\r\n    }\r\n};\r\n```",
      "created_at": "2024-12-10T12:24:54Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878005160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878005160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878015143",
      "pull_request_review_id": 2492047895,
      "id": 1878015143,
      "node_id": "PRRC_kwDOABII585v8Dyn",
      "diff_hunk": "@@ -137,14 +132,14 @@ int main(int argc, char** argv)\n \n     try {\n         benchmark::Args args;\n-        args.asymptote = parseAsymptote(argsman.GetArg(\"-asymptote\", \"\"));\n-        args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n-        args.min_time = std::chrono::milliseconds(argsman.GetIntArg(\"-min-time\", DEFAULT_MIN_TIME_MS));\n-        args.output_csv = argsman.GetPathArg(\"-output-csv\");\n-        args.output_json = argsman.GetPathArg(\"-output-json\");\n-        args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n-        args.sanity_check = argsman.GetBoolArg(\"-sanity-check\", false);\n-        args.priority = parsePriorityLevel(argsman.GetArg(\"-priority-level\", DEFAULT_PRIORITY));\n+        args.asymptote = parseAsymptote(AsymptoteSetting::Get(argsman));",
      "path": "src/bench/bench_bitcoin.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that parsing can still invalidate a stored value, I wonder if it's possible to include parsing/validation/normalization into each setting as well - to have a final value instead of later noticing that the value was provided but it's invalid...\r\nIt would return something like an `std::variant<T, error>` in that case instead.\r\nIt would also fix weird defaults like `DEFAULT_MIN_TIME_MS` which should already be in their target type (i.e. `std::chrono::milliseconds` instead of `int64_t`)",
      "created_at": "2024-12-10T12:32:07Z",
      "updated_at": "2024-12-10T14:05:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878015143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878015143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878016256",
      "pull_request_review_id": 2492047895,
      "id": 1878016256,
      "node_id": "PRRC_kwDOABII585v8EEA",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know it's a move, but could we modernize these (in a separate commit, of course)?",
      "created_at": "2024-12-10T12:33:00Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878016256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878016256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878018239",
      "pull_request_review_id": 2492047895,
      "id": 1878018239,
      "node_id": "PRRC_kwDOABII585v8Ei_",
      "diff_hunk": "@@ -20,25 +21,19 @@\n \n using util::SplitString;\n \n-static const char* DEFAULT_BENCH_FILTER = \".*\";\n-static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n-/** Priority level default value, run \"all\" priority levels */\n-static const std::string DEFAULT_PRIORITY{\"all\"};\n-\n static void SetupBenchArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n     SetupCommonTestArgs(argsman);\n \n-    argsman.AddArg(\"-asymptote=<n1,n2,n3,...>\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-min-time=<milliseconds>\", strprintf(\"Minimum runtime per benchmark, in milliseconds (default: %d)\", DEFAULT_MIN_TIME_MS), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output-csv=<output.csv>\", \"Generate CSV file with the most important benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output-json=<output.json>\", \"Generate JSON file with all benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-sanity-check\", \"Run benchmarks for only one iteration with no output\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-priority-level=<l1,l2,l3>\", strprintf(\"Run benchmarks of one or multiple priority level(s) (%s), default: '%s'\",\n-                                                           benchmark::ListPriorities(), DEFAULT_PRIORITY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    AsymptoteSetting::Register(argsman);",
      "path": "src/bench/bench_bitcoin.cpp",
      "position": 38,
      "original_position": 38,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This looks really cool, strong concept ack!",
      "created_at": "2024-12-10T12:34:33Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878018239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878018239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878032259",
      "pull_request_review_id": 2492047895,
      "id": 1878032259,
      "node_id": "PRRC_kwDOABII585v8H-D",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n+/** Priority level default value, run \"all\" priority levels */\n+static constexpr auto DEFAULT_PRIORITY{\"all\"};\n+\n+using AsymptoteSetting = common::Setting<\n+    \"-asymptote=<n1,n2,n3,...>\", std::string, common::SettingOptions{.legacy = true},",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a lot of bare template parameters here, it's not immediately obvious what `std::string` refers to - what if we commented them:\r\n```C++\r\nusing AsymptoteSetting = common::Setting<\r\n    /*summary=*/\"-asymptote=<n1,n2,n3,...>\",\r\n    /*type=*/std::string,\r\n    /*options=*/{.legacy = true},\r\n    /*help=*/\"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\">;\r\n```",
      "created_at": "2024-12-10T12:44:55Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878032259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878032259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878053891",
      "pull_request_review_id": 2492047895,
      "id": 1878053891,
      "node_id": "PRRC_kwDOABII585v8NQD",
      "diff_hunk": "@@ -15,11 +15,11 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-REGEX_ARG = r'\\b(?:GetArg|GetArgs|GetBoolArg|GetIntArg|GetPathArg|IsArgSet|get_net)\\(\"(-[^\"]+)\"'\n-REGEX_DOC = r'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n+REGEX_ARG = r'([A-Za-z0-9]+Setting)::Get'",
      "path": "test/lint/check-doc.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If this linter is still relevant, we can use `\\w` instead of `[A-Za-z0-9]` throughout\r\n(and we could sort `args_unknown = sorted(args_docd.difference(args_used))` for consistent output)",
      "created_at": "2024-12-10T13:00:19Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878053891",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878053891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878056041",
      "pull_request_review_id": 2492047895,
      "id": 1878056041,
      "node_id": "PRRC_kwDOABII585v8Nxp",
      "diff_hunk": "@@ -8,14 +8,15 @@\n #include <common/args.h>\n #include <key_io.h>\n #include <logging.h>\n+#include <wallet/init_settings.h>\n \n namespace wallet {\n fs::path GetWalletDir()\n {\n     fs::path path;\n \n-    if (gArgs.IsArgSet(\"-walletdir\")) {\n-        path = gArgs.GetPathArg(\"-walletdir\");\n+    if (!WalletdirSetting::Value(gArgs).isNull()) {\n+        path = WalletdirSetting::Get(gArgs);\n         if (!fs::is_directory(path)) {",
      "path": "src/wallet/walletutil.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "as hinted above, I think `WalletdirSetting` should either return a valid result or empty/error - so would be cool if the `is_directory` check could be done inside",
      "created_at": "2024-12-10T13:01:50Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878056041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878056041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878059582",
      "pull_request_review_id": 2492047895,
      "id": 1878059582,
      "node_id": "PRRC_kwDOABII585v8Oo-",
      "diff_hunk": "@@ -112,37 +113,37 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+    if (!FormatSetting::Value(args).isNull() && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+    if (!DumpfileSetting::Value(args).isNull() && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-descriptors\") && command != \"create\") {\n+    if (!DescriptorsSetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-legacy\") && command != \"create\") {\n+    if (!LegacySetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -legacy option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+    if (command == \"create\" && WalletSetting::Value(args).isNull()) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return false;\n     }\n-    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const std::string name = WalletSetting::Get(args);\n     const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n \n     if (command == \"create\") {\n         DatabaseOptions options;\n         ReadDatabaseArgs(args, options);\n         options.require_create = true;\n         // If -legacy is set, use it. Otherwise default to false.",
      "path": "src/wallet/wallettool.cpp",
      "position": 1,
      "original_position": 45,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "comment doesn't make a lot of sense anymore",
      "created_at": "2024-12-10T13:04:35Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878059582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878059582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878066786",
      "pull_request_review_id": 2492047895,
      "id": 1878066786,
      "node_id": "PRRC_kwDOABII585v8QZi",
      "diff_hunk": "@@ -112,37 +113,37 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+    if (!FormatSetting::Value(args).isNull() && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+    if (!DumpfileSetting::Value(args).isNull() && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-descriptors\") && command != \"create\") {\n+    if (!DescriptorsSetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-legacy\") && command != \"create\") {\n+    if (!LegacySetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -legacy option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+    if (command == \"create\" && WalletSetting::Value(args).isNull()) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return false;\n     }\n-    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const std::string name = WalletSetting::Get(args);",
      "path": "src/wallet/wallettool.cpp",
      "position": 23,
      "original_position": 38,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In other cases we've provided the default values for the settings - should we add `::Default<{\"\"}>` to the definition (or whatever compiles)?",
      "created_at": "2024-12-10T13:10:01Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878066786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878066786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878069473",
      "pull_request_review_id": 2492047895,
      "id": 1878069473,
      "node_id": "PRRC_kwDOABII585v8RDh",
      "diff_hunk": "@@ -112,37 +113,37 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+    if (!FormatSetting::Value(args).isNull() && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+    if (!DumpfileSetting::Value(args).isNull() && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-descriptors\") && command != \"create\") {\n+    if (!DescriptorsSetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-legacy\") && command != \"create\") {\n+    if (!LegacySetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -legacy option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+    if (command == \"create\" && WalletSetting::Value(args).isNull()) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return false;\n     }\n-    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const std::string name = WalletSetting::Get(args);\n     const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n \n     if (command == \"create\") {\n         DatabaseOptions options;\n         ReadDatabaseArgs(args, options);\n         options.require_create = true;\n         // If -legacy is set, use it. Otherwise default to false.\n-        bool make_legacy = args.GetBoolArg(\"-legacy\", false);\n+        bool make_legacy = LegacySetting::Get(args);",
      "path": "src/wallet/wallettool.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same, are we not specifying `false` defaults? We seem to do it for e.g. `DEFAULT_NAMED`\r\n```C++\r\nusing LegacySetting = common::Setting<\r\n    \"-legacy\", bool, common::SettingOptions{.legacy = true},\r\n    \"Create legacy wallet. Only for 'create'\">\r\n    ::Default<false>;\r\n```",
      "created_at": "2024-12-10T13:11:58Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878069473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878069473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878072992",
      "pull_request_review_id": 2492047895,
      "id": 1878072992,
      "node_id": "PRRC_kwDOABII585v8R6g",
      "diff_hunk": "@@ -2990,8 +2991,8 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), FlushAndDeleteWallet);\n-    walletInstance->m_keypool_size = std::max(args.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), int64_t{1});\n-    walletInstance->m_notify_tx_changed_script = args.GetArg(\"-walletnotify\", \"\");\n+    walletInstance->m_keypool_size = std::max(KeypoolSetting::Get(args), int64_t{1});",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "shouldn't this also be a validation error instead - preferably in `KeypoolSetting`",
      "created_at": "2024-12-10T13:13:55Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878072992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878072992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2994,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878074138",
      "pull_request_review_id": 2492047895,
      "id": 1878074138,
      "node_id": "PRRC_kwDOABII585v8SMa",
      "diff_hunk": "@@ -107,15 +103,15 @@ bool WalletInit::ParameterInteraction() const\n          return InitError(Untranslated(\"A version conflict was detected between the run-time BerkeleyDB library and the one used during compilation.\"));\n      }\n #endif\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        for (const std::string& wallet : gArgs.GetArgs(\"-wallet\")) {\n+    if (DisablewalletSetting::Get(gArgs)) {\n+        for (const std::string& wallet : WalletSetting::Get(gArgs)) {\n             LogPrintf(\"%s: parameter interaction: -disablewallet -> ignoring -wallet=%s\\n\", __func__, wallet);\n         }\n \n         return true;\n     }\n \n-    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n+    if (BlocksonlySetting::Get(gArgs, DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {",
      "path": "src/wallet/init.cpp",
      "position": 1,
      "original_position": 123,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we migrate `gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)` as well?",
      "created_at": "2024-12-10T13:14:46Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878074138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878074138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878078140",
      "pull_request_review_id": 2492047895,
      "id": 1878078140,
      "node_id": "PRRC_kwDOABII585v8TK8",
      "diff_hunk": "@@ -459,7 +460,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n \n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n-        if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n+        if (OnionSetting::Get(gArgs) == \"\") {",
      "path": "src/torcontrol.cpp",
      "position": 22,
      "original_position": 26,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Q: how can we set something to an empty string? `-onion=\"\"`? `-noonion`? `-noonion=\"\"`?",
      "created_at": "2024-12-10T13:17:33Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878078140",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878078140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 472,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878091809",
      "pull_request_review_id": 2492047895,
      "id": 1878091809,
      "node_id": "PRRC_kwDOABII585v8Wgh",
      "diff_hunk": "@@ -279,6 +279,10 @@ inline std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n     return v ? os << *v\n              : os << \"std::nullopt\";\n }\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)\n+{\n+    return os << \"std::nullopt\";\n+}",
      "path": "src/test/util/setup_common.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We should be able to unify them now:\r\n```C++\r\ninline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)\r\n{\r\n    return os << \"std::nullopt\";\r\n}\r\ntemplate <typename T>\r\nstd::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\r\n{\r\n    return v ? os << *v\r\n             : os << std::nullopt;\r\n}\r\n```",
      "created_at": "2024-12-10T13:25:58Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878091809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878091809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 283,
      "original_start_line": 282,
      "start_side": "RIGHT",
      "line": 286,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878099055",
      "pull_request_review_id": 2492047895,
      "id": 1878099055,
      "node_id": "PRRC_kwDOABII585v8YRv",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <qt/recentrequeststablemodel.h>\n #include <qt/sendcoinsdialog.h>\n #include <qt/transactiontablemodel.h>\n+#include <wallet/init_settings.h>\n \n #include <common/args.h> // for GetBoolArg",
      "path": "src/qt/walletmodel.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "comment needs update now",
      "created_at": "2024-12-10T13:30:03Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878099055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878099055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878100985",
      "pull_request_review_id": 2492047895,
      "id": 1878100985,
      "node_id": "PRRC_kwDOABII585v8Yv5",
      "diff_hunk": "@@ -717,7 +718,7 @@ bool OptionsModel::isRestartRequired() const\n \n bool OptionsModel::hasSigner()\n {\n-    return gArgs.GetArg(\"-signer\", \"\") != \"\";\n+    return wallet::SignerSetting::Get(gArgs) != \"\";",
      "path": "src/qt/optionsmodel.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is \"\" the default for `SignerSetting` now?",
      "created_at": "2024-12-10T13:31:28Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878100985",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878100985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 720,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878104278",
      "pull_request_review_id": 2492047895,
      "id": 1878104278,
      "node_id": "PRRC_kwDOABII585v8ZjW",
      "diff_hunk": "@@ -140,9 +142,9 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.IsArgSet(\"-prune\")) {\n+    if (!PruneSetting::Value(gArgs).isNull()) {\n         m_prune_checkbox_is_default = false;\n-        ui->prune->setChecked(gArgs.GetIntArg(\"-prune\", 0) >= 1);\n+        ui->prune->setChecked(PruneSetting::Get(gArgs, 0) >= 1);",
      "path": "src/qt/intro.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`PruneSetting` seems to have a explicit default value of `0` - maybe we can bake it into the definition",
      "created_at": "2024-12-10T13:33:35Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878104278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878104278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878108609",
      "pull_request_review_id": 2492047895,
      "id": 1878108609,
      "node_id": "PRRC_kwDOABII585v8anB",
      "diff_hunk": "@@ -24,36 +25,36 @@\n namespace node {\n util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManager::Options& opts)\n {\n-    if (auto value{args.GetIntArg(\"-checkblockindex\")}) {\n+    if (auto value{CheckblockindexSettingInt::Get(args)}) {\n         // Interpret bare -checkblockindex argument as 1 instead of 0.",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this seems weird, shouldn't `CheckblockindexSetting` itself normalize this? ",
      "created_at": "2024-12-10T13:36:25Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878108609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878108609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878112735",
      "pull_request_review_id": 2492047895,
      "id": 1878112735,
      "node_id": "PRRC_kwDOABII585v8bnf",
      "diff_hunk": "@@ -3809,7 +3810,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n     size_t nMessageSize = msg.data.size();\n     LogDebug(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());\n-    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+    if (CapturemessagesSetting::Get(gArgs, false)) {",
      "path": "src/net.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure I understand when the default values are kept, why not just:\r\n```suggestion\r\n    if (CapturemessagesSetting::Get(gArgs)) {\r\n```",
      "created_at": "2024-12-10T13:38:18Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878112735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878112735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3813,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878117611",
      "pull_request_review_id": 2492047895,
      "id": 1878117611,
      "node_id": "PRRC_kwDOABII585v8czr",
      "diff_hunk": "@@ -0,0 +1,865 @@\n+#ifndef BITCOIN_INIT_SETTINGS_H\n+#define BITCOIN_INIT_SETTINGS_H\n+\n+#include <addrman.h>\n+#include <banman.h>\n+#include <blockfilter.h>\n+#include <chainparamsbase.h>\n+#include <common/args.h>\n+#include <common/setting.h>\n+#include <httpserver.h>\n+#include <index/blockfilterindex.h>\n+#include <index/coinstatsindex.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <kernel/blockmanager_opts.h>\n+#include <kernel/mempool_options.h>\n+#include <mapport.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/chainstatemanager_args.h>\n+#include <node/kernel_notifications.h>\n+#include <node/mempool_persist_args.h>\n+#include <node/miner.h>\n+#include <policy/feerate.h>\n+#include <policy/fees.h>\n+#include <policy/settings.h>\n+#include <rpc/util.h>\n+#include <script/sigcache.h>\n+#include <torcontrol.h>\n+#include <txdb.h>\n+#include <util/moneystr.h>\n+#include <util/string.h>\n+#include <zmq/zmqabstractnotifier.h>\n+\n+#include <string>\n+#include <vector>\n+\n+using CheckaddrmanSetting = common::Setting<\n+    \"-checkaddrman=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Run addrman consistency checks every <n> operations. Use 0 to disable. (default: %u)\">\n+    ::HelpArgs<DEFAULT_ADDRMAN_CONSISTENCY_CHECKS>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using VersionSetting = common::Setting<\n+    \"-version\", bool, common::SettingOptions{.legacy = true},\n+    \"Print version and exit\">;\n+\n+using ConfSetting = common::Setting<\n+    \"-conf=<file>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location (only useable from command line, not configuration file) (default: %s)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, BITCOIN_CONF_FILENAME); }>;\n+\n+using ConfSettingPath = common::Setting<\n+    \"-conf=<file>\", fs::path, common::SettingOptions{.legacy = true}>\n+    ::DefaultFn<[] { return BITCOIN_CONF_FILENAME; }>;\n+\n+using DatadirSetting = common::Setting<\n+    \"-datadir=<dir>\", std::string, common::SettingOptions{.legacy = true, .disallow_negation = true},\n+    \"Specify data directory\">;\n+\n+using DatadirSettingPath = common::Setting<\n+    \"-datadir=<dir>\", fs::path, common::SettingOptions{.legacy = true, .disallow_negation = true}>;\n+\n+using RpccookiefileSetting = common::Setting<\n+    \"-rpccookiefile=<loc>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcpasswordSetting = common::Setting<\n+    \"-rpcpassword=<pw>\", std::string, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Password for JSON-RPC connections\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcportSetting = common::Setting<\n+    \"-rpcport=<port>\", std::optional<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Listen for JSON-RPC connections on <port> (default: %u, testnet3: %u, testnet4: %u, signet: %u, regtest: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultBaseParams, const auto& testnetBaseParams, const auto& testnet4BaseParams, const auto& signetBaseParams, const auto& regtestBaseParams) { return strprintf(fmt, defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), testnet4BaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()); }>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcportSettingInt = common::Setting<\n+    \"-rpcport=<port>\", int64_t, common::SettingOptions{.legacy = true, .network_only = true}>\n+    ::DefaultFn<[] { return BaseParams().RPCPort(); }>\n+    ::HelpFn<[](const auto& fmt, const auto& defaultBaseParams, const auto& testnetBaseParams, const auto& testnet4BaseParams, const auto& signetBaseParams, const auto& regtestBaseParams) { return strprintf(fmt, defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), testnet4BaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()); }>;\n+\n+using RpcuserSetting = common::Setting<\n+    \"-rpcuser=<user>\", std::string, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Username for JSON-RPC connections\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using DaemonSetting = common::Setting<\n+    \"-daemon\", bool, common::SettingOptions{.legacy = true},\n+    \"Run in the background as a daemon and accept commands (default: %d)\">\n+    ::HelpArgs<DEFAULT_DAEMON>;\n+\n+using DaemonwaitSetting = common::Setting<\n+    \"-daemonwait\", bool, common::SettingOptions{.legacy = true},\n+    \"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\">\n+    ::Default<DEFAULT_DAEMONWAIT>;\n+\n+using FastpruneSetting = common::Setting<\n+    \"-fastprune\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Use smaller block files and lower minimum prune height for testing purposes\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using BlocksdirSetting = common::Setting<\n+    \"-blocksdir=<dir>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\">;\n+\n+using BlocksdirSettingPath = common::Setting<\n+    \"-blocksdir=<dir>\", fs::path, common::SettingOptions{.legacy = true}>;\n+\n+using SettingsSetting = common::Setting<\n+    \"-settings=<file>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Specify path to dynamic settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by users (use %s instead for custom settings). Relative paths will be prefixed by datadir location. (default: %s)\">\n+    ::DefaultFn<[] { return BITCOIN_SETTINGS_FILENAME; }>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME); }>;\n+\n+using HelpDebugSetting = common::Setting<\n+    \"-help-debug\", bool, common::SettingOptions{.legacy = true},\n+    \"Print help message with debugging options and exit\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using TestSetting = common::Setting<\n+    \"-test=<option>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Pass a test-only option. Options include : %s.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(TEST_OPTIONS_DOC, \", \")); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using AllowignoredconfSetting = common::Setting<\n+    \"-allowignoredconf\", bool, common::SettingOptions{.legacy = true},\n+    \"For backwards compatibility, treat an unused %s file in the datadir as a warning, not an error.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, BITCOIN_CONF_FILENAME); }>;\n+\n+using RpccookiepermsSetting = common::Setting<\n+    \"-rpccookieperms=<readable-by>\", std::optional<std::string>, common::SettingOptions{.legacy = true},\n+    \"Set permissions on the RPC auth cookie file so that it is readable by [owner|group|all] (default: owner [via umask 0077])\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcauthSetting = common::Setting<\n+    \"-rpcauth=<userpw>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcwhitelistdefaultSetting = common::Setting<\n+    \"-rpcwhitelistdefault\", bool, common::SettingOptions{.legacy = true},\n+    \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcwhitelistSetting = common::Setting<\n+    \"-rpcwhitelist=<whitelist>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcallowipSetting = common::Setting<\n+    \"-rpcallowip=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Allow JSON-RPC connections from specified source. Valid values for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0), a network/CIDR (e.g. 1.2.3.4/24), all ipv4 (0.0.0.0/0), or all ipv6 (::/0). This option can be specified multiple times\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcbindSetting = common::Setting<\n+    \"-rpcbind=<addr>[:port]\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcservertimeoutSetting = common::Setting<\n+    \"-rpcservertimeout=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Timeout during HTTP requests (default: %d)\">\n+    ::Default<DEFAULT_HTTP_SERVER_TIMEOUT>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcworkqueueSetting = common::Setting<\n+    \"-rpcworkqueue=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Set the depth of the work queue to service RPC calls (default: %d)\">\n+    ::Default<DEFAULT_HTTP_WORKQUEUE>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcthreadsSetting = common::Setting<\n+    \"-rpcthreads=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Set the number of threads to service RPC calls (default: %d)\">\n+    ::Default<DEFAULT_HTTP_THREADS>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using AlertnotifySetting = common::Setting<\n+    \"-alertnotify=<cmd>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Execute command when an alert is raised (%s in cmd is replaced by message)\">;\n+\n+using AssumevalidSetting = common::Setting<\n+    \"-assumevalid=<hex>\", std::optional<std::string>, common::SettingOptions{.legacy = true},\n+    \"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet3: %s, testnet4: %s, signet: %s)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& testnetChainParams, const auto& testnet4ChainParams, const auto& signetChainParams) { return strprintf(fmt, defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnet4ChainParams->GetConsensus().defaultAssumeValid.GetHex(), signetChainParams->GetConsensus().defaultAssumeValid.GetHex()); }>;\n+\n+using BlocksxorSetting = common::Setting<\n+    \"-blocksxor\", std::optional<bool>, common::SettingOptions{.legacy = true},\n+    \"Whether an XOR-key applies to blocksdir *.dat files. \"\n+                             \"The created XOR-key will be zeros for an existing blocksdir or when `-blocksxor=0` is \"\n+                             \"set, and random for a freshly initialized blocksdir. \"\n+                             \"(default: %u)\">\n+    ::HelpArgs<kernel::DEFAULT_XOR_BLOCKSDIR>;\n+\n+using BlocknotifySetting = common::Setting<\n+    \"-blocknotify=<cmd>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Execute command when the best block changes (%s in cmd is replaced by block hash)\">;\n+\n+using BlockreconstructionextratxnSetting = common::Setting<\n+    \"-blockreconstructionextratxn=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Extra transactions to keep in memory for compact block reconstructions (default: %u)\">\n+    ::HelpArgs<DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN>;\n+\n+using BlocksonlySetting = common::Setting<\n+    \"-blocksonly\", std::optional<bool>, common::SettingOptions{.legacy = true},\n+    \"Whether to reject transactions from network peers. Disables automatic broadcast and rebroadcast of transactions, unless the source peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\">\n+    ::HelpArgs<DEFAULT_BLOCKSONLY>;\n+\n+using CoinstatsindexSetting = common::Setting<\n+    \"-coinstatsindex\", bool, common::SettingOptions{.legacy = true},\n+    \"Maintain coinstats index used by the gettxoutsetinfo RPC (default: %u)\">\n+    ::Default<DEFAULT_COINSTATSINDEX>;\n+\n+using DbbatchsizeSetting = common::Setting<\n+    \"-dbbatchsize\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Maximum database write batch size in bytes (default: %u)\">\n+    ::HelpArgs<nDefaultDbBatchSize>;\n+\n+using DbcacheSetting = common::Setting<\n+    \"-dbcache=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maximum database cache size <n> MiB (minimum %d, default: %d). Make sure you have enough RAM. In addition, unused memory allocated to the mempool is shared with this cache (see -maxmempool).\">\n+    ::Default<nDefaultDbCache>\n+    ::HelpArgs<nMinDbCache, nDefaultDbCache>;\n+\n+using IncludeconfSetting = common::Setting<\n+    \"-includeconf=<file>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\">;\n+\n+using LoadblockSetting = common::Setting<\n+    \"-loadblock=<file>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Imports blocks from external file on startup\">;\n+\n+using MaxmempoolSetting = common::Setting<\n+    \"-maxmempool=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Keep the transaction memory pool below <n> megabytes (default: %u)\">\n+    ::HelpArgs<DEFAULT_MAX_MEMPOOL_SIZE_MB>;\n+\n+using MaxorphantxSetting = common::Setting<\n+    \"-maxorphantx=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Keep at most <n> unconnectable transactions in memory (default: %u)\">\n+    ::HelpArgs<DEFAULT_MAX_ORPHAN_TRANSACTIONS>;\n+\n+using MempoolexpirySetting = common::Setting<\n+    \"-mempoolexpiry=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Do not keep transactions in the mempool longer than <n> hours (default: %u)\">\n+    ::HelpArgs<DEFAULT_MEMPOOL_EXPIRY_HOURS>;\n+\n+using MinimumchainworkSetting = common::Setting<\n+    \"-minimumchainwork=<hex>\", std::optional<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet3: %s, testnet4: %s, signet: %s)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& testnetChainParams, const auto& testnet4ChainParams, const auto& signetChainParams) { return strprintf(fmt, defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnet4ChainParams->GetConsensus().nMinimumChainWork.GetHex(), signetChainParams->GetConsensus().nMinimumChainWork.GetHex()); }>;\n+\n+using ParSetting = common::Setting<\n+    \"-par=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Set the number of script verification threads (0 = auto, up to %d, <0 = leave that many cores free, default: %d)\">\n+    ::Default<DEFAULT_SCRIPTCHECK_THREADS>\n+    ::HelpArgs<MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS>;\n+\n+using PersistmempoolSetting = common::Setting<\n+    \"-persistmempool\", bool, common::SettingOptions{.legacy = true},\n+    \"Whether to save the mempool on shutdown and load on restart (default: %u)\">\n+    ::Default<node::DEFAULT_PERSIST_MEMPOOL>;\n+\n+using Persistmempoolv1Setting = common::Setting<\n+    \"-persistmempoolv1\", bool, common::SettingOptions{.legacy = true},\n+    \"Whether a mempool.dat file created by -persistmempool or the savemempool RPC will be written in the legacy format \"\n+                             \"(version 1) or the current format (version 2). This temporary option will be removed in the future. (default: %u)\">\n+    ::HelpArgs<DEFAULT_PERSIST_V1_DAT>;\n+\n+using PidSetting = common::Setting<\n+    \"-pid=<file>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\">\n+    ::DefaultFn<[] { return BITCOIN_PID_FILENAME; }>;\n+\n+using PruneSetting = common::Setting<\n+    \"-prune=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex. \"\n+            \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\">\n+    ::HelpArgs<MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024>;\n+\n+using ReindexSetting = common::Setting<\n+    \"-reindex\", bool, common::SettingOptions{.legacy = true},\n+    \"If enabled, wipe chain state and block index, and rebuild them from blk*.dat files on disk. Also wipe and rebuild other optional indexes that are active. If an assumeutxo snapshot was loaded, its chainstate will be wiped as well. The snapshot can then be reloaded via RPC.\">;\n+\n+using ReindexChainstateSetting = common::Setting<\n+    \"-reindex-chainstate\", bool, common::SettingOptions{.legacy = true},\n+    \"If enabled, wipe chain state, and rebuild it from blk*.dat files on disk. If an assumeutxo snapshot was loaded, its chainstate will be wiped as well. The snapshot can then be reloaded via RPC.\">;\n+\n+using StartupnotifySetting = common::Setting<\n+    \"-startupnotify=<cmd>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Execute command on startup.\">;\n+\n+using ShutdownnotifySetting = common::Setting<\n+    \"-shutdownnotify=<cmd>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Execute command immediately before beginning shutdown. The need for shutdown may be urgent, so be careful not to delay it long (if the command doesn't require interaction with the server, consider having it fork into the background).\">;\n+\n+using TxindexSetting = common::Setting<\n+    \"-txindex\", bool, common::SettingOptions{.legacy = true},\n+    \"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\">\n+    ::Default<DEFAULT_TXINDEX>;\n+\n+using BlockfilterindexSetting = common::Setting<\n+    \"-blockfilterindex=<type>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Maintain an index of compact filters by block (default: %s, values: %s).\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()); }>;\n+\n+using BlockfilterindexSettingStr = common::Setting<\n+    \"-blockfilterindex=<type>\", std::string, common::SettingOptions{.legacy = true}>\n+    ::DefaultFn<[] { return DEFAULT_BLOCKFILTERINDEX; }>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()); }>;\n+\n+using AddnodeSetting = common::Setting<\n+    \"-addnode=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\">\n+    ::HelpArgs<MAX_ADDNODE_CONNECTIONS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using AsmapSetting = common::Setting<\n+    \"-asmap=<file>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\">\n+    ::DefaultFn<[] { return DEFAULT_ASMAP_FILENAME; }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using BantimeSetting = common::Setting<\n+    \"-bantime=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Default duration (in seconds) of manually configured bans (default: %u)\">\n+    ::Default<DEFAULT_MISBEHAVING_BANTIME>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using BindSetting = common::Setting<\n+    \"-bind=<addr>[:<port>][=onion]\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet3: 127.0.0.1:%u=onion, testnet4: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultBaseParams, const auto& testnetBaseParams, const auto& testnet4BaseParams, const auto& signetBaseParams, const auto& regtestBaseParams) { return strprintf(fmt, defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), testnet4BaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using CjdnsreachableSetting = common::Setting<\n+    \"-cjdnsreachable\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"If set, then this host is configured for CJDNS (connecting to fc00::/8 addresses would lead us to the CJDNS network, see doc/cjdns.md) (default: 0)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ConnectSetting = common::Setting<\n+    \"-connect=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using DiscoverSetting = common::Setting<\n+    \"-discover\", bool, common::SettingOptions{.legacy = true},\n+    \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\">\n+    ::Default<true>\n+    ::HelpArgs<>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using DnsSetting = common::Setting<\n+    \"-dns\", bool, common::SettingOptions{.legacy = true},\n+    \"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\">\n+    ::Default<DEFAULT_NAME_LOOKUP>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using DnsseedSetting = common::Setting<\n+    \"-dnsseed\", std::optional<bool>, common::SettingOptions{.legacy = true},\n+    \"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used or -maxconnections=0)\">\n+    ::HelpArgs<DEFAULT_DNSSEED>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ExternalipSetting = common::Setting<\n+    \"-externalip=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Specify your own public address\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using FixedseedsSetting = common::Setting<\n+    \"-fixedseeds\", bool, common::SettingOptions{.legacy = true},\n+    \"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\">\n+    ::Default<DEFAULT_FIXEDSEEDS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ForcednsseedSetting = common::Setting<\n+    \"-forcednsseed\", bool, common::SettingOptions{.legacy = true},\n+    \"Always query for peer addresses via DNS lookup (default: %u)\">\n+    ::Default<DEFAULT_FORCEDNSSEED>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ListenSetting = common::Setting<\n+    \"-listen\", bool, common::SettingOptions{.legacy = true},\n+    \"Accept connections from outside (default: %u if no -proxy, -connect or -maxconnections=0)\">\n+    ::HelpArgs<DEFAULT_LISTEN>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ListenonionSetting = common::Setting<\n+    \"-listenonion\", bool, common::SettingOptions{.legacy = true},\n+    \"Automatically create Tor onion service (default: %d)\">\n+    ::HelpArgs<DEFAULT_LISTEN_ONION>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxconnectionsSetting = common::Setting<\n+    \"-maxconnections=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maintain at most <n> automatic connections to peers (default: %u). This limit does not apply to connections manually added via -addnode or the addnode RPC, which have a separate limit of %u.\">\n+    ::Default<DEFAULT_MAX_PEER_CONNECTIONS>\n+    ::HelpArgs<DEFAULT_MAX_PEER_CONNECTIONS, MAX_ADDNODE_CONNECTIONS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxreceivebufferSetting = common::Setting<\n+    \"-maxreceivebuffer=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\">\n+    ::Default<DEFAULT_MAXRECEIVEBUFFER>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxsendbufferSetting = common::Setting<\n+    \"-maxsendbuffer=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maximum per-connection memory usage for the send buffer, <n>*1000 bytes (default: %u)\">\n+    ::Default<DEFAULT_MAXSENDBUFFER>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxuploadtargetSetting = common::Setting<\n+    \"-maxuploadtarget=<n>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Tries to keep outbound traffic under the given target per 24h. Limit does not apply to peers with 'download' permission or blocks created within past week. 0 = no limit (default: %s). Optional suffix units [k|K|m|M|g|G|t|T] (default: M). Lowercase is 1000 base while uppercase is 1024 base\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_MAX_UPLOAD_TARGET); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using OnionSetting = common::Setting<\n+    \"-onion=<ip:port|path>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy). May be a local file path prefixed with 'unix:'.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using OnionSetting2 = common::Setting<\n+    \"-onion=<ip:port>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using I2psamSetting = common::Setting<\n+    \"-i2psam=<ip:port>\", std::string, common::SettingOptions{.legacy = true},\n+    \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using I2pacceptincomingSetting = common::Setting<\n+    \"-i2pacceptincoming\", bool, common::SettingOptions{.legacy = true},\n+    \"Whether to accept inbound I2P connections (default: %i). Ignored if -i2psam is not set. Listening for inbound I2P connections is done through the SAM proxy, not by binding to a local address and port.\">\n+    ::Default<DEFAULT_I2P_ACCEPT_INCOMING>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using OnlynetSetting = common::Setting<\n+    \"-onlynet=<net>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Make automatic outbound connections only to network <net> (%s). Inbound and manual connections are not affected by this option. It can be specified multiple times to allow multiple networks.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(GetNetworkNames(), \", \")); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using V2transportSetting = common::Setting<\n+    \"-v2transport\", bool, common::SettingOptions{.legacy = true},\n+    \"Support v2 transport (default: %u)\">\n+    ::Default<DEFAULT_V2_TRANSPORT>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PeerbloomfiltersSetting = common::Setting<\n+    \"-peerbloomfilters\", bool, common::SettingOptions{.legacy = true},\n+    \"Support filtering of blocks and transaction with bloom filters (default: %u)\">\n+    ::Default<DEFAULT_PEERBLOOMFILTERS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PeerblockfiltersSetting = common::Setting<\n+    \"-peerblockfilters\", bool, common::SettingOptions{.legacy = true},\n+    \"Serve compact block filters to peers per BIP 157 (default: %u)\">\n+    ::Default<DEFAULT_PEERBLOCKFILTERS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TxreconciliationSetting = common::Setting<\n+    \"-txreconciliation\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Enable transaction reconciliations per BIP 330 (default: %d)\">\n+    ::HelpArgs<DEFAULT_TXRECONCILIATION_ENABLE>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PortSetting = common::Setting<\n+    \"-port=<port>\", int64_t, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Listen for connections on <port> (default: %u, testnet3: %u, testnet4: %u, signet: %u, regtest: %u). Not relevant for I2P (see doc/i2p.md).\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& testnetChainParams, const auto& testnet4ChainParams, const auto& signetChainParams, const auto& regtestChainParams) { return strprintf(fmt, defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), testnet4ChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ProxySetting = common::Setting<\n+    \"-proxy=<ip:port|path>\", std::string, common::SettingOptions{.legacy = true, .disallow_elision = true},\n+    \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled). May be a local file path prefixed with 'unix:' if the proxy supports it.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ProxySetting2 = common::Setting<\n+    \"-proxy=<ip:port>\", std::string, common::SettingOptions{.legacy = true, .disallow_elision = true},\n+    \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ProxyrandomizeSetting = common::Setting<\n+    \"-proxyrandomize\", bool, common::SettingOptions{.legacy = true},\n+    \"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\">\n+    ::Default<DEFAULT_PROXYRANDOMIZE>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using SeednodeSetting = common::Setting<\n+    \"-seednode=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes. During startup, seednodes will be tried before dnsseeds.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using NetworkactiveSetting = common::Setting<\n+    \"-networkactive\", bool, common::SettingOptions{.legacy = true},\n+    \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\">\n+    ::Default<true>\n+    ::HelpArgs<>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TimeoutSetting = common::Setting<\n+    \"-timeout=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\">\n+    ::Default<DEFAULT_CONNECT_TIMEOUT>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PeertimeoutSetting = common::Setting<\n+    \"-peertimeout=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\">\n+    ::Default<DEFAULT_PEER_CONNECT_TIMEOUT>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TorcontrolSetting = common::Setting<\n+    \"-torcontrol=<ip>:<port>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Tor control host and port to use if onion listening enabled (default: %s). If no port is specified, the default port of %i will be used.\">\n+    ::DefaultFn<[] { return DEFAULT_TOR_CONTROL; }>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_TOR_CONTROL, DEFAULT_TOR_CONTROL_PORT); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TorpasswordSetting = common::Setting<\n+    \"-torpassword=<pass>\", std::string, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Tor control port password (default: empty)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using UpnpSetting = common::Setting<\n+    \"-upnp\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"\">\n+    ::Category<OptionsCategory::HIDDEN>;\n+\n+using NatpmpSetting = common::Setting<\n+    \"-natpmp\", bool, common::SettingOptions{.legacy = true},\n+    \"Use PCP or NAT-PMP to map the listening port (default: %u)\">\n+    ::Default<DEFAULT_NATPMP>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using WhitebindSetting = common::Setting<\n+    \"-whitebind=<[permissions@]addr>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Bind to the given address and add permission flags to the peers connecting to it. \"\n+        \"Use [host]:port notation for IPv6. Allowed permissions: %s. \"\n+        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(NET_PERMISSIONS_DOC, \", \")); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using WhitelistSetting = common::Setting<\n+    \"-whitelist=<[permissions@]IP address or network>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Add permission flags to the peers using the given IP address (e.g. 1.2.3.4) or \"\n+        \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n+        \"-whitebind. \"\n+        \"Additional flags \\\"in\\\" and \\\"out\\\" control whether permissions apply to incoming connections and/or manual (default: incoming only). \"\n+        \"Can be specified multiple times.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ZmqpubhashblockSetting = common::Setting<\n+    \"-zmqpubhashblock=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish hash block in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubhashtxSetting = common::Setting<\n+    \"-zmqpubhashtx=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish hash transaction in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawblockSetting = common::Setting<\n+    \"-zmqpubrawblock=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish raw block in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawtxSetting = common::Setting<\n+    \"-zmqpubrawtx=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish raw transaction in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubsequenceSetting = common::Setting<\n+    \"-zmqpubsequence=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish hash block and tx sequence in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubhashblockhwmSetting = common::Setting<\n+    \"-zmqpubhashblockhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish hash block outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubhashtxhwmSetting = common::Setting<\n+    \"-zmqpubhashtxhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish hash transaction outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawblockhwmSetting = common::Setting<\n+    \"-zmqpubrawblockhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish raw block outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawtxhwmSetting = common::Setting<\n+    \"-zmqpubrawtxhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish raw transaction outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubsequencehwmSetting = common::Setting<\n+    \"-zmqpubsequencehwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish hash sequence message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using CheckblocksSetting = common::Setting<\n+    \"-checkblocks=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"How many blocks to check at startup (default: %u, 0 = all)\">\n+    ::Default<DEFAULT_CHECKBLOCKS>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using ChecklevelSetting = common::Setting<\n+    \"-checklevel=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"How thorough the block verification of -checkblocks is: %s (0-4, default: %u)\">\n+    ::Default<DEFAULT_CHECKLEVEL>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(CHECKLEVEL_DOC, \", \"), DEFAULT_CHECKLEVEL); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CheckblockindexSetting = common::Setting<\n+    \"-checkblockindex\", std::optional<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do a consistency check for the block tree, chainstate, and other validation data structures every <n> operations. Use 0 to disable. (default: %u, regtest: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& regtestChainParams) { return strprintf(fmt, defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CheckblockindexSettingInt = common::Setting<\n+    \"-checkblockindex\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true}>;\n+\n+using CheckmempoolSetting = common::Setting<\n+    \"-checkmempool=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Run mempool consistency checks every <n> transactions. Use 0 to disable. (default: %u, regtest: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& regtestChainParams) { return strprintf(fmt, defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CheckpointsSetting = common::Setting<\n+    \"-checkpoints\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Enable rejection of any forks from the known historical chain until block %s (default: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams) { return strprintf(fmt, defaultChainParams->Checkpoints().GetHeight(), DEFAULT_CHECKPOINTS_ENABLED); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using DeprecatedrpcSetting = common::Setting<\n+    \"-deprecatedrpc=<method>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Allows deprecated RPC method(s) to be used\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using StopafterblockimportSetting = common::Setting<\n+    \"-stopafterblockimport\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Stop running after importing blocks from disk (default: %u)\">\n+    ::Default<DEFAULT_STOPAFTERBLOCKIMPORT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using StopatheightSetting = common::Setting<\n+    \"-stopatheight\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Stop running after reaching the given height in the main chain (default: %u)\">\n+    ::HelpArgs<node::DEFAULT_STOPATHEIGHT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitancestorcountSetting = common::Setting<\n+    \"-limitancestorcount=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\">\n+    ::HelpArgs<DEFAULT_ANCESTOR_LIMIT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitancestorsizeSetting = common::Setting<\n+    \"-limitancestorsize=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\">\n+    ::HelpArgs<DEFAULT_ANCESTOR_SIZE_LIMIT_KVB>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitdescendantcountSetting = common::Setting<\n+    \"-limitdescendantcount=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\">\n+    ::HelpArgs<DEFAULT_DESCENDANT_LIMIT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitdescendantsizeSetting = common::Setting<\n+    \"-limitdescendantsize=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\">\n+    ::HelpArgs<DEFAULT_DESCENDANT_SIZE_LIMIT_KVB>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CapturemessagesSetting = common::Setting<\n+    \"-capturemessages\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Capture all P2P messages to disk\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using MocktimeSetting = common::Setting<\n+    \"-mocktime=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Replace actual time with %s (default: 0)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, UNIX_EPOCH_TIME); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using MaxsigcachesizeSetting = common::Setting<\n+    \"-maxsigcachesize=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\">\n+    ::HelpArgs<(DEFAULT_VALIDATION_CACHE_BYTES >> 20)>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using MaxtipageSetting = common::Setting<\n+    \"-maxtipage=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Maximum tip age in seconds to consider node in initial block download (default: %u)\">\n+    ::HelpArgs<Ticks<std::chrono::seconds>(DEFAULT_MAX_TIP_AGE)>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using PrintprioritySetting = common::Setting<\n+    \"-printpriority\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Log transaction fee rate in %s/kvB when mining blocks (default: %u)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, node::DEFAULT_PRINT_MODIFIED_FEE); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using UacommentSetting = common::Setting<\n+    \"-uacomment=<cmt>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Append comment to the user agent string\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using AcceptnonstdtxnSetting = common::Setting<\n+    \"-acceptnonstdtxn\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Relay and mine \\\"non-standard\\\" transactions (test networks only; default: %u)\">\n+    ::Default<DEFAULT_ACCEPT_NON_STD_TXN>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using IncrementalrelayfeeSetting = common::Setting<\n+    \"-incrementalrelayfee=<amt>\", std::string, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Fee rate (in %s/kvB) used to define cost of relay, used for mempool limiting and replacement policy. (default: %s)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)); }>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using DustrelayfeeSetting = common::Setting<\n+    \"-dustrelayfee=<amt>\", std::string, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Fee rate (in %s/kvB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)); }>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using AcceptstalefeeestimatesSetting = common::Setting<\n+    \"-acceptstalefeeestimates\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Read fee estimates even if they are stale (%sdefault: %u) fee estimates are considered stale if they are %s hours old\">\n+    ::Default<DEFAULT_ACCEPT_STALE_FEE_ESTIMATES>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, \"regtest only; \", DEFAULT_ACCEPT_STALE_FEE_ESTIMATES, Ticks<std::chrono::hours>(MAX_FILE_AGE)); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using BytespersigopSetting = common::Setting<\n+    \"-bytespersigop\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\">\n+    ::DefaultFn<[] { return nBytesPerSigOp; }>\n+    ::HelpArgs<DEFAULT_BYTES_PER_SIGOP>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using DatacarrierSetting = common::Setting<\n+    \"-datacarrier\", bool, common::SettingOptions{.legacy = true},\n+    \"Relay and mine data carrier transactions (default: %u)\">\n+    ::Default<DEFAULT_ACCEPT_DATACARRIER>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using DatacarriersizeSetting = common::Setting<\n+    \"-datacarriersize\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Relay and mine transactions whose data-carrying raw scriptPubKey \"\n+                             \"is of this size or less (default: %u)\">",
      "path": "src/init_settings.h",
      "position": 1,
      "original_position": 766,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in other cases we wrote out the lines:\r\n```suggestion\r\n    \"Relay and mine transactions whose data-carrying raw scriptPubKey is of this size or less (default: %u)\">\r\n```",
      "created_at": "2024-12-10T13:41:19Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878117611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878117611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 765,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 762,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878131657",
      "pull_request_review_id": 2492047895,
      "id": 1878131657,
      "node_id": "PRRC_kwDOABII585v8gPJ",
      "diff_hunk": "@@ -1497,19 +1458,19 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Requesting DNS seeds entails connecting to IPv4/IPv6, which -onlynet options may prohibit:\n     // If -dnsseed=1 is explicitly specified, abort. If it's left unspecified by the user, we skip\n     // the DNS seeds by adjusting -dnsseed in InitParameterInteraction.\n-    if (args.GetBoolArg(\"-dnsseed\") == true && !g_reachable_nets.Contains(NET_IPV4) && !g_reachable_nets.Contains(NET_IPV6)) {\n+    if (DnsseedSetting::Get(args) == true && !g_reachable_nets.Contains(NET_IPV4) && !g_reachable_nets.Contains(NET_IPV6)) {",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 843,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it still make sense to do `== true`?",
      "created_at": "2024-12-10T13:50:38Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878131657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878131657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878137172",
      "pull_request_review_id": 2492047895,
      "id": 1878137172,
      "node_id": "PRRC_kwDOABII585v8hlU",
      "diff_hunk": "@@ -926,40 +886,40 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n-    if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n+    if (V2transportSetting::Get(args)) {\n         g_local_services = ServiceFlags(g_local_services | NODE_P2P_V2);\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (PeerblockfiltersSetting::Get(args)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n \n         g_local_services = ServiceFlags(g_local_services | NODE_COMPACT_FILTERS);\n     }\n \n-    if (args.GetIntArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (PruneSetting::Get(args, 0)) {\n+        if (TxindexSetting::Get(args))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-reindex-chainstate\", false)) {\n+        if (ReindexChainstateSetting::Get(args)) {\n             return InitError(_(\"Prune mode is incompatible with -reindex-chainstate. Use full -reindex instead.\"));\n         }\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false\n-    if (args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED) && !args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)){\n+    if (ForcednsseedSetting::Get(args) && !DnsseedSetting::Get(args, DEFAULT_DNSSEED)){",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 571,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850692509,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm also having trouble with these defaults",
      "created_at": "2024-12-10T13:53:37Z",
      "updated_at": "2024-12-10T14:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878137172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878137172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880959469",
      "pull_request_review_id": 2496920898,
      "id": 1880959469,
      "node_id": "PRRC_kwDOABII585wHSnt",
      "diff_hunk": "@@ -137,14 +132,14 @@ int main(int argc, char** argv)\n \n     try {\n         benchmark::Args args;\n-        args.asymptote = parseAsymptote(argsman.GetArg(\"-asymptote\", \"\"));\n-        args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n-        args.min_time = std::chrono::milliseconds(argsman.GetIntArg(\"-min-time\", DEFAULT_MIN_TIME_MS));\n-        args.output_csv = argsman.GetPathArg(\"-output-csv\");\n-        args.output_json = argsman.GetPathArg(\"-output-json\");\n-        args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n-        args.sanity_check = argsman.GetBoolArg(\"-sanity-check\", false);\n-        args.priority = parsePriorityLevel(argsman.GetArg(\"-priority-level\", DEFAULT_PRIORITY));\n+        args.asymptote = parseAsymptote(AsymptoteSetting::Get(argsman));",
      "path": "src/bench/bench_bitcoin.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878015143,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878015143\r\n\r\n> Given that parsing can still invalidate a stored value, I wonder if it's possible to include parsing/validation/normalization into each setting as well\r\n\r\nYes! The idea is very much to add parsing and validation behavior, std::variant support, and support for std::chrono types as followups.\r\n\r\nAll of this can be seen in https://github.com/ryanofsky/bitcoin/blob/pr/argtype/src/test/argsman_tests.cpp from #22978, though that code was written before this PR and there are a lot of improvements I want to make to the interface and implementation.\r\n\r\n",
      "created_at": "2024-12-11T20:48:38Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1880959469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880959469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880959898",
      "pull_request_review_id": 2496920898,
      "id": 1880959898,
      "node_id": "PRRC_kwDOABII585wHSua",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878016256,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878016256\r\n\r\n> I know it's a move, but could we modernize these (in a separate commit, of course)?\r\n\r\nI'm not actually sure what the modern way of writing this is, but if there is a better way let me know here. I am planning to open a new PR that could be merged before this one with small cleanups like this, to reduce the size of this one.",
      "created_at": "2024-12-11T20:48:50Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1880959898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880959898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880960864",
      "pull_request_review_id": 2496920898,
      "id": 1880960864,
      "node_id": "PRRC_kwDOABII585wHS9g",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n+/** Priority level default value, run \"all\" priority levels */\n+static constexpr auto DEFAULT_PRIORITY{\"all\"};\n+\n+using AsymptoteSetting = common::Setting<\n+    \"-asymptote=<n1,n2,n3,...>\", std::string, common::SettingOptions{.legacy = true},",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878032259,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878032259\r\n\r\n> a lot of bare template parameters here, it's not immediately obvious what `std::string` refers to - what if we commented them:\r\n\r\nThere should be only 3 unnamed parameters passed to the `Setting` class:\r\n\r\n- Summary string\r\n- Help string\r\n- C++ type\r\n\r\nI would expect the basic meanings of these parameters to be pretty obvious in context, especially with current `_settings.h` files which define dozens of settings next to each other. And the parts that aren't obvious should be explained by the `common::Setting` class documentation, which should be easy to jump to from the usage.\r\n\r\nOther options passed to the `Setting` class are passed as named parameters using named `SettingsOptions`, `Category`, `Default`, `HelpArgs`, etc fields. These fields should also be easy to jump to and well-documented.\r\n\r\nI don't think it would be good to add lots of `/*summary=*/` `/*type=*/` `/*help=*/` comments, especially in files defining dozens of settings, because they could become inconsistent over time and be a maintenance burden, add noise, and make it harder to see differences between settings. I think it should be ok to make the 3 most common parameters unnamed and make everything else named.",
      "created_at": "2024-12-11T20:49:24Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1880960864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880960864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880961549",
      "pull_request_review_id": 2496920898,
      "id": 1880961549,
      "node_id": "PRRC_kwDOABII585wHTIN",
      "diff_hunk": "@@ -25,11 +27,11 @@ using util::SplitString;\n \n void ReadSigNetArgs(const ArgsManager& args, CChainParams::SigNetOptions& options)\n {\n-    if (args.IsArgSet(\"-signetseednode\")) {\n-        options.seeds.emplace(args.GetArgs(\"-signetseednode\"));\n+    if (!SignetseednodeSetting::Value(args).isNull()) {",
      "path": "src/chainparams.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877946605,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877946605\r\n\r\n> existence checking seems to be relied on often, maybe we could add an IsSet method to Settings (maybe even an `bool isSet() const { return (typ != VNULL); }` to `UniValie`):\r\n\r\nExistence checking is a pattern that causes many bugs and be discouraged The case you looking at here is removed by #30529, which will hopefully be merged before this PR. All other calls like this should also be removed.\r\n\r\nThe simplest, safest, and most reliable way of handling unset settings is to use `Default<>` or  `DefaultFn<>` options to provide explicit defaults that can be automatically returned by `Setting::Get` calls and shown in help information.\r\n\r\nIn cases where the default behavior can't be expressed as an explicit default value, the next best thing is to declare the setting with `std::optional` type so checking for unset values at least is mandatory and can be done reliably, avoiding bugs seen in #30529 and other places.",
      "created_at": "2024-12-11T20:49:41Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1880961549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1880961549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881097234",
      "pull_request_review_id": 2496920898,
      "id": 1881097234,
      "node_id": "PRRC_kwDOABII585wH0QS",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#ifndef BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+#define BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+\n+#include <chainparamsbase.h>\n+#include <common/setting.h>\n+\n+#include <string>\n+#include <vector>\n+\n+using SignetseednodeSetting = common::Setting<",
      "path": "src/chainparamsbase_settings.h",
      "position": 1,
      "original_position": 10,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877966780,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877951686\r\n\r\n> It seems to me we're using suffix naming to group values - could we use a namespace instead?\r\n\r\nI think it's best when c++ namespaces reflect directory structure of the project, so when you see a `util::` reference you know it is referring to something in `src/util/`, `wallet::` you know it is referring to something in `src/wallet/`, etc.\r\n\r\nI don't think I see value in having a `Setting` namespace, and think it could cause confusion if there could be clashes between a top level `Setting` namespace and a `wallet::Setting` namespace and the `common::Setting` class. In general I think overloading like this should be avoided if it is just going add mental overhead without providing other value.\r\n\r\nAlso `BlocksDirSetting::Get` reads better to me than `Setting::BlocksDir::Get`, \"blocks dir setting get\" \r\nover \"setting blocksdir get\", but of course that's very subjective.",
      "created_at": "2024-12-11T22:27:09Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881097234",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881097234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881105048",
      "pull_request_review_id": 2496920898,
      "id": 1881105048,
      "node_id": "PRRC_kwDOABII585wH2KY",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;",
      "path": "src/common/setting.h",
      "position": 82,
      "original_position": 49,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877951686,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877951686\r\n\r\n> My IDE suggests that we use the typename keyword before such dependent types:\r\n\r\nI think this code is working with at least 3 different compilers (gcc, clang, msvc). Do you think the compilers are failing to flag this? Or that this is change would be helpful for style reasons?",
      "created_at": "2024-12-11T22:34:20Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881105048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881105048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881105402",
      "pull_request_review_id": 2496920898,
      "id": 1881105402,
      "node_id": "PRRC_kwDOABII585wH2P6",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 31,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877991186,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877991186\r\n\r\n> nit: we're already inide `common`\r\n\r\nNice catch, simplified here and elsewhere.",
      "created_at": "2024-12-11T22:34:48Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881105402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881105402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881114549",
      "pull_request_review_id": 2496920898,
      "id": 1881114549,
      "node_id": "PRRC_kwDOABII585wH4e1",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else if constexpr (!std::is_same_v<decltype(help.value), std::nullptr_t>) {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 160,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877971170,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877971170\r\n\r\n> `options` seems unused here\r\n\r\nIt should be used in followup PR (options will need to be passed to the traits class to implement support for std::variant settings). Also I'm tying to be consistent about accepting T and options together most places so almost all the functions accept the same template parameters.\r\n",
      "created_at": "2024-12-11T22:45:15Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881114549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881114549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881115830",
      "pull_request_review_id": 2496920898,
      "id": 1881115830,
      "node_id": "PRRC_kwDOABII585wH4y2",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else if constexpr (!std::is_same_v<decltype(help.value), std::nullptr_t>) {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingConstruct(auto default_fn)\n+{\n+    if constexpr (std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        return {};\n+    } else {\n+        return default_fn();\n+    }\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingGet(const ArgsManager& manager, std::string_view summary, auto default_fn, auto get_fn)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 171,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877986848,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877986848\r\n\r\n> `auto default_fn` is bit surprising here, superficially seems like an over-generalized getter. Will review it later in more detail (is it some `constexpr` constraint? Will check later...).\r\n\r\nIf specified it should be a lambda. I don't think there is another type besides `auto` this could realistically use.\r\n",
      "created_at": "2024-12-11T22:46:54Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881115830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881115830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881118873",
      "pull_request_review_id": 2496920898,
      "id": 1881118873,
      "node_id": "PRRC_kwDOABII585wH5iZ",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 147,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877987824,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1877987824\r\n\r\n> `get_fn` seems unused\r\n\r\nGood catch. Will follow up and probably drop from this PR. This comes from the branch in #22978 and is used to support custom types for settings like structs and enums.\r\n",
      "created_at": "2024-12-11T22:50:56Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881118873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881118873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881123519",
      "pull_request_review_id": 2496920898,
      "id": 1881123519,
      "node_id": "PRRC_kwDOABII585wH6q_",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878005160,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878005160\r\n\r\n> In other cases we've used a single template method, instead of each type or case having its own explicit implementation - would it make sense to unify this as well?\r\n\r\nI think this is a good idea to keep in mind as long as the traits class only contains a single method, but in practice I have followup changes extending it to have more methods, so the same `if constexpr` conditions would need to be repeated in each method. Depending on what happens with followups, though, should revisit this.",
      "created_at": "2024-12-11T22:55:55Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881123519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881123519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881139391",
      "pull_request_review_id": 2496920898,
      "id": 1881139391,
      "node_id": "PRRC_kwDOABII585wH-i_",
      "diff_hunk": "@@ -15,11 +15,11 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-REGEX_ARG = r'\\b(?:GetArg|GetArgs|GetBoolArg|GetIntArg|GetPathArg|IsArgSet|get_net)\\(\"(-[^\"]+)\"'\n-REGEX_DOC = r'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n+REGEX_ARG = r'([A-Za-z0-9]+Setting)::Get'",
      "path": "test/lint/check-doc.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878053891,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878053891\r\n\r\n> If this linter is still relevant, we can use `\\w` instead of `[A-Za-z0-9]` throughout (and we could sort `args_unknown = sorted(args_docd.difference(args_used))` for consistent output)\r\n\r\nWill do this in in a followup. I'm not actually sure of everything this linter is doing and I don't know if it still adds value after this PR, so I opted to keep it for now.",
      "created_at": "2024-12-11T23:07:25Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881139391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881139391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881141963",
      "pull_request_review_id": 2496920898,
      "id": 1881141963,
      "node_id": "PRRC_kwDOABII585wH_LL",
      "diff_hunk": "@@ -8,14 +8,15 @@\n #include <common/args.h>\n #include <key_io.h>\n #include <logging.h>\n+#include <wallet/init_settings.h>\n \n namespace wallet {\n fs::path GetWalletDir()\n {\n     fs::path path;\n \n-    if (gArgs.IsArgSet(\"-walletdir\")) {\n-        path = gArgs.GetPathArg(\"-walletdir\");\n+    if (!WalletdirSetting::Value(gArgs).isNull()) {\n+        path = WalletdirSetting::Get(gArgs);\n         if (!fs::is_directory(path)) {",
      "path": "src/wallet/walletutil.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878056041,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878056041\r\n\r\n> as hinted above, I think `WalletdirSetting` should either return a valid result or empty/error - so would be cool if the `is_directory` check could be done inside\r\n\r\nTo be sure, no behavior is be changing here, but the handling of `-walletdir` definition doesn't make a lot of sense and should be cleaned up. I haven't looked into it much, but could take suggestions here if you have them for another PR, either before or after this one.",
      "created_at": "2024-12-11T23:11:01Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881141963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881141963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881148960",
      "pull_request_review_id": 2496920898,
      "id": 1881148960,
      "node_id": "PRRC_kwDOABII585wIA4g",
      "diff_hunk": "@@ -112,37 +113,37 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+    if (!FormatSetting::Value(args).isNull() && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+    if (!DumpfileSetting::Value(args).isNull() && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-descriptors\") && command != \"create\") {\n+    if (!DescriptorsSetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-legacy\") && command != \"create\") {\n+    if (!LegacySetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -legacy option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+    if (command == \"create\" && WalletSetting::Value(args).isNull()) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return false;\n     }\n-    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const std::string name = WalletSetting::Get(args);",
      "path": "src/wallet/wallettool.cpp",
      "position": 23,
      "original_position": 38,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878066786,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878066786\r\n\r\n> In other cases we've provided the default values for the settings - should we add `::Default<{\"\"}>` to the definition (or whatever compiles)?\r\n\r\nI don't think that would be an improvement in general, but the wallet tool setting can be changed to follow whatever style seems appropriate.\r\n\r\nIn general, settings are default initialized, so if you don't specify a default and the setting type is a string, the default value is \"\", if it's an int default is 0, if it's std::optional default is std::nullopt, vector default is {}, etc.\r\n\r\nI think using simple default values should generally be encouraged, and when more notable default values need to be set, it is better if they stand out and are not lost in surrounding `::Default<0>` `::Default<false>` `:DefaultFn<[] { return std::string{}; }>` boilerplate.",
      "created_at": "2024-12-11T23:18:54Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881148960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881148960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881154000",
      "pull_request_review_id": 2496920898,
      "id": 1881154000,
      "node_id": "PRRC_kwDOABII585wICHQ",
      "diff_hunk": "@@ -112,37 +113,37 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+    if (!FormatSetting::Value(args).isNull() && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+    if (!DumpfileSetting::Value(args).isNull() && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-descriptors\") && command != \"create\") {\n+    if (!DescriptorsSetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-legacy\") && command != \"create\") {\n+    if (!LegacySetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -legacy option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+    if (command == \"create\" && WalletSetting::Value(args).isNull()) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return false;\n     }\n-    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const std::string name = WalletSetting::Get(args);\n     const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n \n     if (command == \"create\") {\n         DatabaseOptions options;\n         ReadDatabaseArgs(args, options);\n         options.require_create = true;\n         // If -legacy is set, use it. Otherwise default to false.\n-        bool make_legacy = args.GetBoolArg(\"-legacy\", false);\n+        bool make_legacy = LegacySetting::Get(args);",
      "path": "src/wallet/wallettool.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878069473,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878069473\r\n\r\n> Same, are we not specifying `false` defaults? We seem to do it for e.g. `DEFAULT_NAMED`\r\n\r\nYes, empty defaults are intentionally not specified so nonempty defaults stand out. \r\n\r\nRegarding DEFAULT_NAMED, followups to this PR should remove DEFAULT_XXX constants like this which no longer provide benefits after this PR, and only make it harder to see what default values are.",
      "created_at": "2024-12-11T23:25:58Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881154000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881154000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881155145",
      "pull_request_review_id": 2496920898,
      "id": 1881155145,
      "node_id": "PRRC_kwDOABII585wICZJ",
      "diff_hunk": "@@ -2990,8 +2991,8 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), FlushAndDeleteWallet);\n-    walletInstance->m_keypool_size = std::max(args.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), int64_t{1});\n-    walletInstance->m_notify_tx_changed_script = args.GetArg(\"-walletnotify\", \"\");\n+    walletInstance->m_keypool_size = std::max(KeypoolSetting::Get(args), int64_t{1});",
      "path": "src/wallet/wallet.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878072992,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878072992\r\n\r\n> shouldn't this also be a validation error instead - preferably in `KeypoolSetting`\r\n\r\nThat would *probably* be a good idea, but it's not definitely clear to me, and this would be a better topic for a PR intending to change behavior.",
      "created_at": "2024-12-11T23:27:34Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881155145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881155145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2994,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881157021",
      "pull_request_review_id": 2496920898,
      "id": 1881157021,
      "node_id": "PRRC_kwDOABII585wIC2d",
      "diff_hunk": "@@ -107,15 +103,15 @@ bool WalletInit::ParameterInteraction() const\n          return InitError(Untranslated(\"A version conflict was detected between the run-time BerkeleyDB library and the one used during compilation.\"));\n      }\n #endif\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        for (const std::string& wallet : gArgs.GetArgs(\"-wallet\")) {\n+    if (DisablewalletSetting::Get(gArgs)) {\n+        for (const std::string& wallet : WalletSetting::Get(gArgs)) {\n             LogPrintf(\"%s: parameter interaction: -disablewallet -> ignoring -wallet=%s\\n\", __func__, wallet);\n         }\n \n         return true;\n     }\n \n-    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n+    if (BlocksonlySetting::Get(gArgs, DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {",
      "path": "src/wallet/init.cpp",
      "position": 1,
      "original_position": 123,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878074138,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878074138\r\n\r\n> can we migrate `gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)` as well?\r\n\r\nMaybe, but I think all uses of SoftSet/ForceSet are all hacks that abuse global state and that would be better to handle other ways. I think it would be best to deal with these in a PR eliminating SoftSet/ForceSet functions, and in any case discourage more calls to these functions.",
      "created_at": "2024-12-11T23:30:18Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881157021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881157021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881159156",
      "pull_request_review_id": 2496920898,
      "id": 1881159156,
      "node_id": "PRRC_kwDOABII585wIDX0",
      "diff_hunk": "@@ -459,7 +460,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n \n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n-        if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n+        if (OnionSetting::Get(gArgs) == \"\") {",
      "path": "src/torcontrol.cpp",
      "position": 22,
      "original_position": 26,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878078140,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878078140\r\n\r\n> Q: how can we set something to an empty string? `-onion=\"\"`? `-noonion`? `-noonion=\"\"`?\r\n\r\nThe onion setting is just empty by default so there should be no need to specify these. This PR isn't concerned with changing any runtime behavior, though #16545 is and documents all these cases.",
      "created_at": "2024-12-11T23:33:34Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881159156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881159156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 472,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881161365",
      "pull_request_review_id": 2496920898,
      "id": 1881161365,
      "node_id": "PRRC_kwDOABII585wID6V",
      "diff_hunk": "@@ -279,6 +279,10 @@ inline std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n     return v ? os << *v\n              : os << \"std::nullopt\";\n }\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)\n+{\n+    return os << \"std::nullopt\";\n+}",
      "path": "src/test/util/setup_common.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878091809,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878091809\r\n\r\n> We should be able to unify them now:\r\n\r\nMakes sense, applied suggestion.",
      "created_at": "2024-12-11T23:37:17Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881161365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881161365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 283,
      "original_start_line": 282,
      "start_side": "RIGHT",
      "line": 286,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881162363",
      "pull_request_review_id": 2496920898,
      "id": 1881162363,
      "node_id": "PRRC_kwDOABII585wIEJ7",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <qt/recentrequeststablemodel.h>\n #include <qt/sendcoinsdialog.h>\n #include <qt/transactiontablemodel.h>\n+#include <wallet/init_settings.h>\n \n #include <common/args.h> // for GetBoolArg",
      "path": "src/qt/walletmodel.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878099055,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878099055\r\n\r\n> comment needs update now\r\n\r\nMade a note. I think I will do this in a separate PR because I don't want to add unnecessary changes to this one.",
      "created_at": "2024-12-11T23:39:01Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881162363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881162363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881163036",
      "pull_request_review_id": 2496920898,
      "id": 1881163036,
      "node_id": "PRRC_kwDOABII585wIEUc",
      "diff_hunk": "@@ -717,7 +718,7 @@ bool OptionsModel::isRestartRequired() const\n \n bool OptionsModel::hasSigner()\n {\n-    return gArgs.GetArg(\"-signer\", \"\") != \"\";\n+    return wallet::SignerSetting::Get(gArgs) != \"\";",
      "path": "src/qt/optionsmodel.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878100985,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878100985\r\n\r\n> is \"\" the default for `SignerSetting` now?\r\n\r\nTo be sure, no default values or other runtime behaviors are changing in this PR, but the answer is yes. Default for -signer and most string settings is \"\"",
      "created_at": "2024-12-11T23:40:10Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881163036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881163036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 720,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881165471",
      "pull_request_review_id": 2496920898,
      "id": 1881165471,
      "node_id": "PRRC_kwDOABII585wIE6f",
      "diff_hunk": "@@ -140,9 +142,9 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.IsArgSet(\"-prune\")) {\n+    if (!PruneSetting::Value(gArgs).isNull()) {\n         m_prune_checkbox_is_default = false;\n-        ui->prune->setChecked(gArgs.GetIntArg(\"-prune\", 0) >= 1);\n+        ui->prune->setChecked(PruneSetting::Get(gArgs, 0) >= 1);",
      "path": "src/qt/intro.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878104278,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878104278\r\n\r\n> `PruneSetting` seems to have a explicit default value of `0` - maybe we can bake it into the definition\r\n\r\nThe script-diff would have dropped the 0 if it was actually the default everywhere, but there is code in blockmanager_args.cpp that retrieves the setting with a different default value, so the 0 is actually necessary here.\r\n\r\nIt would definitely be better if PruneSetting did have a consistent default value but that is something that needs to be cleaned up manually and can't be scripted.\r\n",
      "created_at": "2024-12-11T23:43:43Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881165471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881165471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881166027",
      "pull_request_review_id": 2496920898,
      "id": 1881166027,
      "node_id": "PRRC_kwDOABII585wIFDL",
      "diff_hunk": "@@ -24,36 +25,36 @@\n namespace node {\n util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManager::Options& opts)\n {\n-    if (auto value{args.GetIntArg(\"-checkblockindex\")}) {\n+    if (auto value{CheckblockindexSettingInt::Get(args)}) {\n         // Interpret bare -checkblockindex argument as 1 instead of 0.",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878108609,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878108609\r\n\r\n> this seems weird, shouldn't `CheckblockindexSetting` itself normalize this?\r\n\r\nYes, this is implemented in #16545 but current settings parsing behavior has lots of weird cases like this.\r\n",
      "created_at": "2024-12-11T23:44:49Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881166027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881166027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881168796",
      "pull_request_review_id": 2496920898,
      "id": 1881168796,
      "node_id": "PRRC_kwDOABII585wIFuc",
      "diff_hunk": "@@ -3809,7 +3810,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n     size_t nMessageSize = msg.data.size();\n     LogDebug(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());\n-    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+    if (CapturemessagesSetting::Get(gArgs, false)) {",
      "path": "src/net.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878112735,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878112735\r\n\r\n> I'm not sure I understand when the default values are kept, why not just:\r\n\r\nThe scripted-diff consolidates default values when it knows they are all the same, and in this case it doesn't because code here is treating the default value as false, while code elsewhere is treating default value as PeerManager::Options{}.capture_messages, which is also false, but scripted-diff has no way of knowing that.\r\n\r\nWill make a note of this and clean this up in another PR since it should be pretty easy to fix.",
      "created_at": "2024-12-11T23:49:24Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881168796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881168796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3813,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881169917",
      "pull_request_review_id": 2496920898,
      "id": 1881169917,
      "node_id": "PRRC_kwDOABII585wIF_9",
      "diff_hunk": "@@ -0,0 +1,865 @@\n+#ifndef BITCOIN_INIT_SETTINGS_H\n+#define BITCOIN_INIT_SETTINGS_H\n+\n+#include <addrman.h>\n+#include <banman.h>\n+#include <blockfilter.h>\n+#include <chainparamsbase.h>\n+#include <common/args.h>\n+#include <common/setting.h>\n+#include <httpserver.h>\n+#include <index/blockfilterindex.h>\n+#include <index/coinstatsindex.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <kernel/blockmanager_opts.h>\n+#include <kernel/mempool_options.h>\n+#include <mapport.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/chainstatemanager_args.h>\n+#include <node/kernel_notifications.h>\n+#include <node/mempool_persist_args.h>\n+#include <node/miner.h>\n+#include <policy/feerate.h>\n+#include <policy/fees.h>\n+#include <policy/settings.h>\n+#include <rpc/util.h>\n+#include <script/sigcache.h>\n+#include <torcontrol.h>\n+#include <txdb.h>\n+#include <util/moneystr.h>\n+#include <util/string.h>\n+#include <zmq/zmqabstractnotifier.h>\n+\n+#include <string>\n+#include <vector>\n+\n+using CheckaddrmanSetting = common::Setting<\n+    \"-checkaddrman=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Run addrman consistency checks every <n> operations. Use 0 to disable. (default: %u)\">\n+    ::HelpArgs<DEFAULT_ADDRMAN_CONSISTENCY_CHECKS>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using VersionSetting = common::Setting<\n+    \"-version\", bool, common::SettingOptions{.legacy = true},\n+    \"Print version and exit\">;\n+\n+using ConfSetting = common::Setting<\n+    \"-conf=<file>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location (only useable from command line, not configuration file) (default: %s)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, BITCOIN_CONF_FILENAME); }>;\n+\n+using ConfSettingPath = common::Setting<\n+    \"-conf=<file>\", fs::path, common::SettingOptions{.legacy = true}>\n+    ::DefaultFn<[] { return BITCOIN_CONF_FILENAME; }>;\n+\n+using DatadirSetting = common::Setting<\n+    \"-datadir=<dir>\", std::string, common::SettingOptions{.legacy = true, .disallow_negation = true},\n+    \"Specify data directory\">;\n+\n+using DatadirSettingPath = common::Setting<\n+    \"-datadir=<dir>\", fs::path, common::SettingOptions{.legacy = true, .disallow_negation = true}>;\n+\n+using RpccookiefileSetting = common::Setting<\n+    \"-rpccookiefile=<loc>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcpasswordSetting = common::Setting<\n+    \"-rpcpassword=<pw>\", std::string, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Password for JSON-RPC connections\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcportSetting = common::Setting<\n+    \"-rpcport=<port>\", std::optional<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Listen for JSON-RPC connections on <port> (default: %u, testnet3: %u, testnet4: %u, signet: %u, regtest: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultBaseParams, const auto& testnetBaseParams, const auto& testnet4BaseParams, const auto& signetBaseParams, const auto& regtestBaseParams) { return strprintf(fmt, defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), testnet4BaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()); }>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcportSettingInt = common::Setting<\n+    \"-rpcport=<port>\", int64_t, common::SettingOptions{.legacy = true, .network_only = true}>\n+    ::DefaultFn<[] { return BaseParams().RPCPort(); }>\n+    ::HelpFn<[](const auto& fmt, const auto& defaultBaseParams, const auto& testnetBaseParams, const auto& testnet4BaseParams, const auto& signetBaseParams, const auto& regtestBaseParams) { return strprintf(fmt, defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), testnet4BaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()); }>;\n+\n+using RpcuserSetting = common::Setting<\n+    \"-rpcuser=<user>\", std::string, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Username for JSON-RPC connections\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using DaemonSetting = common::Setting<\n+    \"-daemon\", bool, common::SettingOptions{.legacy = true},\n+    \"Run in the background as a daemon and accept commands (default: %d)\">\n+    ::HelpArgs<DEFAULT_DAEMON>;\n+\n+using DaemonwaitSetting = common::Setting<\n+    \"-daemonwait\", bool, common::SettingOptions{.legacy = true},\n+    \"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\">\n+    ::Default<DEFAULT_DAEMONWAIT>;\n+\n+using FastpruneSetting = common::Setting<\n+    \"-fastprune\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Use smaller block files and lower minimum prune height for testing purposes\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using BlocksdirSetting = common::Setting<\n+    \"-blocksdir=<dir>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\">;\n+\n+using BlocksdirSettingPath = common::Setting<\n+    \"-blocksdir=<dir>\", fs::path, common::SettingOptions{.legacy = true}>;\n+\n+using SettingsSetting = common::Setting<\n+    \"-settings=<file>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Specify path to dynamic settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by users (use %s instead for custom settings). Relative paths will be prefixed by datadir location. (default: %s)\">\n+    ::DefaultFn<[] { return BITCOIN_SETTINGS_FILENAME; }>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME); }>;\n+\n+using HelpDebugSetting = common::Setting<\n+    \"-help-debug\", bool, common::SettingOptions{.legacy = true},\n+    \"Print help message with debugging options and exit\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using TestSetting = common::Setting<\n+    \"-test=<option>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Pass a test-only option. Options include : %s.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(TEST_OPTIONS_DOC, \", \")); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using AllowignoredconfSetting = common::Setting<\n+    \"-allowignoredconf\", bool, common::SettingOptions{.legacy = true},\n+    \"For backwards compatibility, treat an unused %s file in the datadir as a warning, not an error.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, BITCOIN_CONF_FILENAME); }>;\n+\n+using RpccookiepermsSetting = common::Setting<\n+    \"-rpccookieperms=<readable-by>\", std::optional<std::string>, common::SettingOptions{.legacy = true},\n+    \"Set permissions on the RPC auth cookie file so that it is readable by [owner|group|all] (default: owner [via umask 0077])\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcauthSetting = common::Setting<\n+    \"-rpcauth=<userpw>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcwhitelistdefaultSetting = common::Setting<\n+    \"-rpcwhitelistdefault\", bool, common::SettingOptions{.legacy = true},\n+    \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcwhitelistSetting = common::Setting<\n+    \"-rpcwhitelist=<whitelist>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcallowipSetting = common::Setting<\n+    \"-rpcallowip=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Allow JSON-RPC connections from specified source. Valid values for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0), a network/CIDR (e.g. 1.2.3.4/24), all ipv4 (0.0.0.0/0), or all ipv6 (::/0). This option can be specified multiple times\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcbindSetting = common::Setting<\n+    \"-rpcbind=<addr>[:port]\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\">\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcservertimeoutSetting = common::Setting<\n+    \"-rpcservertimeout=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Timeout during HTTP requests (default: %d)\">\n+    ::Default<DEFAULT_HTTP_SERVER_TIMEOUT>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcworkqueueSetting = common::Setting<\n+    \"-rpcworkqueue=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Set the depth of the work queue to service RPC calls (default: %d)\">\n+    ::Default<DEFAULT_HTTP_WORKQUEUE>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using RpcthreadsSetting = common::Setting<\n+    \"-rpcthreads=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Set the number of threads to service RPC calls (default: %d)\">\n+    ::Default<DEFAULT_HTTP_THREADS>\n+    ::Category<OptionsCategory::RPC>;\n+\n+using AlertnotifySetting = common::Setting<\n+    \"-alertnotify=<cmd>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Execute command when an alert is raised (%s in cmd is replaced by message)\">;\n+\n+using AssumevalidSetting = common::Setting<\n+    \"-assumevalid=<hex>\", std::optional<std::string>, common::SettingOptions{.legacy = true},\n+    \"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet3: %s, testnet4: %s, signet: %s)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& testnetChainParams, const auto& testnet4ChainParams, const auto& signetChainParams) { return strprintf(fmt, defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnet4ChainParams->GetConsensus().defaultAssumeValid.GetHex(), signetChainParams->GetConsensus().defaultAssumeValid.GetHex()); }>;\n+\n+using BlocksxorSetting = common::Setting<\n+    \"-blocksxor\", std::optional<bool>, common::SettingOptions{.legacy = true},\n+    \"Whether an XOR-key applies to blocksdir *.dat files. \"\n+                             \"The created XOR-key will be zeros for an existing blocksdir or when `-blocksxor=0` is \"\n+                             \"set, and random for a freshly initialized blocksdir. \"\n+                             \"(default: %u)\">\n+    ::HelpArgs<kernel::DEFAULT_XOR_BLOCKSDIR>;\n+\n+using BlocknotifySetting = common::Setting<\n+    \"-blocknotify=<cmd>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Execute command when the best block changes (%s in cmd is replaced by block hash)\">;\n+\n+using BlockreconstructionextratxnSetting = common::Setting<\n+    \"-blockreconstructionextratxn=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Extra transactions to keep in memory for compact block reconstructions (default: %u)\">\n+    ::HelpArgs<DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN>;\n+\n+using BlocksonlySetting = common::Setting<\n+    \"-blocksonly\", std::optional<bool>, common::SettingOptions{.legacy = true},\n+    \"Whether to reject transactions from network peers. Disables automatic broadcast and rebroadcast of transactions, unless the source peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\">\n+    ::HelpArgs<DEFAULT_BLOCKSONLY>;\n+\n+using CoinstatsindexSetting = common::Setting<\n+    \"-coinstatsindex\", bool, common::SettingOptions{.legacy = true},\n+    \"Maintain coinstats index used by the gettxoutsetinfo RPC (default: %u)\">\n+    ::Default<DEFAULT_COINSTATSINDEX>;\n+\n+using DbbatchsizeSetting = common::Setting<\n+    \"-dbbatchsize\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Maximum database write batch size in bytes (default: %u)\">\n+    ::HelpArgs<nDefaultDbBatchSize>;\n+\n+using DbcacheSetting = common::Setting<\n+    \"-dbcache=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maximum database cache size <n> MiB (minimum %d, default: %d). Make sure you have enough RAM. In addition, unused memory allocated to the mempool is shared with this cache (see -maxmempool).\">\n+    ::Default<nDefaultDbCache>\n+    ::HelpArgs<nMinDbCache, nDefaultDbCache>;\n+\n+using IncludeconfSetting = common::Setting<\n+    \"-includeconf=<file>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\">;\n+\n+using LoadblockSetting = common::Setting<\n+    \"-loadblock=<file>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Imports blocks from external file on startup\">;\n+\n+using MaxmempoolSetting = common::Setting<\n+    \"-maxmempool=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Keep the transaction memory pool below <n> megabytes (default: %u)\">\n+    ::HelpArgs<DEFAULT_MAX_MEMPOOL_SIZE_MB>;\n+\n+using MaxorphantxSetting = common::Setting<\n+    \"-maxorphantx=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Keep at most <n> unconnectable transactions in memory (default: %u)\">\n+    ::HelpArgs<DEFAULT_MAX_ORPHAN_TRANSACTIONS>;\n+\n+using MempoolexpirySetting = common::Setting<\n+    \"-mempoolexpiry=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true},\n+    \"Do not keep transactions in the mempool longer than <n> hours (default: %u)\">\n+    ::HelpArgs<DEFAULT_MEMPOOL_EXPIRY_HOURS>;\n+\n+using MinimumchainworkSetting = common::Setting<\n+    \"-minimumchainwork=<hex>\", std::optional<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet3: %s, testnet4: %s, signet: %s)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& testnetChainParams, const auto& testnet4ChainParams, const auto& signetChainParams) { return strprintf(fmt, defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnet4ChainParams->GetConsensus().nMinimumChainWork.GetHex(), signetChainParams->GetConsensus().nMinimumChainWork.GetHex()); }>;\n+\n+using ParSetting = common::Setting<\n+    \"-par=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Set the number of script verification threads (0 = auto, up to %d, <0 = leave that many cores free, default: %d)\">\n+    ::Default<DEFAULT_SCRIPTCHECK_THREADS>\n+    ::HelpArgs<MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS>;\n+\n+using PersistmempoolSetting = common::Setting<\n+    \"-persistmempool\", bool, common::SettingOptions{.legacy = true},\n+    \"Whether to save the mempool on shutdown and load on restart (default: %u)\">\n+    ::Default<node::DEFAULT_PERSIST_MEMPOOL>;\n+\n+using Persistmempoolv1Setting = common::Setting<\n+    \"-persistmempoolv1\", bool, common::SettingOptions{.legacy = true},\n+    \"Whether a mempool.dat file created by -persistmempool or the savemempool RPC will be written in the legacy format \"\n+                             \"(version 1) or the current format (version 2). This temporary option will be removed in the future. (default: %u)\">\n+    ::HelpArgs<DEFAULT_PERSIST_V1_DAT>;\n+\n+using PidSetting = common::Setting<\n+    \"-pid=<file>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\">\n+    ::DefaultFn<[] { return BITCOIN_PID_FILENAME; }>;\n+\n+using PruneSetting = common::Setting<\n+    \"-prune=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex. \"\n+            \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\">\n+    ::HelpArgs<MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024>;\n+\n+using ReindexSetting = common::Setting<\n+    \"-reindex\", bool, common::SettingOptions{.legacy = true},\n+    \"If enabled, wipe chain state and block index, and rebuild them from blk*.dat files on disk. Also wipe and rebuild other optional indexes that are active. If an assumeutxo snapshot was loaded, its chainstate will be wiped as well. The snapshot can then be reloaded via RPC.\">;\n+\n+using ReindexChainstateSetting = common::Setting<\n+    \"-reindex-chainstate\", bool, common::SettingOptions{.legacy = true},\n+    \"If enabled, wipe chain state, and rebuild it from blk*.dat files on disk. If an assumeutxo snapshot was loaded, its chainstate will be wiped as well. The snapshot can then be reloaded via RPC.\">;\n+\n+using StartupnotifySetting = common::Setting<\n+    \"-startupnotify=<cmd>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Execute command on startup.\">;\n+\n+using ShutdownnotifySetting = common::Setting<\n+    \"-shutdownnotify=<cmd>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Execute command immediately before beginning shutdown. The need for shutdown may be urgent, so be careful not to delay it long (if the command doesn't require interaction with the server, consider having it fork into the background).\">;\n+\n+using TxindexSetting = common::Setting<\n+    \"-txindex\", bool, common::SettingOptions{.legacy = true},\n+    \"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\">\n+    ::Default<DEFAULT_TXINDEX>;\n+\n+using BlockfilterindexSetting = common::Setting<\n+    \"-blockfilterindex=<type>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Maintain an index of compact filters by block (default: %s, values: %s).\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()); }>;\n+\n+using BlockfilterindexSettingStr = common::Setting<\n+    \"-blockfilterindex=<type>\", std::string, common::SettingOptions{.legacy = true}>\n+    ::DefaultFn<[] { return DEFAULT_BLOCKFILTERINDEX; }>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()); }>;\n+\n+using AddnodeSetting = common::Setting<\n+    \"-addnode=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\">\n+    ::HelpArgs<MAX_ADDNODE_CONNECTIONS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using AsmapSetting = common::Setting<\n+    \"-asmap=<file>\", fs::path, common::SettingOptions{.legacy = true},\n+    \"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\">\n+    ::DefaultFn<[] { return DEFAULT_ASMAP_FILENAME; }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using BantimeSetting = common::Setting<\n+    \"-bantime=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Default duration (in seconds) of manually configured bans (default: %u)\">\n+    ::Default<DEFAULT_MISBEHAVING_BANTIME>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using BindSetting = common::Setting<\n+    \"-bind=<addr>[:<port>][=onion]\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet3: 127.0.0.1:%u=onion, testnet4: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultBaseParams, const auto& testnetBaseParams, const auto& testnet4BaseParams, const auto& signetBaseParams, const auto& regtestBaseParams) { return strprintf(fmt, defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), testnet4BaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using CjdnsreachableSetting = common::Setting<\n+    \"-cjdnsreachable\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"If set, then this host is configured for CJDNS (connecting to fc00::/8 addresses would lead us to the CJDNS network, see doc/cjdns.md) (default: 0)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ConnectSetting = common::Setting<\n+    \"-connect=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using DiscoverSetting = common::Setting<\n+    \"-discover\", bool, common::SettingOptions{.legacy = true},\n+    \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\">\n+    ::Default<true>\n+    ::HelpArgs<>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using DnsSetting = common::Setting<\n+    \"-dns\", bool, common::SettingOptions{.legacy = true},\n+    \"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\">\n+    ::Default<DEFAULT_NAME_LOOKUP>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using DnsseedSetting = common::Setting<\n+    \"-dnsseed\", std::optional<bool>, common::SettingOptions{.legacy = true},\n+    \"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used or -maxconnections=0)\">\n+    ::HelpArgs<DEFAULT_DNSSEED>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ExternalipSetting = common::Setting<\n+    \"-externalip=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Specify your own public address\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using FixedseedsSetting = common::Setting<\n+    \"-fixedseeds\", bool, common::SettingOptions{.legacy = true},\n+    \"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\">\n+    ::Default<DEFAULT_FIXEDSEEDS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ForcednsseedSetting = common::Setting<\n+    \"-forcednsseed\", bool, common::SettingOptions{.legacy = true},\n+    \"Always query for peer addresses via DNS lookup (default: %u)\">\n+    ::Default<DEFAULT_FORCEDNSSEED>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ListenSetting = common::Setting<\n+    \"-listen\", bool, common::SettingOptions{.legacy = true},\n+    \"Accept connections from outside (default: %u if no -proxy, -connect or -maxconnections=0)\">\n+    ::HelpArgs<DEFAULT_LISTEN>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ListenonionSetting = common::Setting<\n+    \"-listenonion\", bool, common::SettingOptions{.legacy = true},\n+    \"Automatically create Tor onion service (default: %d)\">\n+    ::HelpArgs<DEFAULT_LISTEN_ONION>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxconnectionsSetting = common::Setting<\n+    \"-maxconnections=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maintain at most <n> automatic connections to peers (default: %u). This limit does not apply to connections manually added via -addnode or the addnode RPC, which have a separate limit of %u.\">\n+    ::Default<DEFAULT_MAX_PEER_CONNECTIONS>\n+    ::HelpArgs<DEFAULT_MAX_PEER_CONNECTIONS, MAX_ADDNODE_CONNECTIONS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxreceivebufferSetting = common::Setting<\n+    \"-maxreceivebuffer=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\">\n+    ::Default<DEFAULT_MAXRECEIVEBUFFER>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxsendbufferSetting = common::Setting<\n+    \"-maxsendbuffer=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Maximum per-connection memory usage for the send buffer, <n>*1000 bytes (default: %u)\">\n+    ::Default<DEFAULT_MAXSENDBUFFER>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using MaxuploadtargetSetting = common::Setting<\n+    \"-maxuploadtarget=<n>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Tries to keep outbound traffic under the given target per 24h. Limit does not apply to peers with 'download' permission or blocks created within past week. 0 = no limit (default: %s). Optional suffix units [k|K|m|M|g|G|t|T] (default: M). Lowercase is 1000 base while uppercase is 1024 base\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_MAX_UPLOAD_TARGET); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using OnionSetting = common::Setting<\n+    \"-onion=<ip:port|path>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy). May be a local file path prefixed with 'unix:'.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using OnionSetting2 = common::Setting<\n+    \"-onion=<ip:port>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using I2psamSetting = common::Setting<\n+    \"-i2psam=<ip:port>\", std::string, common::SettingOptions{.legacy = true},\n+    \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using I2pacceptincomingSetting = common::Setting<\n+    \"-i2pacceptincoming\", bool, common::SettingOptions{.legacy = true},\n+    \"Whether to accept inbound I2P connections (default: %i). Ignored if -i2psam is not set. Listening for inbound I2P connections is done through the SAM proxy, not by binding to a local address and port.\">\n+    ::Default<DEFAULT_I2P_ACCEPT_INCOMING>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using OnlynetSetting = common::Setting<\n+    \"-onlynet=<net>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Make automatic outbound connections only to network <net> (%s). Inbound and manual connections are not affected by this option. It can be specified multiple times to allow multiple networks.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(GetNetworkNames(), \", \")); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using V2transportSetting = common::Setting<\n+    \"-v2transport\", bool, common::SettingOptions{.legacy = true},\n+    \"Support v2 transport (default: %u)\">\n+    ::Default<DEFAULT_V2_TRANSPORT>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PeerbloomfiltersSetting = common::Setting<\n+    \"-peerbloomfilters\", bool, common::SettingOptions{.legacy = true},\n+    \"Support filtering of blocks and transaction with bloom filters (default: %u)\">\n+    ::Default<DEFAULT_PEERBLOOMFILTERS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PeerblockfiltersSetting = common::Setting<\n+    \"-peerblockfilters\", bool, common::SettingOptions{.legacy = true},\n+    \"Serve compact block filters to peers per BIP 157 (default: %u)\">\n+    ::Default<DEFAULT_PEERBLOCKFILTERS>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TxreconciliationSetting = common::Setting<\n+    \"-txreconciliation\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Enable transaction reconciliations per BIP 330 (default: %d)\">\n+    ::HelpArgs<DEFAULT_TXRECONCILIATION_ENABLE>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PortSetting = common::Setting<\n+    \"-port=<port>\", int64_t, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Listen for connections on <port> (default: %u, testnet3: %u, testnet4: %u, signet: %u, regtest: %u). Not relevant for I2P (see doc/i2p.md).\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& testnetChainParams, const auto& testnet4ChainParams, const auto& signetChainParams, const auto& regtestChainParams) { return strprintf(fmt, defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), testnet4ChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ProxySetting = common::Setting<\n+    \"-proxy=<ip:port|path>\", std::string, common::SettingOptions{.legacy = true, .disallow_elision = true},\n+    \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled). May be a local file path prefixed with 'unix:' if the proxy supports it.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ProxySetting2 = common::Setting<\n+    \"-proxy=<ip:port>\", std::string, common::SettingOptions{.legacy = true, .disallow_elision = true},\n+    \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ProxyrandomizeSetting = common::Setting<\n+    \"-proxyrandomize\", bool, common::SettingOptions{.legacy = true},\n+    \"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\">\n+    ::Default<DEFAULT_PROXYRANDOMIZE>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using SeednodeSetting = common::Setting<\n+    \"-seednode=<ip>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes. During startup, seednodes will be tried before dnsseeds.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using NetworkactiveSetting = common::Setting<\n+    \"-networkactive\", bool, common::SettingOptions{.legacy = true},\n+    \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\">\n+    ::Default<true>\n+    ::HelpArgs<>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TimeoutSetting = common::Setting<\n+    \"-timeout=<n>\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\">\n+    ::Default<DEFAULT_CONNECT_TIMEOUT>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using PeertimeoutSetting = common::Setting<\n+    \"-peertimeout=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\">\n+    ::Default<DEFAULT_PEER_CONNECT_TIMEOUT>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TorcontrolSetting = common::Setting<\n+    \"-torcontrol=<ip>:<port>\", std::string, common::SettingOptions{.legacy = true},\n+    \"Tor control host and port to use if onion listening enabled (default: %s). If no port is specified, the default port of %i will be used.\">\n+    ::DefaultFn<[] { return DEFAULT_TOR_CONTROL; }>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, DEFAULT_TOR_CONTROL, DEFAULT_TOR_CONTROL_PORT); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using TorpasswordSetting = common::Setting<\n+    \"-torpassword=<pass>\", std::string, common::SettingOptions{.legacy = true, .sensitive = true},\n+    \"Tor control port password (default: empty)\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using UpnpSetting = common::Setting<\n+    \"-upnp\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"\">\n+    ::Category<OptionsCategory::HIDDEN>;\n+\n+using NatpmpSetting = common::Setting<\n+    \"-natpmp\", bool, common::SettingOptions{.legacy = true},\n+    \"Use PCP or NAT-PMP to map the listening port (default: %u)\">\n+    ::Default<DEFAULT_NATPMP>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using WhitebindSetting = common::Setting<\n+    \"-whitebind=<[permissions@]addr>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Bind to the given address and add permission flags to the peers connecting to it. \"\n+        \"Use [host]:port notation for IPv6. Allowed permissions: %s. \"\n+        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(NET_PERMISSIONS_DOC, \", \")); }>\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using WhitelistSetting = common::Setting<\n+    \"-whitelist=<[permissions@]IP address or network>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Add permission flags to the peers using the given IP address (e.g. 1.2.3.4) or \"\n+        \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n+        \"-whitebind. \"\n+        \"Additional flags \\\"in\\\" and \\\"out\\\" control whether permissions apply to incoming connections and/or manual (default: incoming only). \"\n+        \"Can be specified multiple times.\">\n+    ::Category<OptionsCategory::CONNECTION>;\n+\n+using ZmqpubhashblockSetting = common::Setting<\n+    \"-zmqpubhashblock=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish hash block in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubhashtxSetting = common::Setting<\n+    \"-zmqpubhashtx=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish hash transaction in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawblockSetting = common::Setting<\n+    \"-zmqpubrawblock=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish raw block in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawtxSetting = common::Setting<\n+    \"-zmqpubrawtx=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish raw transaction in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubsequenceSetting = common::Setting<\n+    \"-zmqpubsequence=<address>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Enable publish hash block and tx sequence in <address>\">\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubhashblockhwmSetting = common::Setting<\n+    \"-zmqpubhashblockhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish hash block outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubhashtxhwmSetting = common::Setting<\n+    \"-zmqpubhashtxhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish hash transaction outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawblockhwmSetting = common::Setting<\n+    \"-zmqpubrawblockhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish raw block outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubrawtxhwmSetting = common::Setting<\n+    \"-zmqpubrawtxhwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish raw transaction outbound message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using ZmqpubsequencehwmSetting = common::Setting<\n+    \"-zmqpubsequencehwm=<n>\", common::Unset, common::SettingOptions{.legacy = true},\n+    \"Set publish hash sequence message high water mark (default: %d)\">\n+    ::HelpArgs<CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM>\n+    ::Category<OptionsCategory::ZMQ>;\n+\n+using CheckblocksSetting = common::Setting<\n+    \"-checkblocks=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"How many blocks to check at startup (default: %u, 0 = all)\">\n+    ::Default<DEFAULT_CHECKBLOCKS>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using ChecklevelSetting = common::Setting<\n+    \"-checklevel=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"How thorough the block verification of -checkblocks is: %s (0-4, default: %u)\">\n+    ::Default<DEFAULT_CHECKLEVEL>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, util::Join(CHECKLEVEL_DOC, \", \"), DEFAULT_CHECKLEVEL); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CheckblockindexSetting = common::Setting<\n+    \"-checkblockindex\", std::optional<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do a consistency check for the block tree, chainstate, and other validation data structures every <n> operations. Use 0 to disable. (default: %u, regtest: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& regtestChainParams) { return strprintf(fmt, defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CheckblockindexSettingInt = common::Setting<\n+    \"-checkblockindex\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true}>;\n+\n+using CheckmempoolSetting = common::Setting<\n+    \"-checkmempool=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Run mempool consistency checks every <n> transactions. Use 0 to disable. (default: %u, regtest: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams, const auto& regtestChainParams) { return strprintf(fmt, defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CheckpointsSetting = common::Setting<\n+    \"-checkpoints\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Enable rejection of any forks from the known historical chain until block %s (default: %u)\">\n+    ::HelpFn<[](const auto& fmt, const auto& defaultChainParams) { return strprintf(fmt, defaultChainParams->Checkpoints().GetHeight(), DEFAULT_CHECKPOINTS_ENABLED); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using DeprecatedrpcSetting = common::Setting<\n+    \"-deprecatedrpc=<method>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Allows deprecated RPC method(s) to be used\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using StopafterblockimportSetting = common::Setting<\n+    \"-stopafterblockimport\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Stop running after importing blocks from disk (default: %u)\">\n+    ::Default<DEFAULT_STOPAFTERBLOCKIMPORT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using StopatheightSetting = common::Setting<\n+    \"-stopatheight\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Stop running after reaching the given height in the main chain (default: %u)\">\n+    ::HelpArgs<node::DEFAULT_STOPATHEIGHT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitancestorcountSetting = common::Setting<\n+    \"-limitancestorcount=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\">\n+    ::HelpArgs<DEFAULT_ANCESTOR_LIMIT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitancestorsizeSetting = common::Setting<\n+    \"-limitancestorsize=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\">\n+    ::HelpArgs<DEFAULT_ANCESTOR_SIZE_LIMIT_KVB>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitdescendantcountSetting = common::Setting<\n+    \"-limitdescendantcount=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\">\n+    ::HelpArgs<DEFAULT_DESCENDANT_LIMIT>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using LimitdescendantsizeSetting = common::Setting<\n+    \"-limitdescendantsize=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\">\n+    ::HelpArgs<DEFAULT_DESCENDANT_SIZE_LIMIT_KVB>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using CapturemessagesSetting = common::Setting<\n+    \"-capturemessages\", std::optional<bool>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Capture all P2P messages to disk\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using MocktimeSetting = common::Setting<\n+    \"-mocktime=<n>\", int64_t, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Replace actual time with %s (default: 0)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, UNIX_EPOCH_TIME); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using MaxsigcachesizeSetting = common::Setting<\n+    \"-maxsigcachesize=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\">\n+    ::HelpArgs<(DEFAULT_VALIDATION_CACHE_BYTES >> 20)>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using MaxtipageSetting = common::Setting<\n+    \"-maxtipage=<n>\", std::optional<int64_t>, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Maximum tip age in seconds to consider node in initial block download (default: %u)\">\n+    ::HelpArgs<Ticks<std::chrono::seconds>(DEFAULT_MAX_TIP_AGE)>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using PrintprioritySetting = common::Setting<\n+    \"-printpriority\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Log transaction fee rate in %s/kvB when mining blocks (default: %u)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, node::DEFAULT_PRINT_MODIFIED_FEE); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using UacommentSetting = common::Setting<\n+    \"-uacomment=<cmt>\", std::vector<std::string>, common::SettingOptions{.legacy = true},\n+    \"Append comment to the user agent string\">\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using AcceptnonstdtxnSetting = common::Setting<\n+    \"-acceptnonstdtxn\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Relay and mine \\\"non-standard\\\" transactions (test networks only; default: %u)\">\n+    ::Default<DEFAULT_ACCEPT_NON_STD_TXN>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using IncrementalrelayfeeSetting = common::Setting<\n+    \"-incrementalrelayfee=<amt>\", std::string, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Fee rate (in %s/kvB) used to define cost of relay, used for mempool limiting and replacement policy. (default: %s)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)); }>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using DustrelayfeeSetting = common::Setting<\n+    \"-dustrelayfee=<amt>\", std::string, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Fee rate (in %s/kvB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)); }>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using AcceptstalefeeestimatesSetting = common::Setting<\n+    \"-acceptstalefeeestimates\", bool, common::SettingOptions{.legacy = true, .debug_only = true},\n+    \"Read fee estimates even if they are stale (%sdefault: %u) fee estimates are considered stale if they are %s hours old\">\n+    ::Default<DEFAULT_ACCEPT_STALE_FEE_ESTIMATES>\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, \"regtest only; \", DEFAULT_ACCEPT_STALE_FEE_ESTIMATES, Ticks<std::chrono::hours>(MAX_FILE_AGE)); }>\n+    ::Category<OptionsCategory::DEBUG_TEST>;\n+\n+using BytespersigopSetting = common::Setting<\n+    \"-bytespersigop\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\">\n+    ::DefaultFn<[] { return nBytesPerSigOp; }>\n+    ::HelpArgs<DEFAULT_BYTES_PER_SIGOP>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using DatacarrierSetting = common::Setting<\n+    \"-datacarrier\", bool, common::SettingOptions{.legacy = true},\n+    \"Relay and mine data carrier transactions (default: %u)\">\n+    ::Default<DEFAULT_ACCEPT_DATACARRIER>\n+    ::Category<OptionsCategory::NODE_RELAY>;\n+\n+using DatacarriersizeSetting = common::Setting<\n+    \"-datacarriersize\", int64_t, common::SettingOptions{.legacy = true},\n+    \"Relay and mine transactions whose data-carrying raw scriptPubKey \"\n+                             \"is of this size or less (default: %u)\">",
      "path": "src/init_settings.h",
      "position": 1,
      "original_position": 766,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878117611,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878117611\r\n\r\n> in other cases we wrote out the lines:\r\n\r\nI'm not sure how to implement this suggestion in the scripted diff, and I'm not sure it necessarily would be worth the effort. I guess I could change this in earlier commit 537caa82a66392b0bc010d3a4de9b303e1ce59ab, though. Will make a note.",
      "created_at": "2024-12-11T23:51:18Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881169917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881169917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 765,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 762,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881171401",
      "pull_request_review_id": 2496920898,
      "id": 1881171401,
      "node_id": "PRRC_kwDOABII585wIGXJ",
      "diff_hunk": "@@ -1497,19 +1458,19 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Requesting DNS seeds entails connecting to IPv4/IPv6, which -onlynet options may prohibit:\n     // If -dnsseed=1 is explicitly specified, abort. If it's left unspecified by the user, we skip\n     // the DNS seeds by adjusting -dnsseed in InitParameterInteraction.\n-    if (args.GetBoolArg(\"-dnsseed\") == true && !g_reachable_nets.Contains(NET_IPV4) && !g_reachable_nets.Contains(NET_IPV6)) {\n+    if (DnsseedSetting::Get(args) == true && !g_reachable_nets.Contains(NET_IPV4) && !g_reachable_nets.Contains(NET_IPV6)) {",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 843,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878131657,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878117611\r\n\r\n> Does it still make sense to do `== true`?\r\n\r\nThis isn't the clearest way to write the code but the scripted diff can't change this without changing behavior because this is calling a retrieval function that returns std::optional (both before and after the change).\r\n",
      "created_at": "2024-12-11T23:53:55Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881171401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881171401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881177641",
      "pull_request_review_id": 2496920898,
      "id": 1881177641,
      "node_id": "PRRC_kwDOABII585wIH4p",
      "diff_hunk": "@@ -926,40 +886,40 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n-    if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n+    if (V2transportSetting::Get(args)) {\n         g_local_services = ServiceFlags(g_local_services | NODE_P2P_V2);\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (PeerblockfiltersSetting::Get(args)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n \n         g_local_services = ServiceFlags(g_local_services | NODE_COMPACT_FILTERS);\n     }\n \n-    if (args.GetIntArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (PruneSetting::Get(args, 0)) {\n+        if (TxindexSetting::Get(args))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-reindex-chainstate\", false)) {\n+        if (ReindexChainstateSetting::Get(args)) {\n             return InitError(_(\"Prune mode is incompatible with -reindex-chainstate. Use full -reindex instead.\"));\n         }\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false\n-    if (args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED) && !args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)){\n+    if (ForcednsseedSetting::Get(args) && !DnsseedSetting::Get(args, DEFAULT_DNSSEED)){",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 571,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850692509,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1878137172\r\n\r\n> I'm also having trouble with these defaults\r\n\r\nHopefully it should be obvious that behavior is not changing:\r\n\r\n- `ForceDnsSeedSetting::Get(args)` returns the same thing as `args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED)` because of the type and default value specified in the `ForceDnsSeedSetting` definition\r\n- `DnsSeedSetting::Get(args, DEFAULT_DNSSEED)` returns the same thing as `args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)` because of the type and default value specified in the `DnsSeedSetting` definition\r\n\r\nBut let me know if there is something else you would like to know!",
      "created_at": "2024-12-12T00:02:46Z",
      "updated_at": "2024-12-12T00:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881177641",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881177641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881823636",
      "pull_request_review_id": 2476736939,
      "id": 1881823636,
      "node_id": "PRRC_kwDOABII585wKlmU",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 35,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n*developer-notes.md* state:\r\n> Braces on new lines for classes, functions, methods.\r\n\r\nclang-format tolerates `{}` though.\r\n```suggestion\r\n    constexpr StringLiteral(const char (&str)[N])\r\n    {\r\n        std::copy_n(str, N, value);\r\n    }\r\n    constexpr StringLiteral(std::nullptr_t) {}\r\n```\r\n\r\nSimilar story for `class SettingTest`.\r\n\r\nRunning\r\n```\r\ngit diff -U0 HEAD~9.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\r\n```\r\notherwise shows mainly\r\n```diff\r\n-template<\r\n+template <\r\n```\r\nas something I would recommend.",
      "created_at": "2024-12-12T10:42:47Z",
      "updated_at": "2024-12-12T14:46:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1881823636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1881823636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882154802",
      "pull_request_review_id": 2476736939,
      "id": 1882154802,
      "node_id": "PRRC_kwDOABII585wL2cy",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare name, type, and behavior of command\n+//! line and configuration settings.\n+//!\n+//! The template takes 4 parameters meant to be specified by users, followed by\n+//! additional parameters that are used internally.\n+//!\n+//! @tparam summary string like \"-fastprune\" or \"-blocksdir=<dir>\" with the\n+//!     name of the setting and optional argument information\n+//!\n+//! @tparam T type of the setting. Accepts simple types like bool, int, and\n+//!     std::string, or and composite types like std::optional<std::string> or\n+//!     std::vector<int>.\n+//!\n+//! @tparam options SettingOptions instance specifying additional options to\n+//!        apply to this setting.\n+//!\n+//! @tparam help optional help string describing purpose and behavior of the\n+//!     setting. It can be a formatted string accepting printf-style % arguments,\n+//!     which can be formatted at runtime using HelpFn/HelpArgs or\n+//!     DefaultFn/DefaultArgs features (described below).\n+//!\n+//! Setting template class definiting-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;\n+\n+    static void Register(ArgsManager& manager, auto&&... register_options)\n+    {\n+        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\n+    }\n+\n+    static T Get(const ArgsManager& manager)\n+    {\n+        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\n+    }\n+\n+    static value_t Get(const ArgsManager& manager, const value_t& default_value)\n+    {\n+        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\n+    }\n+\n+    static SettingsValue Value(const ArgsManager& manager)\n+    {\n+        return internal::SettingGet<SettingsValue, options>(manager, summary.value, nullptr, nullptr);\n+    }\n+\n+    //! HelpFn accessor specifying a lambda or callback function that can format the\n+    //! help string. The function should take the format string as an argument,\n+    //! plus any optional register_options passed to the Register method, and\n+    //! return a formatted std::string.\n+    template<auto _help_fn>\n+    using HelpFn = Setting<summary, T, options, help, _help_fn, default_fn, get_fn, category>;\n+    //! HelpArgs accessor which is a simpler alternative to HelpFn and can be\n+    //! used with the format string does not require any runtime values. It\n+    //! accept a list of constexpr values, and calls tinyformat to format the\n+    //! help string with those values.\n+    template<auto... args>\n+    using HelpArgs = HelpFn<internal::HelpFormat<args...>{}>;\n+    template<auto _default>\n+    //! Default accessor which sets a default value for the Setting. The\n+    //! specified value will be returned by Setting::Get calls if the setting\n+    //! was not specified in the command line, config file, or settings.json\n+    //! file. The specified value will also be substituted in the help string if\n+    //! HelpArgs or HelpFn are not specified.\n+    using Default = Setting<summary, T, options, help, help_fn, internal::Constant<_default>{}, get_fn, category>;",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 110,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`template`-parts of the declarations start to dangle above the comment for the rest of the expressions here.\r\n```suggestion\r\n    //! Default accessor which sets a default value for the Setting. The\r\n    //! specified value will be returned by Setting::Get calls if the setting\r\n    //! was not specified in the command line, config file, or settings.json\r\n    //! file. The specified value will also be substituted in the help string if\r\n    //! HelpArgs or HelpFn are not specified.\r\n    template <auto _default>\r\n    using Default = Setting<summary, T, options, help, help_fn, internal::Constant<_default>{}, get_fn, category>;\r\n```",
      "created_at": "2024-12-12T13:46:29Z",
      "updated_at": "2024-12-12T14:46:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882154802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882154802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 104,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882160658",
      "pull_request_review_id": 2476736939,
      "id": 1882160658,
      "node_id": "PRRC_kwDOABII585wL34S",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 28,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Brace on same line according to *developer-notes.md*, here and further down.\r\n```suggestion\r\nstruct SettingTraitsBase {\r\n```",
      "created_at": "2024-12-12T13:48:20Z",
      "updated_at": "2024-12-12T14:46:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882160658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882160658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882189576",
      "pull_request_review_id": 2499737249,
      "id": 1882189576,
      "node_id": "PRRC_kwDOABII585wL-8I",
      "diff_hunk": "@@ -25,11 +27,11 @@ using util::SplitString;\n \n void ReadSigNetArgs(const ArgsManager& args, CChainParams::SigNetOptions& options)\n {\n-    if (args.IsArgSet(\"-signetseednode\")) {\n-        options.seeds.emplace(args.GetArgs(\"-signetseednode\"));\n+    if (!SignetseednodeSetting::Value(args).isNull()) {",
      "path": "src/chainparams.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877946605,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice, adding sensible default values is indeed a lot better than checking if it was set or not.\r\nCan you make this PR a draft until the dependent PRs are merged to signal that this isn't its final form?",
      "created_at": "2024-12-12T14:03:30Z",
      "updated_at": "2024-12-12T14:03:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882189576",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882189576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882192063",
      "pull_request_review_id": 2499741057,
      "id": 1882192063,
      "node_id": "PRRC_kwDOABII585wL_i_",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;",
      "path": "src/common/setting.h",
      "position": 82,
      "original_position": 49,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877951686,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I hinted at the IDE complaining since I could exactly find out why this was necessary - if you can't see the value in it either, please resolve this comment.",
      "created_at": "2024-12-12T14:05:03Z",
      "updated_at": "2024-12-12T14:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882192063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882192063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882225421",
      "pull_request_review_id": 2476736939,
      "id": 1882225421,
      "node_id": "PRRC_kwDOABII585wMHsN",
      "diff_hunk": "@@ -288,8 +296,8 @@ fs::path ArgsManager::GetBlocksDirPath() const\n     // this function\n     if (!path.empty()) return path;\n \n-    if (IsArgSet(\"-blocksdir\")) {\n-        path = fs::absolute(GetPathArg(\"-blocksdir\"));\n+    if (!BlocksDirSetting::Value(*this).isNull()) {\n+        path = fs::absolute(BlocksDirSettingPath::Get(*this));",
      "path": "src/common/args.cpp",
      "position": 36,
      "original_position": 36,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure what to make of `BlocksDirSetting`/`BlocksDirSettingPath` pairs..\r\n- `BlocksdirSettingPath` is not registered to avoid collisions.\r\n- I guess you are avoidant when it comes to adding types.. but this seems worse.\r\n\r\nWould suggest:\r\n```suggestion\r\n    if (!BlocksDirSetting::Value(*this).isNull()) {\r\n        path = fs::absolute(BlocksDirSetting::Get(*this));\r\n```\r\nand having `BlocksDirSetting` contain an `fs::path` directly.",
      "created_at": "2024-12-12T14:17:29Z",
      "updated_at": "2024-12-12T14:46:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882225421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882225421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 305,
      "original_start_line": 299,
      "start_side": "RIGHT",
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882266574",
      "pull_request_review_id": 2499848992,
      "id": 1882266574,
      "node_id": "PRRC_kwDOABII585wMRvO",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#ifndef BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+#define BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+\n+#include <chainparamsbase.h>\n+#include <common/setting.h>\n+\n+#include <string>\n+#include <vector>\n+\n+using SignetseednodeSetting = common::Setting<",
      "path": "src/chainparamsbase_settings.h",
      "position": 1,
      "original_position": 10,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877966780,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The part that bothers me is that this seems \"Stringly-Typed\" this way, global scoped and the user doesn't even have proper code completion since there isn't a common prefix or namespace or enum to narrow the options for code completion as far as I can tell.\r\nI'm not recommending a top level settings (but even that would be better than these globals), but rather targeted nested namespaces (e.g., wallet::setting, init::setting) or something that would group these in a way that the compiler understands instead of just having a naming convention.\r\n\r\n> Also BlocksDirSetting::Get reads better to me than Setting::BlocksDir::Get\r\n\r\nWhat about inverting it and making the `Get` method accept different types based on the context, something like: `Init::Setting::Get<TestActivationHeight>(args)`? I haven't thought this through (I can't meaningfully review a change this big, we need to find a way to narrow it down), I'm just wondering how we could make the compiler work for us instead of coming up with special names.",
      "created_at": "2024-12-12T14:38:22Z",
      "updated_at": "2024-12-12T14:38:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882266574",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882266574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882267739",
      "pull_request_review_id": 2499850610,
      "id": 1882267739,
      "node_id": "PRRC_kwDOABII585wMSBb",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else if constexpr (!std::is_same_v<decltype(help.value), std::nullptr_t>) {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 160,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877971170,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we introduce it in the PR that will actually need it instead?",
      "created_at": "2024-12-12T14:39:00Z",
      "updated_at": "2024-12-12T14:39:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882267739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882267739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882273623",
      "pull_request_review_id": 2499858590,
      "id": 1882273623,
      "node_id": "PRRC_kwDOABII585wMTdX",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878005160,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doesn't this signal that the design is lacking a properly typed system? The compiler should be able to warn us of those missing conditions/cases (though I'm overwhelmed here and can't recommend anything more concrete yet).",
      "created_at": "2024-12-12T14:41:13Z",
      "updated_at": "2024-12-12T14:41:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882273623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882273623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882282732",
      "pull_request_review_id": 2499869271,
      "id": 1882282732,
      "node_id": "PRRC_kwDOABII585wMVrs",
      "diff_hunk": "@@ -137,14 +132,14 @@ int main(int argc, char** argv)\n \n     try {\n         benchmark::Args args;\n-        args.asymptote = parseAsymptote(argsman.GetArg(\"-asymptote\", \"\"));\n-        args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n-        args.min_time = std::chrono::milliseconds(argsman.GetIntArg(\"-min-time\", DEFAULT_MIN_TIME_MS));\n-        args.output_csv = argsman.GetPathArg(\"-output-csv\");\n-        args.output_json = argsman.GetPathArg(\"-output-json\");\n-        args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n-        args.sanity_check = argsman.GetBoolArg(\"-sanity-check\", false);\n-        args.priority = parsePriorityLevel(argsman.GetArg(\"-priority-level\", DEFAULT_PRIORITY));\n+        args.asymptote = parseAsymptote(AsymptoteSetting::Get(argsman));",
      "path": "src/bench/bench_bitcoin.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878015143,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand that often search and replace can change a lot of code and is very convenient for the author, but all those unrelated changes are very hard to review.\r\nWould it be possible to go end-to-end for a very narrow part of the settings and slowly strangle out the old version (i.e. depth-first-search instead of breadth first search)?",
      "created_at": "2024-12-12T14:43:56Z",
      "updated_at": "2024-12-12T14:43:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882282732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882282732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882284933",
      "pull_request_review_id": 2499872627,
      "id": 1882284933,
      "node_id": "PRRC_kwDOABII585wMWOF",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878016256,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just meant `constexpr` and brace init here (but at least consistency with the other lines here)",
      "created_at": "2024-12-12T14:45:04Z",
      "updated_at": "2024-12-12T14:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882284933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882284933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882287135",
      "pull_request_review_id": 2499876047,
      "id": 1882287135,
      "node_id": "PRRC_kwDOABII585wMWwf",
      "diff_hunk": "@@ -15,11 +15,11 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-REGEX_ARG = r'\\b(?:GetArg|GetArgs|GetBoolArg|GetIntArg|GetPathArg|IsArgSet|get_net)\\(\"(-[^\"]+)\"'\n-REGEX_DOC = r'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n+REGEX_ARG = r'([A-Za-z0-9]+Setting)::Get'",
      "path": "test/lint/check-doc.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878053891,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you keep it, please consider my suggestions above",
      "created_at": "2024-12-12T14:46:20Z",
      "updated_at": "2024-12-12T14:46:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882287135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882287135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882288553",
      "pull_request_review_id": 2499878206,
      "id": 1882288553,
      "node_id": "PRRC_kwDOABII585wMXGp",
      "diff_hunk": "@@ -8,14 +8,15 @@\n #include <common/args.h>\n #include <key_io.h>\n #include <logging.h>\n+#include <wallet/init_settings.h>\n \n namespace wallet {\n fs::path GetWalletDir()\n {\n     fs::path path;\n \n-    if (gArgs.IsArgSet(\"-walletdir\")) {\n-        path = gArgs.GetPathArg(\"-walletdir\");\n+    if (!WalletdirSetting::Value(gArgs).isNull()) {\n+        path = WalletdirSetting::Get(gArgs);\n         if (!fs::is_directory(path)) {",
      "path": "src/wallet/walletutil.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878056041,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Absolutely, low and high risk changes should be intertwined",
      "created_at": "2024-12-12T14:47:07Z",
      "updated_at": "2024-12-12T14:47:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882288553",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882288553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882293351",
      "pull_request_review_id": 2499885281,
      "id": 1882293351,
      "node_id": "PRRC_kwDOABII585wMYRn",
      "diff_hunk": "@@ -459,7 +460,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n \n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n-        if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n+        if (OnionSetting::Get(gArgs) == \"\") {",
      "path": "src/torcontrol.cpp",
      "position": 22,
      "original_position": 26,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878078140,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So is `== \"\"` the same as checking if the value was set? If so, we could use that here as well",
      "created_at": "2024-12-12T14:49:44Z",
      "updated_at": "2024-12-12T14:49:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882293351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882293351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 472,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882302749",
      "pull_request_review_id": 2499898678,
      "id": 1882302749,
      "node_id": "PRRC_kwDOABII585wMakd",
      "diff_hunk": "@@ -3809,7 +3810,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n     size_t nMessageSize = msg.data.size();\n     LogDebug(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());\n-    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+    if (CapturemessagesSetting::Get(gArgs, false)) {",
      "path": "src/net.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878112735,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't see the value of scripted diffs when something is this complicated - the code should probably be pre-processed and refactored so that the scripted diffs don't have any exceptional cases.",
      "created_at": "2024-12-12T14:52:21Z",
      "updated_at": "2024-12-12T14:52:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882302749",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1882302749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3813,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884511124",
      "pull_request_review_id": 2503194507,
      "id": 1884511124,
      "node_id": "PRRC_kwDOABII585wU1uU",
      "diff_hunk": "@@ -25,11 +27,11 @@ using util::SplitString;\n \n void ReadSigNetArgs(const ArgsManager& args, CChainParams::SigNetOptions& options)\n {\n-    if (args.IsArgSet(\"-signetseednode\")) {\n-        options.seeds.emplace(args.GetArgs(\"-signetseednode\"));\n+    if (!SignetseednodeSetting::Value(args).isNull()) {",
      "path": "src/chainparams.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877946605,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882189576\r\n\r\n> Can you make this PR a draft until the dependent PRs are merged to signal that this isn't its final form?\r\n\r\nThis PR is ready to review, doesn't have any dependent PRs, and is not a draft, though it is possible I may split some of the initial commits here off into another PR, and in that case I will mark this as a draft.\r\n\r\nThere isn't much intersection between this PR and #30529, except that if #30529 gets merged before this PR (which I assume it will), then this line in the scripted diff output will disappear.",
      "created_at": "2024-12-13T20:31:42Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884511124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884511124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884512410",
      "pull_request_review_id": 2503194507,
      "id": 1884512410,
      "node_id": "PRRC_kwDOABII585wU2Ca",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;",
      "path": "src/common/setting.h",
      "position": 82,
      "original_position": 49,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877951686,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882192063\r\n\r\n> I hinted at the IDE complaining since I could exactly find out why this was necessary - if you can't see the value in it either, please resolve this comment.\r\n\r\nNo problem, thanks for clarifying and thanks for the hint!",
      "created_at": "2024-12-13T20:33:02Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884512410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884512410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884522257",
      "pull_request_review_id": 2503194507,
      "id": 1884522257,
      "node_id": "PRRC_kwDOABII585wU4cR",
      "diff_hunk": "@@ -0,0 +1,56 @@\n+#ifndef BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+#define BITCOIN_CHAINPARAMSBASE_SETTINGS_H\n+\n+#include <chainparamsbase.h>\n+#include <common/setting.h>\n+\n+#include <string>\n+#include <vector>\n+\n+using SignetseednodeSetting = common::Setting<",
      "path": "src/chainparamsbase_settings.h",
      "position": 1,
      "original_position": 10,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877966780,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882266574\r\n\r\n> The part that bothers me is that this seems \"Stringly-Typed\" this way, global scoped and the user doesn't even have proper code completion since there isn't a common prefix or namespace or enum to narrow the options for code completion as far as I can tell.\r\n\r\nThat's a good point. I think better code completion is a real reason to want to group these identifiers. I will try to implement that in my next push, probably using `namespace settings` nested in any existing namespaces. Sorry for resisting before, I think I just really didn't like the ambiguity of having a class and namespace with the same name.\r\n\r\nOn the inversion idea writing `Get<TestActivationHeight>` instead of `TestActivationHeight::Get`, it wouldn't be my preference just because of the template syntax, but it seems fine if other reviewers prefer it or it solves other problems.",
      "created_at": "2024-12-13T20:43:19Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884522257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884522257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884534140",
      "pull_request_review_id": 2503194507,
      "id": 1884534140,
      "node_id": "PRRC_kwDOABII585wU7V8",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else if constexpr (!std::is_same_v<decltype(help.value), std::nullptr_t>) {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 160,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1877971170,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882267739\r\n\r\n> Could we introduce it in the PR that will actually need it instead?\r\n\r\nI don't want to introduce an inconsistency and make options inaccessible to code which needs to use it, encouraging hackier less consistent ways of passing options around. I'll just move it to the setting traits class so it will be used.",
      "created_at": "2024-12-13T20:56:32Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884534140",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884534140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884539442",
      "pull_request_review_id": 2503194507,
      "id": 1884539442,
      "node_id": "PRRC_kwDOABII585wU8oy",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878005160,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882273623\r\n\r\n> Doesn't this signal that the design is lacking a properly typed system? The compiler should be able to warn us of those missing conditions/cases (though I'm overwhelmed here and can't recommend anything more concrete yet).\r\n\r\nI don't really know what you mean by this, but there is a lot going on in this PR so I think I think it should become less overwhelming when the bigger picture comes into focus. There are no missing conditions/cases, though. Everything is type safe. You can write the same code with template specialization or with if statements, and I'm just saying here template specialization will lead to less repetition in followup changes which add more traits methods.",
      "created_at": "2024-12-13T21:02:35Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884539442",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884539442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884552205",
      "pull_request_review_id": 2503194507,
      "id": 1884552205,
      "node_id": "PRRC_kwDOABII585wU_wN",
      "diff_hunk": "@@ -137,14 +132,14 @@ int main(int argc, char** argv)\n \n     try {\n         benchmark::Args args;\n-        args.asymptote = parseAsymptote(argsman.GetArg(\"-asymptote\", \"\"));\n-        args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n-        args.min_time = std::chrono::milliseconds(argsman.GetIntArg(\"-min-time\", DEFAULT_MIN_TIME_MS));\n-        args.output_csv = argsman.GetPathArg(\"-output-csv\");\n-        args.output_json = argsman.GetPathArg(\"-output-json\");\n-        args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n-        args.sanity_check = argsman.GetBoolArg(\"-sanity-check\", false);\n-        args.priority = parsePriorityLevel(argsman.GetArg(\"-priority-level\", DEFAULT_PRIORITY));\n+        args.asymptote = parseAsymptote(AsymptoteSetting::Get(argsman));",
      "path": "src/bench/bench_bitcoin.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878015143,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882282732\r\n\r\n> I understand that often search and replace can change a lot of code and is very convenient for the author, but all those unrelated changes are very hard to review. \r\n\r\nI don't think I understand what the unrelated changes are. The only changes in this commit are replacing GetArgs calls with equivalent Get calls, AddArgs calls with equivalent Register calls.\r\n\r\n> Would it be possible to go end-to-end for a very narrow part of the settings and slowly strangle out the old version (i.e. depth-first-search instead of breadth first search)?\r\n\r\nIf I'm understanding the request correctly, you want to see what parsing/validation/normalization behavior looks like in combination with this PR for a narrow set of settings. I think you can look at https://github.com/ryanofsky/bitcoin/blob/pr/argtype/src/test/argsman_tests.cpp from #22978 for an idea of that. And I am happy to update that branch because it precedes this PR and is somewhat stale at this point.\r\n\r\nI think it is important to be clear about the relationship between this PR and #22978 though. This PR is not changing any functionality or providing any new behavior. It is only doing a mechanical search and replace of GetArgs with Get calls and AddArgs with Register calls, so that settings can be accessed from a type-safe API  and will have associated types and default values. #22978 implements various new pieces of functionality on top of the type-safe API.\r\n\r\n\r\n",
      "created_at": "2024-12-13T21:17:19Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884552205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884552205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884562096",
      "pull_request_review_id": 2503194507,
      "id": 1884562096,
      "node_id": "PRRC_kwDOABII585wVCKw",
      "diff_hunk": "@@ -288,8 +296,8 @@ fs::path ArgsManager::GetBlocksDirPath() const\n     // this function\n     if (!path.empty()) return path;\n \n-    if (IsArgSet(\"-blocksdir\")) {\n-        path = fs::absolute(GetPathArg(\"-blocksdir\"));\n+    if (!BlocksDirSetting::Value(*this).isNull()) {\n+        path = fs::absolute(BlocksDirSettingPath::Get(*this));",
      "path": "src/common/args.cpp",
      "position": 36,
      "original_position": 36,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "in_reply_to_id": 1882225421,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882225421\r\n\r\n> Not sure what to make of `BlocksDirSetting`/`BlocksDirSettingPath` pairs..\r\n>\r\n> I guess you are avoidant when it comes to adding types.. but this seems worse.\r\n\r\nThese changes just come from scripted-diff trying not to change behavior in any way, but I can add a new commit before the scripted diff to avoid creation of ConfSettingPath, DataDirSettingPath, and BlocksDirSettingPath types.\r\n\r\nThese types are created because current code is inconsistent about using GetArg and GetPathArg when retrieving these settings, so the script needs to be conservative and declaring separate types for the inconsistent retrievals.\r\n\r\nPart of the point of this PR is to uncover inconsistencies like this, so thanks for noticing it!",
      "created_at": "2024-12-13T21:28:51Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884562096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884562096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 305,
      "original_start_line": 299,
      "start_side": "RIGHT",
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884575950",
      "pull_request_review_id": 2503194507,
      "id": 1884575950,
      "node_id": "PRRC_kwDOABII585wVFjO",
      "diff_hunk": "@@ -459,7 +460,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n \n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n-        if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n+        if (OnionSetting::Get(gArgs) == \"\") {",
      "path": "src/torcontrol.cpp",
      "position": 22,
      "original_position": 26,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878078140,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882293351\r\n\r\n> So is `== \"\"` the same as checking if the value was set? If so, we could use that here as well\r\n\r\nMaybe we are talking past each other with different terminology, but the point of allowing the settings framework to specify default values is to avoid needing to care whether a setting was set or unset. The setting can simply be retrieved and if the user did not set a value, the framework can provide an appropriate default.\r\n\r\nSo I guess I would answer the question as no. The == \"\" check is just checking if the setting is empty, not checking if it is set. The setting might have been unset or it might have been set by the user to empty, and the code retrieving the setting should not care which of these was the case.",
      "created_at": "2024-12-13T21:45:29Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884575950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884575950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 472,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884581409",
      "pull_request_review_id": 2503194507,
      "id": 1884581409,
      "node_id": "PRRC_kwDOABII585wVG4h",
      "diff_hunk": "@@ -3809,7 +3810,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n     size_t nMessageSize = msg.data.size();\n     LogDebug(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());\n-    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+    if (CapturemessagesSetting::Get(gArgs, false)) {",
      "path": "src/net.cpp",
      "position": 1,
      "original_position": 80,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878112735,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1882302749\r\n\r\n> I don't see the value of scripted diffs when something is this complicated - the code should probably be pre-processed and refactored so that the scripted diffs don't have any exceptional cases.\r\n\r\nThe change you are suggesting would not be possible to make without a script. If you create a PR where you have manually gone through `GetArg` calls in the codebase and looked at what default values they were passed, and then moved those default values into a settings definition in a separate header when those default values were all the same, but left them in place when they were not all the same, the repeated this for 200 settings in the codebase, the result would be inevitably buggy because there is no way a human being could make those changes reliably. The changes would also be basically impossible to review, and the PR would also be difficult to rebase and update correctly as GetArg calls were added and removed from the codebase.\r\n\r\nA script is the way to make these changes reliably in a way that is possible to review and update.",
      "created_at": "2024-12-13T21:52:05Z",
      "updated_at": "2024-12-13T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1884581409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884581409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3813,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959703860",
      "pull_request_review_id": 2623495377,
      "id": 1959703860,
      "node_id": "PRRC_kwDOABII5850zrU0",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "shouldn't this be using `DefaultFn<[] { return FormatOutputType(DEFAULT_ADDRESS_TYPE); }>` instead?\r\n\r\nThe benefits would be:\r\n\r\n* Code consistency: Integral settings mostly have their default or default fn set, however std::string values do not.\r\n* Parsing consistency: Any parsing (and sanity checking) could happen on the returned string directly, meaning that special casing the fallback-case would no longer be needed and the fallback value would be sanity checked like any other user-provided string. I understand that any sanity check during the parsing is never expected to fail, but I don't see the downside when it is cheap and the code is clearer as well.",
      "created_at": "2025-02-18T13:01:48Z",
      "updated_at": "2025-02-18T13:08:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959703860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959703860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959711651",
      "pull_request_review_id": 2623495377,
      "id": 1959711651,
      "node_id": "PRRC_kwDOABII5850ztOj",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AvoidPartialSpendsSetting = common::Setting<\n+    \"-avoidpartialspends\", bool, common::SettingOptions{.legacy = true},\n+    \"Group outputs by address, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as addresses are mostly swept with fewer transactions and outputs are aggregated in clean change addresses. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a larger-than-necessary number of inputs being used. Always enabled for wallets with \\\"avoid_reuse\\\" enabled, otherwise default: %u.\">\n+    ::DefaultFn<[] { return DEFAULT_AVOIDPARTIALSPENDS; }>\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using ChangeTypeSetting = common::Setting<\n+    \"-changetype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\"). Default is \\\"legacy\\\" when \"\n+                   \"-addresstype=legacy, else it is an implementation detail.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using ConsolidateFeeRateSetting = common::Setting<\n+    \"-consolidatefeerate=<amt>\", std::string, common::SettingOptions{.legacy = true},\n+    \"The maximum feerate (in %s/kvB) at which transaction building may use more inputs than strictly necessary so that the wallet's UTXO pool can be reduced (default: %s).\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DEFAULT_CONSOLIDATE_FEERATE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similar feedback here: The default value seems like one that could have been provided by a user, so there should be no risk in setting it via `DefaultFn` and having it be the default. (With the added benefits already mentioned).\r\n\r\nThis means that the `HelpFn` would (ideally) have a way to query the default value as well. Maybe it is possible to pass the settings object instead of `fmt` and then use it to access `fmt` and the default value?",
      "created_at": "2025-02-18T13:06:26Z",
      "updated_at": "2025-02-18T13:08:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959711651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959711651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959977366",
      "pull_request_review_id": 2623972209,
      "id": 1959977366,
      "node_id": "PRRC_kwDOABII58500uGW",
      "diff_hunk": "@@ -1262,15 +1247,15 @@ static int CommandLineRPC(int argc, char *argv[])\n         gArgs.CheckMultipleCLIArgs();\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.IsArgSet(\"-getinfo\")) {\n+        if (!GetInfoSetting::Value(gArgs).isNull()) {",
      "path": "src/bitcoin-cli.cpp",
      "position": 1,
      "original_position": 235,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I find the `!Value(gArgs).isNull()` with the double negation and verbosity over just `Get(gArgs)` a bit ugly and I think it would be better to remove `IsArgSet` as much as possible. In most cases it is not needed anyway, or used incorrectly. About this one, I left a comment here: https://github.com/bitcoin/bitcoin/pull/31887/files#r1959923000",
      "created_at": "2025-02-18T15:25:47Z",
      "updated_at": "2025-02-18T15:25:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959977366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1959977366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1960725979",
      "pull_request_review_id": 2625238938,
      "id": 1960725979,
      "node_id": "PRRC_kwDOABII58503k3b",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": 1959703860,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959703860\r\n\r\n> shouldn't this be using `DefaultFn<[] { return FormatOutputType(DEFAULT_ADDRESS_TYPE); }>` instead?\r\n\r\nYes that would probably make sense as a followup. This scripted-diff can't make that replacement, because the only default value it actually [sees being used](https://github.com/bitcoin/bitcoin/blob/43e287b3ff5f0d223b0911b6ef90054ce5eb69d2/src/wallet/wallet.cpp#L3103-L3110) is `\"\"`, but a manual change like the following could make sense as additional cleanup:\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/src/wallet/init_settings.h\r\n+++ b/src/wallet/init_settings.h\r\n@@ -22,7 +22,7 @@ using WalletSetting = common::Setting<\r\n using AddressTypeSetting = common::Setting<\r\n     \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\r\n     \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\r\n-    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>\r\n+    ::DefaultFn<[] { return FormatOutputType(DEFAULT_ADDRESS_TYPE); }>\r\n     ::Category<OptionsCategory::WALLET>;\r\n \r\n using AvoidPartialSpendsSetting = common::Setting<\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -3101,7 +3101,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\r\n         }\r\n     }\r\n \r\n-    if (!AddressTypeSetting::Get(args).empty()) {\r\n+    {\r\n         std::optional<OutputType> parsed = ParseOutputType(AddressTypeSetting::Get(args));\r\n         if (!parsed) {\r\n             error = strprintf(_(\"Unknown address type '%s'\"), AddressTypeSetting::Get(args));\r\n```\r\n</p>\r\n</details>\r\n\r\n(Note this change would also be a change in behavior because `-addresstype=` could no longer be used to unset previous value, though #31260 or #16545 could address that. This PR is just trying to do a pure refactoring, making information about settings available at compile time but otherwise not changing behavior.)",
      "created_at": "2025-02-18T23:20:02Z",
      "updated_at": "2025-02-18T23:48:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1960725979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1960725979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1960734099",
      "pull_request_review_id": 2625238938,
      "id": 1960734099,
      "node_id": "PRRC_kwDOABII58503m2T",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AvoidPartialSpendsSetting = common::Setting<\n+    \"-avoidpartialspends\", bool, common::SettingOptions{.legacy = true},\n+    \"Group outputs by address, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as addresses are mostly swept with fewer transactions and outputs are aggregated in clean change addresses. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a larger-than-necessary number of inputs being used. Always enabled for wallets with \\\"avoid_reuse\\\" enabled, otherwise default: %u.\">\n+    ::DefaultFn<[] { return DEFAULT_AVOIDPARTIALSPENDS; }>\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using ChangeTypeSetting = common::Setting<\n+    \"-changetype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\"). Default is \\\"legacy\\\" when \"\n+                   \"-addresstype=legacy, else it is an implementation detail.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using ConsolidateFeeRateSetting = common::Setting<\n+    \"-consolidatefeerate=<amt>\", std::string, common::SettingOptions{.legacy = true},\n+    \"The maximum feerate (in %s/kvB) at which transaction building may use more inputs than strictly necessary so that the wallet's UTXO pool can be reduced (default: %s).\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DEFAULT_CONSOLIDATE_FEERATE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": 1959711651,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959711651\r\n\r\n> Similar feedback here: The default value seems like one that could have been provided by a user, so there should be no risk in setting it via `DefaultFn` and having it be the default. (With the added benefits already mentioned).\r\n\r\nYes, again this would need to be a manual cleanup, but this could be implemented as follows (with no change in behavior): \r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/src/wallet/init_settings.h\r\n+++ b/src/wallet/init_settings.h\r\n@@ -41,6 +41,7 @@ using ConsolidateFeeRateSetting = common::Setting<\r\n     \"-consolidatefeerate=<amt>\", std::string, common::SettingOptions{.legacy = true},\r\n     \"The maximum feerate (in %s/kvB) at which transaction building may use more inputs than strictly necessary so that the wallet's UTXO pool can be reduced (default: %s).\">\r\n     ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DEFAULT_CONSOLIDATE_FEERATE)); }>\r\n+    ::DefaultFn<[] { return FormatMoney(DEFAULT_CONSOLIDATE_FEERATE); }>\r\n     ::Category<OptionsCategory::WALLET>;\r\n \r\n using DisableWalletSetting = common::Setting<\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -3212,13 +3212,12 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\r\n         walletInstance->m_default_max_tx_fee = max_fee.value();\r\n     }\r\n \r\n-    if (!ConsolidateFeeRateSetting::Value(args).isNull()) {\r\n-        if (std::optional<CAmount> consolidate_feerate = ParseMoney(ConsolidateFeeRateSetting::Get(args))) {\r\n-            walletInstance->m_consolidate_feerate = CFeeRate(*consolidate_feerate);\r\n-        } else {\r\n-            error = AmountErrMsg(\"consolidatefeerate\", ConsolidateFeeRateSetting::Get(args));\r\n-            return nullptr;\r\n-        }\r\n+    const auto feerate{ConsolidateFeeRateSetting::Get(args)};\r\n+    if (std::optional<CAmount> consolidate_feerate = ParseMoney(feerate)) {\r\n+        walletInstance->m_consolidate_feerate = CFeeRate(*consolidate_feerate);\r\n+    } else {\r\n+        error = AmountErrMsg(\"consolidatefeerate\", ConsolidateFeeRateSetting::Get(args));\r\n+        return nullptr;\r\n     }\r\n \r\n     if (chain && chain->relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\r\n```\r\n</p>\r\n</details>\r\n\r\n> This means that the `HelpFn` would (ideally) have a way to query the default value as well. Maybe it is possible to pass the settings object instead of `fmt` and then use it to access `fmt` and the default value?\r\n\r\nYes that's a great idea, and I should add an implementation of that in this PR so HelpFn signature does not have to change in the future. I'm thinking the argument can be a much more generic `help` argument with `.format()` and `.default_fn()` function arguments, so the line here could look like\r\n\r\n```c++\r\n::HelpFn<[](const auto& help) { return help.format(CURRENCY_UNIT, help.default_fn()); }\r\n```\r\n",
      "created_at": "2025-02-18T23:31:28Z",
      "updated_at": "2025-02-18T23:46:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1960734099",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1960734099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1960742588",
      "pull_request_review_id": 2625238938,
      "id": 1960742588,
      "node_id": "PRRC_kwDOABII58503o68",
      "diff_hunk": "@@ -1262,15 +1247,15 @@ static int CommandLineRPC(int argc, char *argv[])\n         gArgs.CheckMultipleCLIArgs();\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.IsArgSet(\"-getinfo\")) {\n+        if (!GetInfoSetting::Value(gArgs).isNull()) {",
      "path": "src/bitcoin-cli.cpp",
      "position": 1,
      "original_position": 235,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": 1959977366,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959977366\r\n\r\n> nit: I find the `!Value(gArgs).isNull()` with the double negation and verbosity over just `Get(gArgs)` a bit ugly and I think it would be better to remove `IsArgSet` as much as possible. In most cases it is not needed anyway, or used incorrectly. About this one, I left a comment here: https://github.com/bitcoin/bitcoin/pull/31887/files#r1959923000\r\n\r\nYes, the `!isNull` calls are just replacements for `IsArgSet()` and one goal of this PR is to discourage any calls like this, because of the bugs and unnecessary complexity these checks introduce. The way forward is for PR's like #30529 and #31896 to drop them.",
      "created_at": "2025-02-18T23:43:45Z",
      "updated_at": "2025-02-18T23:46:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1960742588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1960742588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1961169935",
      "pull_request_review_id": 2625962288,
      "id": 1961169935,
      "node_id": "PRRC_kwDOABII58505RQP",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": 1959703860,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Note this change would also be a change in behavior because `-addresstype=` could no longer be used to unset previous value\r\n\r\nWhy would that be? I haven't tested this, but from reading the code and the test, I get the impression that setting a value to an empty string will set the value to an empty string and not the default value.\r\n\r\nThough, maybe I am confused with negation, which, according to the docs also claims to set a string to an empty string, even though I had the impression that it was setting the string to `\"0\"`. https://github.com/bitcoin/bitcoin/blob/master/doc/bitcoin-conf.md#negated-options\r\n\r\n> In general, negating an option is like setting it to `0` if it is a boolean or integer option, and setting it to an empty string or path or list if it is a string or path or list option.\r\n\r\n",
      "created_at": "2025-02-19T08:12:18Z",
      "updated_at": "2025-02-19T08:12:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1961169935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1961169935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1961337833",
      "pull_request_review_id": 2626239111,
      "id": 1961337833,
      "node_id": "PRRC_kwDOABII585056Pp",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": 1959703860,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To answer my own question, the change in behavior likely refers to the removal of the empty() check in the diff, not the use of the `DefaultFn`. My understanding is that just using `DefaultFn` would be a refactor.",
      "created_at": "2025-02-19T09:53:51Z",
      "updated_at": "2025-02-19T09:53:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1961337833",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1961337833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1962529752",
      "pull_request_review_id": 2628216843,
      "id": 1962529752,
      "node_id": "PRRC_kwDOABII5850-dPY",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#ifndef BITCOIN_WALLET_INIT_SETTINGS_H\n+#define BITCOIN_WALLET_INIT_SETTINGS_H\n+\n+#include <common/setting.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/db.h>\n+#include <wallet/wallet.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace wallet {\n+\n+using WalletSetting = common::Setting<\n+    \"-wallet=<path>\", std::vector<std::string>, common::SettingOptions{.legacy = true, .network_only = true},\n+    \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AddressTypeSetting = common::Setting<\n+    \"-addresstype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, FormatOutputType(DEFAULT_ADDRESS_TYPE)); }>\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using AvoidPartialSpendsSetting = common::Setting<\n+    \"-avoidpartialspends\", bool, common::SettingOptions{.legacy = true},\n+    \"Group outputs by address, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as addresses are mostly swept with fewer transactions and outputs are aggregated in clean change addresses. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a larger-than-necessary number of inputs being used. Always enabled for wallets with \\\"avoid_reuse\\\" enabled, otherwise default: %u.\">\n+    ::DefaultFn<[] { return DEFAULT_AVOIDPARTIALSPENDS; }>\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using ChangeTypeSetting = common::Setting<\n+    \"-changetype\", std::string, common::SettingOptions{.legacy = true},\n+    \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\"). Default is \\\"legacy\\\" when \"\n+                   \"-addresstype=legacy, else it is an implementation detail.\">\n+    ::Category<OptionsCategory::WALLET>;\n+\n+using ConsolidateFeeRateSetting = common::Setting<\n+    \"-consolidatefeerate=<amt>\", std::string, common::SettingOptions{.legacy = true},\n+    \"The maximum feerate (in %s/kvB) at which transaction building may use more inputs than strictly necessary so that the wallet's UTXO pool can be reduced (default: %s).\">\n+    ::HelpFn<[](const auto& fmt) { return strprintf(fmt, CURRENCY_UNIT, FormatMoney(DEFAULT_CONSOLIDATE_FEERATE)); }>",
      "path": "src/wallet/init_settings.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "e12edf7661384f593b5868b3f3374613773019d9",
      "in_reply_to_id": 1959711651,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1959711651\r\n\r\n> This means that the `HelpFn` would (ideally) have a way to query the default value as well.\r\n\r\nThis is now implemented in the latest push.",
      "created_at": "2025-02-19T23:33:17Z",
      "updated_at": "2025-02-19T23:35:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1962529752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1962529752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1964613599",
      "pull_request_review_id": 2631611128,
      "id": 1964613599,
      "node_id": "PRRC_kwDOABII5851GZ_f",
      "diff_hunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare name, type, and behavior of command\n+//! line and configuration settings.\n+//!\n+//! The template takes 4 parameters meant to be specified by users, followed by\n+//! additional parameters that are used internally.\n+//!\n+//! @tparam summary string like \"-fastprune\" or \"-blocksdir=<dir>\" with the\n+//!     name of the setting and optional argument information\n+//!\n+//! @tparam T type of the setting. Accepts simple types like bool, int, and\n+//!     std::string, or and composite types like std::optional<std::string> or\n+//!     std::vector<int>.\n+//!\n+//! @tparam options SettingOptions instance specifying additional options to\n+//!        apply to this setting.\n+//!\n+//! @tparam help optional help string describing purpose and behavior of the\n+//!     setting. It can be a formatted string accepting printf-style % arguments,\n+//!     which can be formatted at runtime using HelpFn/HelpArgs or\n+//!     DefaultFn/DefaultArgs features (described below).\n+//!\n+//! Setting template class definiting-time Setting types which are",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 66,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "31fe4c6f994697dd027be8064c27dde800ebcb65",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: is `definiting-time` a typo? maybe `definition-time`?",
      "created_at": "2025-02-21T01:31:57Z",
      "updated_at": "2025-02-21T01:31:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1964613599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1964613599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168340344",
      "pull_request_review_id": 2960951696,
      "id": 2168340344,
      "node_id": "PRRC_kwDOABII586BPj94",
      "diff_hunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template <size_t N, typename T = char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N])\n+    {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t)\n+    {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare name, type, and behavior of command",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 47,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n//! Setting template struct used to declare name, type, and behavior of command\r\n```",
      "created_at": "2025-06-26T07:11:20Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168340344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168340344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168428599",
      "pull_request_review_id": 2960951696,
      "id": 2168428599,
      "node_id": "PRRC_kwDOABII586BP5g3",
      "diff_hunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};",
      "path": "src/common/setting.h",
      "position": 27,
      "original_position": 21,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1. You described it in the middle of https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2455631901 but please document what `legacy` is intended to signify in this context using a comment or at minimum the commit message.\r\n\r\n2. The field is currently never read. Should make that clear too in comments/commit message. Or remove it altogether for now, or add the functionality that reads from it into this PR.",
      "created_at": "2025-06-26T07:51:00Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168428599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168428599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168449187",
      "pull_request_review_id": 2960951696,
      "id": 2168449187,
      "node_id": "PRRC_kwDOABII586BP-ij",
      "diff_hunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers",
      "path": "src/test/setting_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Wrong year?",
      "created_at": "2025-06-26T08:01:25Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168449187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168449187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168478592",
      "pull_request_review_id": 2960951696,
      "id": 2168478592,
      "node_id": "PRRC_kwDOABII586BQFuA",
      "diff_hunk": "",
      "path": "contrib/devtools/circular-dependencies.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "46efdbc5176acbab0d16928f7f24abc4e2790af3",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Commit message mentions *lint-format-strings.py* but commit doesn't touch it (any longer?).",
      "created_at": "2025-06-26T08:16:49Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168478592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168478592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168496748",
      "pull_request_review_id": 2960951696,
      "id": 2168496748,
      "node_id": "PRRC_kwDOABII586BQKJs",
      "diff_hunk": "@@ -15,11 +15,11 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-REGEX_ARG = r'\\b(?:GetArg|GetArgs|GetBoolArg|GetIntArg|GetPathArg|IsArgSet|get_net)\\(\"(-[^\"]+)\"'\n-REGEX_DOC = r'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n+REGEX_ARG = r'([A-Za-z0-9]+Setting)::Get'",
      "path": "test/lint/check-doc.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878053891,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I second the suggestion of switching to `\\w` in this PR since `\\w` matches the same symbols + `_` which is also a valid C++ identifier even if we don't encourage it.\r\n```suggestion\r\nREGEX_ARG = r'(\\w+Setting)::Get'\r\n```",
      "created_at": "2025-06-26T08:25:37Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168496748",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168496748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168558603",
      "pull_request_review_id": 2960951696,
      "id": 2168558603,
      "node_id": "PRRC_kwDOABII586BQZQL",
      "diff_hunk": "@@ -0,0 +1,932 @@\n+from __future__ import annotations\n+import argparse\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for default expressions\"\"\"\n+    default_fn: bool = False\n+    \"\"\"Whether needs to use DefaultFn<> instead of Default<> because default value is not constexpr\"\"\"\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    \"\"\"Path to _settings.h file defining setting\"\"\"\n+    rel_include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for help format variables\"\"\"\n+    help_fn: bool = False\n+    \"\"\"Whether needs to use HelpFn<> instead of HelpArgs<> because help arguments are not not constexpr\"\"\"\n+    extern_args: list[str] = field(default_factory=list)\n+    \"\"\"List of external arguments needed to forwarded from Setting::Register to HelpFn to format the help string.\"\"\"\n+    hidden_args: list[AddArg] | None = None\n+    \"\"\"One AddArg object is produced for each argument listed in a single\n+    AddHiddenArgs({...}) call, but all the AddArg objects from the same call a\n+    hidden_args member pointing to a shared list of related AddArgs.\"\"\"\n+    nonhidden_arg: AddArg | None = None\n+    \"\"\"Reference to duplicate nonhidden argument, if this is a hidden argument duplicating a non-hidden one.\"\"\"\n+    fake: bool = False\n+    \"\"\"If true, AddArg object does not correspond to real AddArg call, and is\n+    used to retrieve test settings that are never registered.\"\"\"\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+@dataclass\n+class Range:\n+    start: int\n+    end: int\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 99,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```shell\r\n₿ mypy contrib/devtools/reg-settings.py \r\ncontrib/devtools/reg-settings.py:99: SyntaxWarning: invalid escape sequence '\\|'\r\n  \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\r\n```\r\nSuggestion; make it an r-string:\r\n```python\r\n            \"git\", \"grep\", \"-l\", r\"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\r\n```",
      "created_at": "2025-06-26T08:55:09Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168558603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168558603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168630944",
      "pull_request_review_id": 2960951696,
      "id": 2168630944,
      "node_id": "PRRC_kwDOABII586BQq6g",
      "diff_hunk": "@@ -0,0 +1,932 @@\n+from __future__ import annotations\n+import argparse\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for default expressions\"\"\"\n+    default_fn: bool = False\n+    \"\"\"Whether needs to use DefaultFn<> instead of Default<> because default value is not constexpr\"\"\"\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    \"\"\"Path to _settings.h file defining setting\"\"\"\n+    rel_include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for help format variables\"\"\"\n+    help_fn: bool = False\n+    \"\"\"Whether needs to use HelpFn<> instead of HelpArgs<> because help arguments are not not constexpr\"\"\"\n+    extern_args: list[str] = field(default_factory=list)\n+    \"\"\"List of external arguments needed to forwarded from Setting::Register to HelpFn to format the help string.\"\"\"\n+    hidden_args: list[AddArg] | None = None\n+    \"\"\"One AddArg object is produced for each argument listed in a single\n+    AddHiddenArgs({...}) call, but all the AddArg objects from the same call a\n+    hidden_args member pointing to a shared list of related AddArgs.\"\"\"\n+    nonhidden_arg: AddArg | None = None\n+    \"\"\"Reference to duplicate nonhidden argument, if this is a hidden argument duplicating a non-hidden one.\"\"\"\n+    fake: bool = False\n+    \"\"\"If true, AddArg object does not correspond to real AddArg call, and is\n+    used to retrieve test settings that are never registered.\"\"\"\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+@dataclass\n+class Range:\n+    start: int\n+    end: int\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    stack = []\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            stack.append(\")\")\n+            if len(stack) == 1: continue\n+        elif c == \"{\":\n+            stack.append(\"}\")\n+            if len(stack) == 1: continue\n+        elif c == stack[-1]:\n+            stack.pop()\n+            if not stack: break\n+        elif c == \",\" and len(stack) == 1:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2)-1:])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end()-1:])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'( *)\\b(\\w+)\\.AddHiddenArgs\\((\\{)', content):\n+            call_len, call_args = parse_function_args(content[match.start(3):])\n+            hidden_args = []\n+            for summary in call_args:\n+                summary = summary.strip()\n+                if not summary: continue\n+                call_text=content[match.start():match.start(3)+call_len+1]",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 169,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Leftover line of code?",
      "created_at": "2025-06-26T09:30:17Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168630944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168630944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168648623",
      "pull_request_review_id": 2960951696,
      "id": 2168648623,
      "node_id": "PRRC_kwDOABII586BQvOv",
      "diff_hunk": "@@ -0,0 +1,932 @@\n+from __future__ import annotations\n+import argparse\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for default expressions\"\"\"\n+    default_fn: bool = False\n+    \"\"\"Whether needs to use DefaultFn<> instead of Default<> because default value is not constexpr\"\"\"\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    \"\"\"Path to _settings.h file defining setting\"\"\"\n+    rel_include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for help format variables\"\"\"\n+    help_fn: bool = False\n+    \"\"\"Whether needs to use HelpFn<> instead of HelpArgs<> because help arguments are not not constexpr\"\"\"\n+    extern_args: list[str] = field(default_factory=list)\n+    \"\"\"List of external arguments needed to forwarded from Setting::Register to HelpFn to format the help string.\"\"\"\n+    hidden_args: list[AddArg] | None = None\n+    \"\"\"One AddArg object is produced for each argument listed in a single\n+    AddHiddenArgs({...}) call, but all the AddArg objects from the same call a\n+    hidden_args member pointing to a shared list of related AddArgs.\"\"\"\n+    nonhidden_arg: AddArg | None = None\n+    \"\"\"Reference to duplicate nonhidden argument, if this is a hidden argument duplicating a non-hidden one.\"\"\"\n+    fake: bool = False\n+    \"\"\"If true, AddArg object does not correspond to real AddArg call, and is\n+    used to retrieve test settings that are never registered.\"\"\"\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+@dataclass\n+class Range:\n+    start: int\n+    end: int\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    stack = []\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            stack.append(\")\")\n+            if len(stack) == 1: continue\n+        elif c == \"{\":\n+            stack.append(\"}\")\n+            if len(stack) == 1: continue\n+        elif c == stack[-1]:\n+            stack.pop()\n+            if not stack: break\n+        elif c == \",\" and len(stack) == 1:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2)-1:])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end()-1:])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'( *)\\b(\\w+)\\.AddHiddenArgs\\((\\{)', content):\n+            call_len, call_args = parse_function_args(content[match.start(3):])\n+            hidden_args = []\n+            for summary in call_args:\n+                summary = summary.strip()\n+                if not summary: continue\n+                call_text=content[match.start():match.start(3)+call_len+1]\n+                call = Call(\n+                    file=file_path,\n+                    position=match.start(),\n+                    call_text=content[match.start():match.start(3)+call_len+2],\n+                    obj_name=match.group(2),\n+                    arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                    context=context,\n+                    namespace=namespace,\n+                )\n+                hidden_args.append(AddArg(\n+                    call=call,\n+                    summary=summary,\n+                    help_text=\"\",\n+                    help_args=(),\n+                    flags=\"ArgsManager::ALLOW_ANY\",\n+                    category=\"OptionsCategory::HIDDEN\",\n+                    hidden_args=hidden_args,\n+                ))\n+                adds.append(hidden_args[-1])\n+\n+        for match in re.finditer(r'(!*)\\b(?:((?:\\w|\\.|->|\\(\\))+)(\\.|->))?(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5)-1:])\n+            if not call_args: continue\n+            nots, obj_name, op, function_name, _ = match.groups()\n+            if op == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            elif obj_name is None:\n+                obj_name = \"*this\"\n+            arg_name = \"\"\n+            if m := re.match('^\"(.*)\"$', call_args[0].strip()):\n+                arg_name = m.group(1)\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len],\n+                obj_name=obj_name,\n+                arg_name=arg_name,\n+                context=context,\n+                namespace=namespace,\n+            )\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)\n+            default_arg = call_args[1].strip() if len(call_args) > 1 else None\n+            default_value = (\n+                True if data_type == DataType.STRING and default_arg == '\"\"' else\n+                True if data_type == DataType.INT and default_arg == \"0\" else\n+                True if data_type == DataType.BOOL and default_arg == \"false\" else\n+                default_arg if default_arg is not None else\n+                None if data_type in (DataType.STRING, DataType.INT, DataType.BOOL) else\n+                True if data_type in (DataType.PATH, DataType.STRING_LIST) else\n+                False)\n+            gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\n+    return adds, gets\n+\n+def make_setting(settings, call):\n+    name = call.arg_name.lstrip(\"-\")\n+    if name in settings:\n+        setting = settings[name]\n+    else:\n+        setting = settings[name] = Setting(name)\n+    return setting\n+\n+def flags_to_options(flag_str):\n+    flags = set()\n+    for flag in flag_str.split(\"|\"):\n+        flag = flag.strip()\n+        if flag: flags.add(flag)\n+\n+    def pop(flag):\n+        if flag in flags:\n+            flags.remove(flag)\n+            return True\n+        return False\n+\n+    options = [\".legacy = true\"]\n+    if pop(\"ArgsManager::DEBUG_ONLY\"):\n+        options.append(\".debug_only = true\")\n+    if pop(\"ArgsManager::NETWORK_ONLY\"):\n+        options.append(\".network_only = true\")\n+    if pop(\"ArgsManager::SENSITIVE\"):\n+        options.append(\".sensitive = true\")\n+    if pop(\"ArgsManager::DISALLOW_NEGATION\"):\n+      options.append(\".disallow_negation = true\")\n+    if pop(\"ArgsManager::DISALLOW_ELISION\"):\n+        options.append(\".disallow_elision = true\")\n+    pop(\"ArgsManager::ALLOW_ANY\")\n+    if flags:\n+        raise Exception(f\"Unknown flags {flags!r}\")\n+    return options\n+\n+def collect_argument_information(src_dir):\n+    files = get_files_with_args(src_dir)\n+    settings: Dict[str, Setting] = {}\n+    for file in files:\n+        adds, gets = parse_calls(file)\n+        for add in adds:\n+            setting = make_setting(settings, add.call)\n+            setting.adds.append(add)\n+        for get in gets:\n+            setting = make_setting(settings, get.call)\n+            setting.gets.append(get)\n+\n+    for arg_name, setting in settings.items():\n+        # Find duplicate hidden/nonhidden settings\n+        for hadd in setting.adds:\n+            if hadd.hidden_args is not None:\n+                for add in setting.adds:\n+                    if add.hidden_args is None and add.call.context == hadd.call.context and add.call.arg_name == hadd.call.arg_name:\n+                        hadd.nonhidden_arg = add\n+                        break\n+\n+        # Link GetArg/AddArg calls. If any GetArg calls don't have associated\n+        # AddArg calls (only happens in tests) create fake AddArg objects.\n+        for add in setting.adds:\n+            for get in setting.gets:\n+                if get.add is None and same_context(add, get):\n+                    get.add = add\n+        fake_adds = {} # map of (file path, arg name) -> AddArg\n+        for get in setting.gets:\n+            if get.add is None and get.call.arg_name:\n+                key = get.call.file, get.call.arg_name\n+                if key in fake_adds:\n+                    get.add = fake_adds[key]\n+                else:\n+                    add = AddArg(call=get.call, summary=f'\"{get.call.arg_name}\"', help_text=\"\", help_args=(), flags=\"\", category=\"\", fake=True)\n+                    get.add = fake_adds[key] = add\n+                    setting.adds.append(add)\n+\n+        # Figure out setting types and default values.\n+        setting_name = ''.join(NAME_MAP.get(word) or word.capitalize() for word in arg_name.split('-')) + \"Setting\"\n+        counter = collections.Counter()\n+        for add in setting.adds:\n+            add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\n+            add.rel_include_path = re.sub(\"^src/\", \"\", add.include_path)\n+            key = add.call.context, arg_name\n+            add_setting_name = setting_name\n+            if add.hidden_args is None:\n+                counter[key] += 1\n+                if counter[key] > 1: add_setting_name += str(counter[key])\n+            elif add.nonhidden_arg is not None:\n+                continue\n+            else:\n+                add_setting_name += \"Hidden\"\n+            for get in setting.gets:\n+                if not same_context(add, get):\n+                    continue\n+                if get.data_type in add.data_types:\n+                    setting_type = add.data_types[get.data_type]\n+                else:\n+                    setting_type = add.data_types[get.data_type] = SettingType(add_setting_name)\n+                if get.default_value is not False:\n+                    setting_type.defaults.add(get.default_value)\n+\n+            # Clean up data types. Add if empty, remove if redundant, set primary\n+            if len(add.data_types) == 0:\n+                add.data_types[DataType.UNSET] = SettingType(add_setting_name)\n+            add.data_types[min(add.data_types.keys())].primary = True\n+            for data_type in (DataType.DISABLED, DataType.UNSET):\n+                if data_type in add.data_types and not add.data_types[data_type].primary:\n+                    del add.data_types[data_type]\n+\n+            for data_type, setting_type in add.data_types.items():\n+                # If same setting is retrieved as different types, add suffixes to distinguish setting names\n+                if not setting_type.primary:\n+                    setting_type.name += (\n+                        \"List\" if data_type == DataType.STRING_LIST else\n+                        \"Str\" if data_type == DataType.STRING else\n+                        \"Path\" if data_type == DataType.PATH else\n+                        \"Int\" if data_type == DataType.INT else\n+                        \"Bool\" if data_type == DataType.BOOL else\n+                        \"Disabled\" if data_type == DataType.DISABLED else\n+                        \"Unset\" if data_type == DataType.UNSET else\n+                        None\n+                    )\n+                # Only set ::Default<> if there are no GetArg calls returning\n+                # std::optional and there is a single consistent default.\n+                if None not in setting_type.defaults:\n+                    defaults = set()\n+                    for default_value in setting_type.defaults:\n+                        if isinstance(default_value, str):\n+                            for pattern, options in ARG_PATTERNS.items():\n+                                if re.search(pattern, default_value) and options.extern:\n+                                    default_value = False",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 358,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this be\r\n```python\r\ndefault_value = None\r\n```\r\nsince the `set` is only meant to contain `str`s and `None`?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73a77f4f01fc479bf015605cb95894b440533a2d/contrib/devtools/reg-settings.py#L40\r\n\r\nOr should `defaults` be changed to match:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73a77f4f01fc479bf015605cb95894b440533a2d/contrib/devtools/reg-settings.py#L34\r\n\r\nas we insert `DefaultValue` into the `set`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73a77f4f01fc479bf015605cb95894b440533a2d/contrib/devtools/reg-settings.py#L327\r\n\r\n?",
      "created_at": "2025-06-26T09:39:07Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168648623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168648623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168978985",
      "pull_request_review_id": 2960951696,
      "id": 2168978985,
      "node_id": "PRRC_kwDOABII586BR_4p",
      "diff_hunk": "@@ -112,37 +113,37 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+    if (!FormatSetting::Value(args).isNull() && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+    if (!DumpfileSetting::Value(args).isNull() && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-descriptors\") && command != \"create\") {\n+    if (!DescriptorsSetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (args.IsArgSet(\"-legacy\") && command != \"create\") {\n+    if (!LegacySetting::Value(args).isNull() && command != \"create\") {\n         tfm::format(std::cerr, \"The -legacy option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n-    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+    if (command == \"create\" && WalletSetting::Value(args).isNull()) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return false;\n     }\n-    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const std::string name = WalletSetting::Get(args);\n     const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n \n     if (command == \"create\") {\n         DatabaseOptions options;\n         ReadDatabaseArgs(args, options);\n         options.require_create = true;\n         // If -legacy is set, use it. Otherwise default to false.",
      "path": "src/wallet/wallettool.cpp",
      "position": 1,
      "original_position": 45,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "a4a5226b5b7f240a87a5f078cf0b6a475679b8ab",
      "in_reply_to_id": 1878059582,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree, would be nice to have a commit after the scripted diff which removes/tidies up comments like this. I could help creating one for cherry-picking into this PR if there is support for the idea.",
      "created_at": "2025-06-26T12:42:28Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2168978985",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168978985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169008197",
      "pull_request_review_id": 2960951696,
      "id": 2169008197,
      "node_id": "PRRC_kwDOABII586BSHBF",
      "diff_hunk": "@@ -288,8 +296,8 @@ fs::path ArgsManager::GetBlocksDirPath() const\n     // this function\n     if (!path.empty()) return path;\n \n-    if (IsArgSet(\"-blocksdir\")) {\n-        path = fs::absolute(GetPathArg(\"-blocksdir\"));\n+    if (!BlocksDirSetting::Value(*this).isNull()) {\n+        path = fs::absolute(BlocksDirSettingPath::Get(*this));",
      "path": "src/common/args.cpp",
      "position": 36,
      "original_position": 36,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "7a24a9dea0387637f604852d85aaac761203bcb6",
      "in_reply_to_id": 1882225421,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> These types are created because current code is inconsistent about using GetArg and GetPathArg when retrieving these settings, so the script needs to be conservative and declaring separate types for the inconsistent retrievals.\r\n\r\nThe approach of not changing behavior in this PR is growing on me. Might be better to just make note of this kind of thing in the PR description.",
      "created_at": "2025-06-26T12:56:23Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2169008197",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169008197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 305,
      "original_start_line": 299,
      "start_side": "RIGHT",
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175927997",
      "pull_request_review_id": 2960951696,
      "id": 2175927997,
      "node_id": "PRRC_kwDOABII586Bsga9",
      "diff_hunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template <typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase {\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template <typename T, SettingOptions options>\n+struct SettingTraits {\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset> {\n+    static bool Get(const SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled> {\n+    static bool Get(const SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled> {\n+    static bool Get(const SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template <typename T>\n+constexpr auto GetPtr(std::optional<T> (*ptr)(const SettingsValue&))",
      "path": "src/common/setting_internal.h",
      "position": 65,
      "original_position": 63,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could document that this is needed to disambiguate between function overloads?",
      "created_at": "2025-06-30T20:57:29Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2175927997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175927997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 64,
      "original_start_line": 62,
      "start_side": "RIGHT",
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175982324",
      "pull_request_review_id": 2960951696,
      "id": 2175982324,
      "node_id": "PRRC_kwDOABII586Bstr0",
      "diff_hunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template <typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase {\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template <typename T, SettingOptions options>\n+struct SettingTraits {\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset> {\n+    static bool Get(const SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled> {\n+    static bool Get(const SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled> {\n+    static bool Get(const SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template <typename T>\n+constexpr auto GetPtr(std::optional<T> (*ptr)(const SettingsValue&))\n+{\n+    return ptr;\n+}\n+\n+template <SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {\n+};\n+\n+template <typename T, SettingOptions options>\n+    requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {\n+};\n+\n+template <typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options> {\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template <typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options> {\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template <SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue> {\n+    static bool Get(const SettingsValue& setting, setting_t& out)\n+    {\n+        out = setting;\n+        return true;\n+    }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template <SettingOptions options>\n+constexpr int SettingFlags()",
      "path": "src/common/setting_internal.h",
      "position": 1,
      "original_position": 133,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Tempting to go for:\r\n```suggestion\r\nconsteval int SettingFlags(SettingOptions options)\r\n```\r\nBut it's somewhat of a departure from the surrounding style.",
      "created_at": "2025-06-30T21:18:17Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2175982324",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175982324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178368647",
      "pull_request_review_id": 2960951696,
      "id": 2178368647,
      "node_id": "PRRC_kwDOABII586B10SH",
      "diff_hunk": "@@ -0,0 +1,932 @@\n+from __future__ import annotations\n+import argparse\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for default expressions\"\"\"\n+    default_fn: bool = False\n+    \"\"\"Whether needs to use DefaultFn<> instead of Default<> because default value is not constexpr\"\"\"\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    \"\"\"Path to _settings.h file defining setting\"\"\"\n+    rel_include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for help format variables\"\"\"\n+    help_fn: bool = False\n+    \"\"\"Whether needs to use HelpFn<> instead of HelpArgs<> because help arguments are not not constexpr\"\"\"\n+    extern_args: list[str] = field(default_factory=list)\n+    \"\"\"List of external arguments needed to forwarded from Setting::Register to HelpFn to format the help string.\"\"\"\n+    hidden_args: list[AddArg] | None = None\n+    \"\"\"One AddArg object is produced for each argument listed in a single\n+    AddHiddenArgs({...}) call, but all the AddArg objects from the same call a\n+    hidden_args member pointing to a shared list of related AddArgs.\"\"\"\n+    nonhidden_arg: AddArg | None = None\n+    \"\"\"Reference to duplicate nonhidden argument, if this is a hidden argument duplicating a non-hidden one.\"\"\"\n+    fake: bool = False\n+    \"\"\"If true, AddArg object does not correspond to real AddArg call, and is\n+    used to retrieve test settings that are never registered.\"\"\"\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+@dataclass\n+class Range:\n+    start: int\n+    end: int\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    stack = []\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            stack.append(\")\")\n+            if len(stack) == 1: continue\n+        elif c == \"{\":\n+            stack.append(\"}\")\n+            if len(stack) == 1: continue\n+        elif c == stack[-1]:\n+            stack.pop()\n+            if not stack: break\n+        elif c == \",\" and len(stack) == 1:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 138,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: This indentation of the `for`-loops is not necessary, we can still access `content` after letting go of `f`. Less indentation => less intimidation. Same is already done in `replace_in_file()`.",
      "created_at": "2025-07-01T19:19:38Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2178368647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178368647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178376601",
      "pull_request_review_id": 2960951696,
      "id": 2178376601,
      "node_id": "PRRC_kwDOABII586B12OZ",
      "diff_hunk": "@@ -0,0 +1,932 @@\n+from __future__ import annotations\n+import argparse\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for default expressions\"\"\"\n+    default_fn: bool = False\n+    \"\"\"Whether needs to use DefaultFn<> instead of Default<> because default value is not constexpr\"\"\"\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    \"\"\"Path to _settings.h file defining setting\"\"\"\n+    rel_include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for help format variables\"\"\"\n+    help_fn: bool = False\n+    \"\"\"Whether needs to use HelpFn<> instead of HelpArgs<> because help arguments are not not constexpr\"\"\"\n+    extern_args: list[str] = field(default_factory=list)\n+    \"\"\"List of external arguments needed to forwarded from Setting::Register to HelpFn to format the help string.\"\"\"\n+    hidden_args: list[AddArg] | None = None\n+    \"\"\"One AddArg object is produced for each argument listed in a single\n+    AddHiddenArgs({...}) call, but all the AddArg objects from the same call a\n+    hidden_args member pointing to a shared list of related AddArgs.\"\"\"\n+    nonhidden_arg: AddArg | None = None\n+    \"\"\"Reference to duplicate nonhidden argument, if this is a hidden argument duplicating a non-hidden one.\"\"\"\n+    fake: bool = False\n+    \"\"\"If true, AddArg object does not correspond to real AddArg call, and is\n+    used to retrieve test settings that are never registered.\"\"\"\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+@dataclass\n+class Range:\n+    start: int\n+    end: int\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    stack = []\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            stack.append(\")\")\n+            if len(stack) == 1: continue\n+        elif c == \"{\":\n+            stack.append(\"}\")\n+            if len(stack) == 1: continue\n+        elif c == stack[-1]:\n+            stack.pop()\n+            if not stack: break\n+        elif c == \",\" and len(stack) == 1:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2)-1:])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end()-1:])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'( *)\\b(\\w+)\\.AddHiddenArgs\\((\\{)', content):\n+            call_len, call_args = parse_function_args(content[match.start(3):])\n+            hidden_args = []\n+            for summary in call_args:\n+                summary = summary.strip()\n+                if not summary: continue\n+                call_text=content[match.start():match.start(3)+call_len+1]\n+                call = Call(\n+                    file=file_path,\n+                    position=match.start(),\n+                    call_text=content[match.start():match.start(3)+call_len+2],\n+                    obj_name=match.group(2),\n+                    arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                    context=context,\n+                    namespace=namespace,\n+                )\n+                hidden_args.append(AddArg(\n+                    call=call,\n+                    summary=summary,\n+                    help_text=\"\",\n+                    help_args=(),\n+                    flags=\"ArgsManager::ALLOW_ANY\",\n+                    category=\"OptionsCategory::HIDDEN\",\n+                    hidden_args=hidden_args,\n+                ))\n+                adds.append(hidden_args[-1])\n+\n+        for match in re.finditer(r'(!*)\\b(?:((?:\\w|\\.|->|\\(\\))+)(\\.|->))?(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5)-1:])\n+            if not call_args: continue\n+            nots, obj_name, op, function_name, _ = match.groups()\n+            if op == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            elif obj_name is None:\n+                obj_name = \"*this\"\n+            arg_name = \"\"\n+            if m := re.match('^\"(.*)\"$', call_args[0].strip()):\n+                arg_name = m.group(1)\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len],\n+                obj_name=obj_name,\n+                arg_name=arg_name,\n+                context=context,\n+                namespace=namespace,\n+            )\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 217,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Would be good to follow with `assert data_type` to guard against the `None`-case.\r\n\r\nSimilar case:\r\nhttps://github.com/bitcoin/bitcoin/blob/73a77f4f01fc479bf015605cb95894b440533a2d/contrib/devtools/reg-settings.py#L400-L407",
      "created_at": "2025-07-01T19:25:53Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2178376601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178376601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 210,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178387847",
      "pull_request_review_id": 2960951696,
      "id": 2178387847,
      "node_id": "PRRC_kwDOABII586B14-H",
      "diff_hunk": "@@ -0,0 +1,932 @@\n+from __future__ import annotations\n+import argparse\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for default expressions\"\"\"\n+    default_fn: bool = False\n+    \"\"\"Whether needs to use DefaultFn<> instead of Default<> because default value is not constexpr\"\"\"\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    \"\"\"Path to _settings.h file defining setting\"\"\"\n+    rel_include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    includes: set[str] = field(default_factory=set)\n+    \"\"\"Include paths needed in setting file for help format variables\"\"\"\n+    help_fn: bool = False\n+    \"\"\"Whether needs to use HelpFn<> instead of HelpArgs<> because help arguments are not not constexpr\"\"\"\n+    extern_args: list[str] = field(default_factory=list)\n+    \"\"\"List of external arguments needed to forwarded from Setting::Register to HelpFn to format the help string.\"\"\"\n+    hidden_args: list[AddArg] | None = None\n+    \"\"\"One AddArg object is produced for each argument listed in a single\n+    AddHiddenArgs({...}) call, but all the AddArg objects from the same call a\n+    hidden_args member pointing to a shared list of related AddArgs.\"\"\"\n+    nonhidden_arg: AddArg | None = None\n+    \"\"\"Reference to duplicate nonhidden argument, if this is a hidden argument duplicating a non-hidden one.\"\"\"\n+    fake: bool = False\n+    \"\"\"If true, AddArg object does not correspond to real AddArg call, and is\n+    used to retrieve test settings that are never registered.\"\"\"\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+@dataclass\n+class Range:\n+    start: int\n+    end: int\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    stack = []\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            stack.append(\")\")\n+            if len(stack) == 1: continue\n+        elif c == \"{\":\n+            stack.append(\"}\")\n+            if len(stack) == 1: continue\n+        elif c == stack[-1]:\n+            stack.pop()\n+            if not stack: break\n+        elif c == \",\" and len(stack) == 1:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2)-1:])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end()-1:])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'( *)\\b(\\w+)\\.AddHiddenArgs\\((\\{)', content):\n+            call_len, call_args = parse_function_args(content[match.start(3):])\n+            hidden_args = []\n+            for summary in call_args:\n+                summary = summary.strip()\n+                if not summary: continue\n+                call_text=content[match.start():match.start(3)+call_len+1]\n+                call = Call(\n+                    file=file_path,\n+                    position=match.start(),\n+                    call_text=content[match.start():match.start(3)+call_len+2],\n+                    obj_name=match.group(2),\n+                    arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                    context=context,\n+                    namespace=namespace,\n+                )\n+                hidden_args.append(AddArg(\n+                    call=call,\n+                    summary=summary,\n+                    help_text=\"\",\n+                    help_args=(),\n+                    flags=\"ArgsManager::ALLOW_ANY\",\n+                    category=\"OptionsCategory::HIDDEN\",\n+                    hidden_args=hidden_args,\n+                ))\n+                adds.append(hidden_args[-1])\n+\n+        for match in re.finditer(r'(!*)\\b(?:((?:\\w|\\.|->|\\(\\))+)(\\.|->))?(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5)-1:])\n+            if not call_args: continue\n+            nots, obj_name, op, function_name, _ = match.groups()\n+            if op == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            elif obj_name is None:\n+                obj_name = \"*this\"\n+            arg_name = \"\"\n+            if m := re.match('^\"(.*)\"$', call_args[0].strip()):\n+                arg_name = m.group(1)\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len],\n+                obj_name=obj_name,\n+                arg_name=arg_name,\n+                context=context,\n+                namespace=namespace,\n+            )\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)\n+            default_arg = call_args[1].strip() if len(call_args) > 1 else None\n+            default_value = (\n+                True if data_type == DataType.STRING and default_arg == '\"\"' else\n+                True if data_type == DataType.INT and default_arg == \"0\" else\n+                True if data_type == DataType.BOOL and default_arg == \"false\" else\n+                default_arg if default_arg is not None else\n+                None if data_type in (DataType.STRING, DataType.INT, DataType.BOOL) else\n+                True if data_type in (DataType.PATH, DataType.STRING_LIST) else\n+                False)\n+            gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\n+    return adds, gets\n+\n+def make_setting(settings, call):\n+    name = call.arg_name.lstrip(\"-\")\n+    if name in settings:\n+        setting = settings[name]\n+    else:\n+        setting = settings[name] = Setting(name)\n+    return setting\n+\n+def flags_to_options(flag_str):\n+    flags = set()\n+    for flag in flag_str.split(\"|\"):\n+        flag = flag.strip()\n+        if flag: flags.add(flag)\n+\n+    def pop(flag):\n+        if flag in flags:\n+            flags.remove(flag)\n+            return True\n+        return False\n+\n+    options = [\".legacy = true\"]\n+    if pop(\"ArgsManager::DEBUG_ONLY\"):\n+        options.append(\".debug_only = true\")\n+    if pop(\"ArgsManager::NETWORK_ONLY\"):\n+        options.append(\".network_only = true\")\n+    if pop(\"ArgsManager::SENSITIVE\"):\n+        options.append(\".sensitive = true\")\n+    if pop(\"ArgsManager::DISALLOW_NEGATION\"):\n+      options.append(\".disallow_negation = true\")\n+    if pop(\"ArgsManager::DISALLOW_ELISION\"):\n+        options.append(\".disallow_elision = true\")\n+    pop(\"ArgsManager::ALLOW_ANY\")\n+    if flags:\n+        raise Exception(f\"Unknown flags {flags!r}\")\n+    return options\n+\n+def collect_argument_information(src_dir):\n+    files = get_files_with_args(src_dir)\n+    settings: Dict[str, Setting] = {}\n+    for file in files:\n+        adds, gets = parse_calls(file)\n+        for add in adds:\n+            setting = make_setting(settings, add.call)\n+            setting.adds.append(add)\n+        for get in gets:\n+            setting = make_setting(settings, get.call)\n+            setting.gets.append(get)\n+\n+    for arg_name, setting in settings.items():\n+        # Find duplicate hidden/nonhidden settings\n+        for hadd in setting.adds:\n+            if hadd.hidden_args is not None:\n+                for add in setting.adds:\n+                    if add.hidden_args is None and add.call.context == hadd.call.context and add.call.arg_name == hadd.call.arg_name:\n+                        hadd.nonhidden_arg = add\n+                        break\n+\n+        # Link GetArg/AddArg calls. If any GetArg calls don't have associated\n+        # AddArg calls (only happens in tests) create fake AddArg objects.\n+        for add in setting.adds:\n+            for get in setting.gets:\n+                if get.add is None and same_context(add, get):\n+                    get.add = add\n+        fake_adds = {} # map of (file path, arg name) -> AddArg\n+        for get in setting.gets:\n+            if get.add is None and get.call.arg_name:\n+                key = get.call.file, get.call.arg_name\n+                if key in fake_adds:\n+                    get.add = fake_adds[key]\n+                else:\n+                    add = AddArg(call=get.call, summary=f'\"{get.call.arg_name}\"', help_text=\"\", help_args=(), flags=\"\", category=\"\", fake=True)\n+                    get.add = fake_adds[key] = add\n+                    setting.adds.append(add)\n+\n+        # Figure out setting types and default values.\n+        setting_name = ''.join(NAME_MAP.get(word) or word.capitalize() for word in arg_name.split('-')) + \"Setting\"\n+        counter = collections.Counter()\n+        for add in setting.adds:\n+            add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\n+            add.rel_include_path = re.sub(\"^src/\", \"\", add.include_path)\n+            key = add.call.context, arg_name\n+            add_setting_name = setting_name\n+            if add.hidden_args is None:\n+                counter[key] += 1\n+                if counter[key] > 1: add_setting_name += str(counter[key])\n+            elif add.nonhidden_arg is not None:\n+                continue\n+            else:\n+                add_setting_name += \"Hidden\"\n+            for get in setting.gets:\n+                if not same_context(add, get):\n+                    continue\n+                if get.data_type in add.data_types:\n+                    setting_type = add.data_types[get.data_type]\n+                else:\n+                    setting_type = add.data_types[get.data_type] = SettingType(add_setting_name)\n+                if get.default_value is not False:\n+                    setting_type.defaults.add(get.default_value)\n+\n+            # Clean up data types. Add if empty, remove if redundant, set primary\n+            if len(add.data_types) == 0:\n+                add.data_types[DataType.UNSET] = SettingType(add_setting_name)\n+            add.data_types[min(add.data_types.keys())].primary = True\n+            for data_type in (DataType.DISABLED, DataType.UNSET):\n+                if data_type in add.data_types and not add.data_types[data_type].primary:\n+                    del add.data_types[data_type]\n+\n+            for data_type, setting_type in add.data_types.items():\n+                # If same setting is retrieved as different types, add suffixes to distinguish setting names\n+                if not setting_type.primary:\n+                    setting_type.name += (\n+                        \"List\" if data_type == DataType.STRING_LIST else\n+                        \"Str\" if data_type == DataType.STRING else\n+                        \"Path\" if data_type == DataType.PATH else\n+                        \"Int\" if data_type == DataType.INT else\n+                        \"Bool\" if data_type == DataType.BOOL else\n+                        \"Disabled\" if data_type == DataType.DISABLED else\n+                        \"Unset\" if data_type == DataType.UNSET else\n+                        None\n+                    )\n+                # Only set ::Default<> if there are no GetArg calls returning\n+                # std::optional and there is a single consistent default.\n+                if None not in setting_type.defaults:\n+                    defaults = set()\n+                    for default_value in setting_type.defaults:\n+                        if isinstance(default_value, str):\n+                            for pattern, options in ARG_PATTERNS.items():\n+                                if re.search(pattern, default_value) and options.extern:\n+                                    default_value = False\n+                                    break\n+                                if pattern == default_value and options.namespace:\n+                                    default_value = f\"{options.namespace}::{default_value}\"\n+                                    break\n+                        defaults.add(default_value)\n+                    if len(defaults) == 1:\n+                        default_value = next(iter(defaults))\n+                        assert default_value is not None\n+                        setting_type.default_value = default_value\n+\n+                # Check if default setting value requires any includes or DefaultFn lambda\n+                for pattern, options in ARG_PATTERNS.items():\n+                    if isinstance(setting_type.default_value, str) and re.search(pattern, setting_type.default_value):\n+                        if options.include_path:\n+                            setting_type.includes.add(options.include_path)\n+                        if options.runtime:\n+                            setting_type.default_fn = True\n+                        assert not options.extern\n+\n+            # Check if help string formatting requires any includes or external variables.\n+            for pattern, options in ARG_PATTERNS.items():\n+                if re.search(pattern, add.help_text) or any(re.search(pattern, a) for a in add.help_args):\n+                    if options.include_path:\n+                        add.includes.add(options.include_path)\n+                    if options.runtime:\n+                        add.help_fn = True\n+                    if options.extern:\n+                        add.extern_args.append(pattern)\n+\n+    return settings\n+\n+def setting_definitions(add):\n+    defs = []\n+    includes = set()\n+    # If this is hidden argument and there is non-hidden argument with the same\n+    # name and type information no need to output a separate definition.\n+    if add.nonhidden_arg is None:\n+        includes.update(add.includes)\n+        # Generate setting definition for a given setting name and type.\n+        for data_type, setting_type in sorted(add.data_types.items(), key=lambda p: p[0]):\n+            includes.update(setting_type.includes)\n+            ctype = (\"std::vector<std::string>\" if data_type == DataType.STRING_LIST else\n+                      \"std::string\" if data_type == DataType.STRING else\n+                      \"fs::path\" if data_type == DataType.PATH else\n+                      \"int64_t\" if data_type == DataType.INT else\n+                      \"bool\" if data_type == DataType.BOOL else\n+                      \"common::Disabled\" if data_type == DataType.DISABLED else\n+                      \"common::Unset\" if data_type == DataType.UNSET else\n+                      None)\n+            if None in setting_type.defaults:\n+                ctype = f\"std::optional<{ctype}>\"\n+            help_str = \"\"\n+            if setting_type.primary and add.help_text:\n+                help_str = f\",\\n    {add.help_text}\"\n+            extra = \"\"\n+            help_args = ', '.join(a for a in add.help_args)\n+            default_arg = (setting_type.default_value if setting_type.default_value is not True else\n+                            '\"\"' if data_type == DataType.STRING else\n+                            \"0\" if data_type == DataType.INT else\n+                            \"false\" if data_type == DataType.BOOL else\n+                            f\"{ctype}{{}}\")\n+            if setting_type.default_value is True and (not help_args or help_args != default_arg):\n+                default_arg = False\n+            if default_arg:\n+                namespace = get_file_namespace(add.include_path)\n+                prefix = f\"{namespace}::\"\n+                if default_arg.startswith(prefix):\n+                    default_arg = default_arg[len(prefix):]\n+                if setting_type.default_fn:\n+                    extra += f\"\\n    ::DefaultFn<[] {{ return {default_arg}; }}>\"\n+                else:\n+                    extra += f\"\\n    ::Default<{default_arg}>\"\n+            if ((help_args and setting_type.primary) or default_arg) and help_args != default_arg:\n+                if add.help_fn or add.extern_args:\n+                    lambda_args = \", \".join(f\"const auto& {a}\" for a in [\"help\"] + add.extern_args)\n+                    extra += f\"\\n    ::HelpFn<[]({lambda_args}) {{ return help.Format({help_args}); }}>\"\n+                else:\n+                    extra += f\"\\n    ::HelpArgs<{help_args}>\"\n+            if add.category and add.category != \"OptionsCategory::OPTIONS\" and setting_type.primary:\n+                    extra += f\"\\n    ::Category<{add.category}>\"\n+            options = flags_to_options(add.flags)\n+            # Writing common::SettingOptions{...} instead of just {...}\n+            # should be unneccesary because latter is valid initialization\n+            # syntax in C++20, but unfortunately it is only supported as of\n+            # clang 18. clang 17 and early versions do not seem to allow\n+            # using designated initializers to initialize template\n+            # parameters.\n+            options_str = f\"common::SettingOptions{{{', '.join(options)}}}\" if options else \"\"\n+            defs.append(f\"\\nusing {setting_type.name} = common::Setting<\\n    {add.summary}, {ctype}, {options_str}{help_str}>{extra};\\n\")\n+    return defs, includes\n+\n+def addarg_replacement(add):\n+    new_call = \"\"\n+    if add.hidden_args is None:\n+        new_call = register_str(add)\n+    else:\n+        for hadd in add.hidden_args:\n+            if new_call: new_call += \";\\n\"\n+            spaces=re.match(\" *\", hadd.call.call_text).group()\n+            new_call += f\"{spaces}{register_str(hadd.nonhidden_arg or hadd, hidden=hadd.nonhidden_arg is not None)}\"\n+    return new_call\n+\n+def arg_name(add):\n+    default_data_type = min(add.data_types.keys())\n+    return add.data_types[default_data_type].name\n+\n+def register_str(add, hidden=False):\n+    register_args = \", \".join([add.call.obj_name] + add.extern_args)\n+    return f\"{arg_name(add)}{'::Hidden' if hidden else ''}::Register({register_args})\"\n+\n+def getarg_replacement(get):\n+    if get.data_type == DataType.UNSET:\n+        method = \"Value\"\n+        suffix = \".isNull()\"\n+    elif get.data_type == DataType.DISABLED:\n+        method = \"Value\"\n+        suffix = \".isFalse()\"\n+    else:\n+        method = \"Get\"\n+        suffix = \"\"\n+    setting_type = get.add.data_types.get(get.data_type) or get.add.data_types[min(get.add.data_types.keys())]\n+    default_arg = \"\"\n+    if get.default_value and not setting_type.default_value:\n+        default_arg = (get.default_value if get.default_value is not True else\n+                        '\"\"' if get.data_type == DataType.STRING else\n+                        \"0\" if get.data_type == DataType.INT else\n+                        \"false\" if get.data_type == DataType.BOOL else \"{}\")\n+        default_arg = f\", {default_arg}\"\n+    new_call = ((get.nots + (get.data_type == DataType.UNSET)) % 2) * \"!\"\n+    if get.add.call.namespace and get.call.namespace != get.add.call.namespace:\n+        new_call += f\"{get.add.call.namespace}::\"\n+    new_call += f\"{setting_type.name}::{method}({get.call.obj_name}{default_arg}){suffix}\"\n+    return new_call\n+\n+def add_to_file(file_path, local_include, system_include=(), defs=()):\n+    if os.path.exists(file_path):\n+        with open(file_path, 'r') as f:\n+            lines = f.readlines()\n+    else:\n+        guard = \"BITCOIN_\" + re.sub(\"^src/\", \"\", file_path).replace('/', '_').replace('.', '_').replace('-', '_').upper()\n+        lines = [\n+            f\"#ifndef {guard}\\n\"\n+            f\"#define {guard}\\n\"\n+            \"\\n\"\n+        ]\n+        namespace = get_file_namespace(file_path)\n+        if namespace:\n+            lines.extend([\n+                f\"namespace {namespace} {{\\n\",\n+                f\"}} // namespace {namespace}\\n\"\n+            ])\n+        lines.extend([\"\\n\", f\"#endif // {guard}\\n\"])\n+\n+    # Identify include blocks and their positions\n+    blocks = []\n+    self_include = f\"#include <{file_path.replace('src/', '').replace('.cpp', '.h')}>\"\n+    first = last = self = None",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 515,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `self` is an unfortunate variable name in Python and is only written to, so can be removed.",
      "created_at": "2025-07-01T19:34:48Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2178387847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178387847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 515,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178436553",
      "pull_request_review_id": 2960951696,
      "id": 2178436553,
      "node_id": "PRRC_kwDOABII586B2E3J",
      "diff_hunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template <size_t N, typename T = char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N])\n+    {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t)\n+    {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare name, type, and behavior of command\n+//! line and configuration settings.\n+//!\n+//! The template takes 4 parameters meant to be specified by users, followed by\n+//! additional parameters that are used internally.\n+//!\n+//! @tparam summary string like \"-fastprune\" or \"-blocksdir=<dir>\" with the\n+//!     name of the setting and optional argument information\n+//!\n+//! @tparam T type of the setting. Accepts simple types like bool, int, and\n+//!     std::string, or and composite types like std::optional<std::string> or\n+//!     std::vector<int>.",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 58,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The current incarnation commonly sends in `common::Unset` here which seems worth mentioning.",
      "created_at": "2025-07-01T20:09:25Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2178436553",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178436553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 56,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178444719",
      "pull_request_review_id": 2960951696,
      "id": 2178444719,
      "node_id": "PRRC_kwDOABII586B2G2v",
      "diff_hunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};",
      "path": "src/common/setting.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As noted previously (https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2448864512), `Disabled` is only referenced by tests (*setting_tests.cpp*, also *setting_internal.h*). - Do we really need to introduce it in this PR? What do you think about a boiled down version that only has what is actually used by current code?\r\n\r\n`Enabled` isn't even referenced in tests.",
      "created_at": "2025-07-01T20:15:45Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2178444719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178444719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 17,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178472736",
      "pull_request_review_id": 2960951696,
      "id": 2178472736,
      "node_id": "PRRC_kwDOABII586B2Nsg",
      "diff_hunk": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template <size_t N, typename T = char[N]>\n+struct StringLiteral {",
      "path": "src/common/setting.h",
      "position": 42,
      "original_position": 30,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could add doc-string such as:\r\n```\r\n//! Enables passing string literals as single template arguments to other templates, nullable.\r\n```",
      "created_at": "2025-07-01T20:38:08Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2178472736",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178472736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": 41,
      "original_start_line": 29,
      "start_side": "RIGHT",
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179631216",
      "pull_request_review_id": 2960951696,
      "id": 2179631216,
      "node_id": "PRRC_kwDOABII586B6ohw",
      "diff_hunk": "",
      "path": "src/common/setting.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "8bb9b66488ed8d74a1844fda4bb1f90a8af8277f",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I guess the code in *src/common/setting[_internal].h* deters reviewers as it is heavy on templates compared to the rest of the codebase. Maybe it would feel a bit more concrete by adding some `concept`s for some otherwise extremely untyped parameters... if there are simple-enough ways of expressing them without leading to further deterrence. Started experimenting with something like the following, but somehow ended up with types when we need values and can't see an obvious fix. I'm guessing others may have more concept-fu than me.\r\n\r\n```C++\r\ntemplate <typename T>\r\nconcept HelpFn = requires(T t, std::string& s) { s = t(); };\r\n\r\ntemplate <typename T>\r\nconcept HelpFnOrNull = std::same_as<T, std::nullptr_t> || HelpFn<T>;\r\n\r\ntemplate <StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help_str = nullptr, HelpFnOrNull help_fn = std::nullptr_t, auto default_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\r\nstruct Setting {\r\n```",
      "created_at": "2025-07-02T09:51:30Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2179631216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179631216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179665073",
      "pull_request_review_id": 2960951696,
      "id": 2179665073,
      "node_id": "PRRC_kwDOABII586B6wyx",
      "diff_hunk": "",
      "path": "contrib/devtools/reg-settings.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "73a77f4f01fc479bf015605cb95894b440533a2d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reviewers should probably either review the entire result of running the scripted diff or review the script itself thoroughly.\r\nMade an attempt at reviewing the script. Leaned on `mypy contrib/devtools/reg-settings.py --check-untyped-defs` and `ruff check` to help elucidate types and find issues.\r\n\r\n<details><summary>Suggestion diff</summary>\r\n\r\n```diff\r\ndiff --git a/contrib/devtools/reg-settings.py b/contrib/devtools/reg-settings.py\r\nindex f006fd6b1f..40d5ff07af 100644\r\n--- a/contrib/devtools/reg-settings.py\r\n+++ b/contrib/devtools/reg-settings.py\r\n@@ -37,7 +37,7 @@ DefaultValue = str | bool | None\r\n class SettingType:\r\n     name: str\r\n     primary: bool = False\r\n-    defaults: set[str | None] = field(default_factory=set)\r\n+    defaults: set[str | bool | None] = field(default_factory=set)\r\n     default_value: DefaultValue = False\r\n     includes: set[str] = field(default_factory=set)\r\n     \"\"\"Include paths needed in setting file for default expressions\"\"\"\r\n@@ -90,22 +90,26 @@ class Setting:\r\n @dataclass\r\n class Range:\r\n     start: int\r\n-    end: int\r\n+    end: int | None\r\n \r\n-def get_files_with_args(src_dir):\r\n+def get_files_with_args(src_dir: str) -> list[str]:\r\n     # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\r\n     result = subprocess.run(\r\n         [\r\n-            \"git\", \"grep\", \"-l\", \"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\r\n+            \"git\", \"grep\", \"-l\", r\"AddArg(\\|AddHiddenArgs(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\r\n         ],\r\n         capture_output=True,\r\n         text=True\r\n     )\r\n     return result.stdout.splitlines()\r\n \r\n-def parse_function_args(arg_str):\r\n-    args = []\r\n-    stack = []\r\n+# Converts something like:\r\n+#   '(\"-foo\", strprintf(\"helptext %i\", DEFAULT), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS)'\r\n+# into:\r\n+#   (125, ['\"-foo\"', ' strprintf(\"helptext %i\", DEFAULT', ' ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION', ' OptionsCategory::OPTIONS'])\r\n+def parse_function_args(arg_str: str) -> tuple[int, list[str]]:\r\n+    args: list[str] = []\r\n+    stack: list[str] = []\r\n     quot = False\r\n     for pos, c in enumerate(arg_str):\r\n         if c == '\"':\r\n@@ -128,26 +132,28 @@ def parse_function_args(arg_str):\r\n         args[-1] += c\r\n     return pos, args\r\n \r\n-def parse_calls(file_path):\r\n-    adds = []\r\n-    gets = []\r\n+def parse_calls(file_path: str) -> tuple[list[AddArg], list[GetArg]]:\r\n+    adds: list[AddArg] = []\r\n+    gets: list[GetArg] = []\r\n     context = get_file_context(file_path)\r\n     namespace = get_file_namespace(file_path)\r\n     with open(file_path, 'r') as f:\r\n         content = f.read()\r\n         for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\r\n             call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2)-1:])\r\n+            arg_name_match = re.match(r'\"([^\"=(]+).*', summary)\r\n+            assert arg_name_match\r\n             call = Call(\r\n                 file=file_path,\r\n                 position=match.start(),\r\n                 call_text=content[match.start():match.start(2)+call_len],\r\n                 obj_name=match.group(1),\r\n-                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\r\n+                arg_name=arg_name_match.group(1),\r\n                 context=context,\r\n                 namespace=namespace,\r\n             )\r\n             help_text=help_text.strip()\r\n-            help_args = []\r\n+            help_args: list[str] = []\r\n             if m := re.match(r\"strprintf\\(\", help_text):\r\n                 _, help_args = parse_function_args(help_text[m.end()-1:])\r\n                 help_text = help_args[0].strip()\r\n@@ -162,17 +168,18 @@ def parse_calls(file_path):\r\n             ))\r\n         for match in re.finditer(r'( *)\\b(\\w+)\\.AddHiddenArgs\\((\\{)', content):\r\n             call_len, call_args = parse_function_args(content[match.start(3):])\r\n-            hidden_args = []\r\n+            hidden_args: list[AddArg] = []\r\n             for summary in call_args:\r\n                 summary = summary.strip()\r\n                 if not summary: continue\r\n-                call_text=content[match.start():match.start(3)+call_len+1]\r\n+                arg_name_match = re.match(r'\"([^\"=(]+).*', summary)\r\n+                assert arg_name_match\r\n                 call = Call(\r\n                     file=file_path,\r\n                     position=match.start(),\r\n                     call_text=content[match.start():match.start(3)+call_len+2],\r\n                     obj_name=match.group(2),\r\n-                    arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\r\n+                    arg_name=arg_name_match.group(1),\r\n                     context=context,\r\n                     namespace=namespace,\r\n                 )\r\n@@ -215,6 +222,7 @@ def parse_calls(file_path):\r\n                          DataType.DISABLED if function_name == \"IsArgNegated\" else\r\n                          DataType.UNSET if function_name == \"IsArgSet\" else\r\n                          None)\r\n+            assert data_type\r\n             default_arg = call_args[1].strip() if len(call_args) > 1 else None\r\n             default_value = (\r\n                 True if data_type == DataType.STRING and default_arg == '\"\"' else\r\n@@ -227,7 +235,7 @@ def parse_calls(file_path):\r\n             gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\r\n     return adds, gets\r\n \r\n-def make_setting(settings, call):\r\n+def make_setting(settings: dict[str, Setting], call: Call) -> Setting:\r\n     name = call.arg_name.lstrip(\"-\")\r\n     if name in settings:\r\n         setting = settings[name]\r\n@@ -235,7 +243,7 @@ def make_setting(settings, call):\r\n         setting = settings[name] = Setting(name)\r\n     return setting\r\n \r\n-def flags_to_options(flag_str):\r\n+def flags_to_options(flag_str: str) -> list[str]:\r\n     flags = set()\r\n     for flag in flag_str.split(\"|\"):\r\n         flag = flag.strip()\r\n@@ -263,9 +271,9 @@ def flags_to_options(flag_str):\r\n         raise Exception(f\"Unknown flags {flags!r}\")\r\n     return options\r\n \r\n-def collect_argument_information(src_dir):\r\n+def collect_argument_information(src_dir: str) -> dict[str, Setting]:\r\n     files = get_files_with_args(src_dir)\r\n-    settings: Dict[str, Setting] = {}\r\n+    settings: dict[str, Setting] = {}\r\n     for file in files:\r\n         adds, gets = parse_calls(file)\r\n         for add in adds:\r\n@@ -290,7 +298,7 @@ def collect_argument_information(src_dir):\r\n             for get in setting.gets:\r\n                 if get.add is None and same_context(add, get):\r\n                     get.add = add\r\n-        fake_adds = {} # map of (file path, arg name) -> AddArg\r\n+        fake_adds: dict[tuple[str, str], AddArg] = {} # map of (file path, arg name) -> AddArg\r\n         for get in setting.gets:\r\n             if get.add is None and get.call.arg_name:\r\n                 key = get.call.file, get.call.arg_name\r\n@@ -303,7 +311,7 @@ def collect_argument_information(src_dir):\r\n \r\n         # Figure out setting types and default values.\r\n         setting_name = ''.join(NAME_MAP.get(word) or word.capitalize() for word in arg_name.split('-')) + \"Setting\"\r\n-        counter = collections.Counter()\r\n+        counter: collections.Counter = collections.Counter()\r\n         for add in setting.adds:\r\n             add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\r\n             add.rel_include_path = re.sub(\"^src/\", \"\", add.include_path)\r\n@@ -387,7 +395,7 @@ def collect_argument_information(src_dir):\r\n \r\n     return settings\r\n \r\n-def setting_definitions(add):\r\n+def setting_definitions(add: AddArg) -> tuple[list[str], set[str]]:\r\n     defs = []\r\n     includes = set()\r\n     # If this is hidden argument and there is non-hidden argument with the same\r\n@@ -405,6 +413,7 @@ def setting_definitions(add):\r\n                       \"common::Disabled\" if data_type == DataType.DISABLED else\r\n                       \"common::Unset\" if data_type == DataType.UNSET else\r\n                       None)\r\n+            assert ctype\r\n             if None in setting_type.defaults:\r\n                 ctype = f\"std::optional<{ctype}>\"\r\n             help_str = \"\"\r\n@@ -447,26 +456,28 @@ def setting_definitions(add):\r\n             defs.append(f\"\\nusing {setting_type.name} = common::Setting<\\n    {add.summary}, {ctype}, {options_str}{help_str}>{extra};\\n\")\r\n     return defs, includes\r\n \r\n-def addarg_replacement(add):\r\n+def addarg_replacement(add: AddArg) -> str:\r\n     new_call = \"\"\r\n     if add.hidden_args is None:\r\n         new_call = register_str(add)\r\n     else:\r\n         for hadd in add.hidden_args:\r\n             if new_call: new_call += \";\\n\"\r\n-            spaces=re.match(\" *\", hadd.call.call_text).group()\r\n+            hidden_match = re.match(\" *\", hadd.call.call_text)\r\n+            assert hidden_match\r\n+            spaces=hidden_match.group()\r\n             new_call += f\"{spaces}{register_str(hadd.nonhidden_arg or hadd, hidden=hadd.nonhidden_arg is not None)}\"\r\n     return new_call\r\n \r\n-def arg_name(add):\r\n+def arg_name(add: AddArg) -> str:\r\n     default_data_type = min(add.data_types.keys())\r\n     return add.data_types[default_data_type].name\r\n \r\n-def register_str(add, hidden=False):\r\n+def register_str(add: AddArg, hidden: bool=False) -> str:\r\n     register_args = \", \".join([add.call.obj_name] + add.extern_args)\r\n     return f\"{arg_name(add)}{'::Hidden' if hidden else ''}::Register({register_args})\"\r\n \r\n-def getarg_replacement(get):\r\n+def getarg_replacement(get: GetArg) -> str:\r\n     if get.data_type == DataType.UNSET:\r\n         method = \"Value\"\r\n         suffix = \".isNull()\"\r\n@@ -476,6 +487,7 @@ def getarg_replacement(get):\r\n     else:\r\n         method = \"Get\"\r\n         suffix = \"\"\r\n+    assert get.add\r\n     setting_type = get.add.data_types.get(get.data_type) or get.add.data_types[min(get.add.data_types.keys())]\r\n     default_arg = \"\"\r\n     if get.default_value and not setting_type.default_value:\r\n@@ -490,7 +502,7 @@ def getarg_replacement(get):\r\n     new_call += f\"{setting_type.name}::{method}({get.call.obj_name}{default_arg}){suffix}\"\r\n     return new_call\r\n \r\n-def add_to_file(file_path, local_include, system_include=(), defs=()):\r\n+def add_to_file(file_path: str, local_include: list[str], system_include: list[str]=[], defs: list[str]=[]):\r\n     if os.path.exists(file_path):\r\n         with open(file_path, 'r') as f:\r\n             lines = f.readlines()\r\n@@ -510,17 +522,16 @@ def add_to_file(file_path, local_include, system_include=(), defs=()):\r\n         lines.extend([\"\\n\", f\"#endif // {guard}\\n\"])\r\n \r\n     # Identify include blocks and their positions\r\n-    blocks = []\r\n+    blocks: list[Range] = []\r\n     self_include = f\"#include <{file_path.replace('src/', '').replace('.cpp', '.h')}>\"\r\n-    first = last = self = None\r\n+    first = last = None\r\n     for i, line in enumerate(lines):\r\n         if line.startswith('#include') and \"IWYU pragma: keep\" not in line and not line.startswith(self_include):\r\n             if not blocks or blocks[-1].end is not None:\r\n                 blocks.append(Range(i, None))\r\n         elif blocks and blocks[-1].end is None:\r\n             blocks[-1].end = i\r\n-        elif line.startswith('#include'):\r\n-            self = True\r\n+\r\n         if first is None and not line.startswith(\"//\") and not line.startswith(\"#ifndef\") and not line.startswith(\"#define\") and line != \"\\n\":\r\n             first = i\r\n         if line != \"\\n\" and not line.startswith(\"#endif\") and not line.startswith(\"} // namespace \"):\r\n@@ -528,6 +539,8 @@ def add_to_file(file_path, local_include, system_include=(), defs=()):\r\n \r\n     if len(blocks) == 0:\r\n         # If there are no include blocks, add an empty one where includes should go.\r\n+        assert first\r\n+        assert last\r\n         m = min(first, last)\r\n         blocks.append(Range(m, m))\r\n     if len(blocks) == 1:\r\n@@ -535,6 +548,7 @@ def add_to_file(file_path, local_include, system_include=(), defs=()):\r\n         # local or system includes, but reasonably heuristic is to assume it\r\n         # contains local includes in .cpp files and system includes in .h files.\r\n         if file_path.endswith(\".cpp\"):\r\n+            assert blocks[0].end\r\n             blocks.append(Range(blocks[0].end, blocks[0].end))\r\n         else:\r\n             blocks.insert(0, Range(blocks[0].start, blocks[0].start))\r\n@@ -558,7 +572,7 @@ def add_to_file(file_path, local_include, system_include=(), defs=()):\r\n     with open(file_path, 'w') as f:\r\n         f.writelines(lines)\r\n \r\n-def replace_in_file(file_path, old, new, replacements=None):\r\n+def replace_in_file(file_path: str, old: str, new: str, replacements: list[tuple[str, str]] | None=None):\r\n     with open(file_path, 'r') as f:\r\n         content = f.read()\r\n     if replacements is not None:\r\n@@ -572,29 +586,33 @@ def replace_in_file(file_path, old, new, replacements=None):\r\n     with open(file_path, 'w') as f:\r\n         f.write(new_content)\r\n \r\n-def modify_source_files(settings, git_commit=False):\r\n+def modify_source_files(settings: dict[str, Setting], git_commit: bool=False):\r\n     # map file path->list of (old, new) tuples with GetArg->Get replacements made so far\r\n-    replacements = collections.defaultdict(list)\r\n+    replacements: dict[str, list[tuple[str, str]]] = collections.defaultdict(list)\r\n \r\n     for setting in settings.values():\r\n         for add in setting.adds:\r\n             if not add.fake:\r\n                 replace_in_file(add.call.file, add.call.call_text, addarg_replacement(add))\r\n+            assert add.rel_include_path\r\n             add_to_file(add.call.file, [add.rel_include_path])\r\n \r\n             for get in setting.gets:\r\n                 if get.add is add:\r\n                     replace_in_file(get.call.file, get.call.call_text, getarg_replacement(get),\r\n                                     replacements[get.call.file])\r\n+                    assert get.add.rel_include_path\r\n                     add_to_file(get.call.file, [get.add.rel_include_path])\r\n \r\n             defs, def_includes = setting_definitions(add)\r\n             if defs:\r\n+                assert add.include_path\r\n                 add_to_file(add.include_path,\r\n                             [include for include in def_includes | {\"common/setting.h\"}],\r\n                             [\"string\", \"vector\"], defs)\r\n \r\n             if git_commit and subprocess.run([\"git\", \"status\", \"--porcelain\", \"--untracked-files=no\"], stdout=subprocess.PIPE, check=True).stdout:\r\n+                assert add.include_path\r\n                 subprocess.run([\"git\", \"add\", \"-N\", add.include_path], check=True)\r\n                 msg = f\"{add.rel_include_path}: Add {arg_name(add.nonhidden_arg or add)}\"\r\n                 subprocess.run([\"git\", \"commit\", \"-am\", msg], check=True)\r\n@@ -644,7 +662,6 @@ ARG_PATTERNS = {\r\n     \"DEFAULT_ASMAP_FILENAME\": PatternOptions(include_path=\"init.h\", runtime=True),\r\n     \"DEFAULT_AVOIDPARTIALSPENDS\": PatternOptions(include_path=\"wallet/coincontrol.h\", runtime=True),\r\n     \"DEFAULT_BENCH_FILTER\": PatternOptions(runtime=True),\r\n-    \"DEFAULT_BLOCKFILTERINDEX\": PatternOptions(include_path=\"index/blockfilterindex.h\"),\r\n     \"DEFAULT_BLOCKFILTERINDEX\": PatternOptions(include_path=\"index/blockfilterindex.h\", runtime=True),\r\n     \"DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN\": PatternOptions(include_path=\"net_processing.h\"),\r\n     \"DEFAULT_CHOOSE_DATADIR\": PatternOptions(include_path=\"qt/intro.h\"),\r\n```\r\n\r\n</details>\r\n",
      "created_at": "2025-07-02T10:08:09Z",
      "updated_at": "2025-07-02T13:31:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2179665073",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179665073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179928063",
      "pull_request_review_id": 2960951696,
      "id": 2179928063,
      "node_id": "PRRC_kwDOABII586B7w__",
      "diff_hunk": "",
      "path": "test/lint/check-doc.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "6cc4b31e1e8ec9eea4d41fabf6405c97c8dab558",
      "original_commit_id": "46efdbc5176acbab0d16928f7f24abc4e2790af3",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Before:\r\n```\r\nArgs used        : 215\r\nArgs documented  : 227\r\nArgs undocumented: 0\r\nset()\r\nArgs unknown     : 12\r\n{'-zmqpubhashtxhwm', '-testdatadir', '-zmqpubrawtxhwm', '-zmqpubhashblockhwm', '-zmqpubsequence', '-zmqpubhashtx', '-zmqpubrawblock', '-zmqpubrawtx', '-zmqpubsequencehwm', '-zmqpubrawblockhwm', '-includeconf', '-zmqpubhashblock'}\r\n```\r\nAfter:\r\n```\r\nArgs used        : 205\r\nArgs documented  : 241\r\nArgs undocumented: 0\r\nset()\r\nArgs unknown     : 36\r\n{'SetSetting', 'ReplaceableSetting', '-h', 'ZmqPubRawTxHwmSetting', 'TestNetSetting', 'OutDataSetting', 'ZmqPubHashTxHwmSetting', '-?', 'ZmqPubHashBlockHwmSetting', 'HelpSetting', 'OutPubKeySetting', 'ZmqPubRawBlockSetting', 'CJdnsReachableSetting', 'ZmqPubHashTxSetting', 'LockTimeSetting', 'SignSetting', 'IncludeConfSetting', 'LoadSetting', 'SignetSetting', '-forcecompactdb', 'RegTestSetting', 'ZmqPubSequenceHwmSetting', '-dbcrashratio', 'ZmqPubRawBlockHwmSetting', 'OutScriptSetting', 'NVersionSetting', 'InSetting', 'TestNet4Setting', 'TestDataDirSetting', 'DelOutSetting', 'ZmqPubSequenceSetting', 'ZmqPubRawTxSetting', 'OutAddrSetting', 'DelInSetting', 'OutMultiSigSetting', 'ZmqPubHashBlockSetting'}\r\n```\r\nNote how it's currently mixing the old form with the new form, due to https://github.com/bitcoin/bitcoin/blob/46efdbc5176acbab0d16928f7f24abc4e2790af3/test/lint/check-doc.py#L26\r\n...which is later unioned into the other...\r\nhttps://github.com/bitcoin/bitcoin/blob/46efdbc5176acbab0d16928f7f24abc4e2790af3/test/lint/check-doc.py#L34",
      "created_at": "2025-07-02T12:28:45Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2179928063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179928063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179931410",
      "pull_request_review_id": 2960951696,
      "id": 2179931410,
      "node_id": "PRRC_kwDOABII586B7x0S",
      "diff_hunk": "@@ -50,7 +50,8 @@ def lint_missing_hidden_wallet_args():\n     wallet_hidden_args = check_output(CMD_GREP_WALLET_HIDDEN_ARGS, shell=True).decode('utf8').strip()\n \n     wallet_args = set(re.findall(re.compile(REGEX_DOC), wallet_args))\n-    wallet_hidden_args = set(re.findall(re.compile(r'    \"([^\"=]+)'), wallet_hidden_args))\n+    wallet_hidden_args = set(\n+        argname for argname in re.findall(re.compile(r'([A-Za-z0-9]+Setting)Hidden::Register'), wallet_hidden_args))",
      "path": "test/lint/check-doc.py",
      "position": 1,
      "original_position": 21,
      "commit_id": "b3968352b292c8c69dffbaa9c54a17405e246289",
      "original_commit_id": "46efdbc5176acbab0d16928f7f24abc4e2790af3",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`argname for argname in ` seems unnecessary or unfinished?",
      "created_at": "2025-07-02T12:30:21Z",
      "updated_at": "2025-07-02T12:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r2179931410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179931410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 53,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    }
  ]
}
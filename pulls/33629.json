{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629",
    "id": 2914847026,
    "node_id": "PR_kwDOABII586tvQky",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33629",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33629.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33629.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33629",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33629/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/10872f7ec923803f711cd2c3af93a0e17121330e",
    "number": 33629,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Cluster mempool",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "[Reopening #28676 here as a new PR, because GitHub is slow to load the page making it hard to scroll through and see comments.  Also, that PR was originally opened with a prototype implementation which has changed significantly with the introduction of `TxGraph`.]\r\n\r\nThis is an implementation of the [cluster mempool proposal](https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393).\r\n\r\nThis branch implements the following observable behavior changes:\r\n\r\n - Maintains a partitioning of the mempool into connected clusters (via the `txgraph` class)\r\n - Each cluster is sorted (\"linearized\") to try to optimize for selecting highest-feerate-subsets of a cluster first\r\n - Transaction selection for mining is updated to use the cluster linearizations, selecting highest feerate \"chunks\" first for inclusion in a block template.\r\n - Mempool eviction is updated to use the cluster linearizations, selecting lowest feerate \"chunks\" first for removal.\r\n - The RBF rules are updated to: (a) drop the requirement that no new inputs are introduced; (b) change the feerate requirement to instead check that the feerate diagram of the mempool will strictly improve; (c) replace the direct conflicts limit with a directly-conflicting-clusters limit.\r\n - The CPFP carveout rule is eliminated (it doesn't make sense in a cluster-limited mempool)\r\n - The ancestor and descendant limits are no longer enforced.\r\n - New cluster count/cluster vsize limits are now enforced instead.\r\n - Transaction relay now uses chunk feerate comparisons to determine the order that newly received transactions are announced to peers.\r\n\r\nAdditionally, the cached ancestor and descendant data are dropped from the mempool, along with the multi_index indices that were maintained to sort the mempool by ancestor and descendant feerates. For compatibility (eg with wallet behavior or RPCs exposing this), this information is now calculated dynamically instead.",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/74",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/74",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/74/labels",
      "id": 12610874,
      "node_id": "MI_kwDOABII584AwG06",
      "number": 74,
      "state": "open",
      "title": "31.0",
      "creator": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 8,
      "closed_issues": 1,
      "created_at": "2025-03-25T18:44:16Z",
      "updated_at": "2025-10-16T16:14:16Z"
    },
    "created_at": "2025-10-14T19:50:07Z",
    "updated_at": "2025-10-17T20:19:45Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "e5c7d87864e1fc7fae079c0a3c7cfe0b91b32672",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sdaftuar:2025-02-cluster-mempool",
      "ref": "2025-02-cluster-mempool",
      "sha": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 28761781,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODc2MTc4MQ==",
        "name": "bitcoin",
        "full_name": "sdaftuar/bitcoin",
        "owner": {
          "login": "sdaftuar",
          "id": 7463573,
          "node_id": "MDQ6VXNlcjc0NjM1NzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdaftuar",
          "html_url": "https://github.com/sdaftuar",
          "followers_url": "https://api.github.com/users/sdaftuar/followers",
          "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
          "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
          "repos_url": "https://api.github.com/users/sdaftuar/repos",
          "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/sdaftuar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sdaftuar/bitcoin",
        "archive_url": "https://api.github.com/repos/sdaftuar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sdaftuar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sdaftuar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sdaftuar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sdaftuar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sdaftuar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sdaftuar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sdaftuar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sdaftuar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sdaftuar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sdaftuar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sdaftuar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sdaftuar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sdaftuar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sdaftuar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sdaftuar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sdaftuar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sdaftuar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sdaftuar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sdaftuar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sdaftuar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sdaftuar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sdaftuar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sdaftuar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sdaftuar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sdaftuar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sdaftuar/bitcoin/hooks",
        "svn_url": "https://github.com/sdaftuar/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 304412,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-17T00:13:51Z",
        "created_at": "2015-01-04T02:52:13Z",
        "updated_at": "2024-02-09T22:47:48Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e14451ac87339ed61b8c872f027184a978dd96eb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38039,
        "stargazers_count": 86250,
        "watchers_count": 86250,
        "size": 295042,
        "default_branch": "master",
        "open_issues_count": 820,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-17T14:16:11Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-17T20:50:28Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1819,
    "deletions": 3171,
    "changed_files": 59,
    "commits": 69,
    "review_comments": 62,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUxNDMwNjgwZWNiNzIyZTFkNGVlNGEyNmRhYzU3MjQwNTBmNDFjOWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51430680ecb722e1d4ee4a26dac5724050f41c9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/51430680ecb722e1d4ee4a26dac5724050f41c9e",
      "tree": {
        "sha": "e3a027557cc7b958155db80bd814f882e28f3912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3a027557cc7b958155db80bd814f882e28f3912"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9314113b295af0f4eab6397c5870115b647721d1",
          "sha": "9314113b295af0f4eab6397c5870115b647721d1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9314113b295af0f4eab6397c5870115b647721d1"
        }
      ],
      "message": "Allow moving an Epoch::Marker",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-09T15:28:57Z"
      },
      "sha": "51430680ecb722e1d4ee4a26dac5724050f41c9e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjNzNlNDc0NDgzN2E3ZGMxMzhhOTE3N2RmM2E0OGYzMGExYmE2YzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c73e4744837a7dc138a9177df3a48f30a1ba6c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c73e4744837a7dc138a9177df3a48f30a1ba6c1",
      "tree": {
        "sha": "c77806bebf1ee13b36a2665aa8ba148b874815e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c77806bebf1ee13b36a2665aa8ba148b874815e0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51430680ecb722e1d4ee4a26dac5724050f41c9e",
          "sha": "51430680ecb722e1d4ee4a26dac5724050f41c9e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/51430680ecb722e1d4ee4a26dac5724050f41c9e"
        }
      ],
      "message": "mempool: Store iterators into mapTx in mapNextTx\n\nThis takes the same amount of space as CTransaction pointers, and saves a map\nlookup in many common uses.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-05T23:39:07Z"
      },
      "sha": "6c73e4744837a7dc138a9177df3a48f30a1ba6c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNkMGJlYTIxOTdkOGUxY2E5N2FmNTU4NjMyN2MxYzgwZGJhMmUzNmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd0bea2197d8e1ca97af5586327c1c80dba2e36a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cd0bea2197d8e1ca97af5586327c1c80dba2e36a",
      "tree": {
        "sha": "3652d89543bff03d8c0509c3531ea938521c23d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3652d89543bff03d8c0509c3531ea938521c23d1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c73e4744837a7dc138a9177df3a48f30a1ba6c1",
          "sha": "6c73e4744837a7dc138a9177df3a48f30a1ba6c1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6c73e4744837a7dc138a9177df3a48f30a1ba6c1"
        }
      ],
      "message": "Allow moving CTxMemPoolEntry objects, disallow copying",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-09T15:30:12Z"
      },
      "sha": "cd0bea2197d8e1ca97af5586327c1c80dba2e36a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1NzA2ZWE0NjJhODFiYTMxOGExNDVkZTE4NjljNzhjNzdjNTczNDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5706ea462a81ba318a145de1869c78c77c57341",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c5706ea462a81ba318a145de1869c78c77c57341",
      "tree": {
        "sha": "e5553228e21c7ccce891257182c1ad16edf1a460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5553228e21c7ccce891257182c1ad16edf1a460"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd0bea2197d8e1ca97af5586327c1c80dba2e36a",
          "sha": "cd0bea2197d8e1ca97af5586327c1c80dba2e36a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cd0bea2197d8e1ca97af5586327c1c80dba2e36a"
        }
      ],
      "message": "Make CTxMemPoolEntry derive from TxGraph::Ref",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-09T15:36:34Z"
      },
      "sha": "c5706ea462a81ba318a145de1869c78c77c57341"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxZDliZmNjYTYyYmQ2YzE2ODQ3NmY2YWY0NDJiZDcwNDlmZjg3MmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91d9bfcca62bd6c168476f6af442bd7049ff872e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/91d9bfcca62bd6c168476f6af442bd7049ff872e",
      "tree": {
        "sha": "2eabcbb11e510ee80a4185c0d29f36f08594cd7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eabcbb11e510ee80a4185c0d29f36f08594cd7b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5706ea462a81ba318a145de1869c78c77c57341",
          "sha": "c5706ea462a81ba318a145de1869c78c77c57341",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c5706ea462a81ba318a145de1869c78c77c57341"
        }
      ],
      "message": "Create a txgraph inside CTxMemPool",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-09T16:04:14Z"
      },
      "sha": "91d9bfcca62bd6c168476f6af442bd7049ff872e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgzYzg3NTNhYmY5YzJhZjc1Y2ZiYWNkNTQ4ODYwNTMzMmRhNTg4YTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83c8753abf9c2af75cfbacd5488605332da588a4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/83c8753abf9c2af75cfbacd5488605332da588a4",
      "tree": {
        "sha": "d464c71c48aa5e5423534679d5eef98ccb8b4a1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d464c71c48aa5e5423534679d5eef98ccb8b4a1c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91d9bfcca62bd6c168476f6af442bd7049ff872e",
          "sha": "91d9bfcca62bd6c168476f6af442bd7049ff872e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/91d9bfcca62bd6c168476f6af442bd7049ff872e"
        }
      ],
      "message": "Use named constant for acceptable iters",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-09-13T13:13:00Z"
      },
      "sha": "83c8753abf9c2af75cfbacd5488605332da588a4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYyZWZmMTdjNmM0ZmM5NDVmNmZkNzYxNTY0MjEyODAyMTA3YTFkN2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2eff17c6c4fc945f6fd761564212802107a1d7d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f2eff17c6c4fc945f6fd761564212802107a1d7d",
      "tree": {
        "sha": "e5c73c2a8fdbd843bf90a708c2456dacbd13bc31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5c73c2a8fdbd843bf90a708c2456dacbd13bc31"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83c8753abf9c2af75cfbacd5488605332da588a4",
          "sha": "83c8753abf9c2af75cfbacd5488605332da588a4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/83c8753abf9c2af75cfbacd5488605332da588a4"
        }
      ],
      "message": "Add sigops adjusted weight calculator",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-30T18:16:21Z"
      },
      "sha": "f2eff17c6c4fc945f6fd761564212802107a1d7d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkM2I1M2JjZjExYzIzYmRhZDMwMzFmNDNmY2YxZTMwNzUyMWQ2ODI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d3b53bcf11c23bdad3031f43fcf1e307521d682",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3b53bcf11c23bdad3031f43fcf1e307521d682",
      "tree": {
        "sha": "f63541890ad2a6db9950ebf96a4a050878edb7f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f63541890ad2a6db9950ebf96a4a050878edb7f9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2eff17c6c4fc945f6fd761564212802107a1d7d",
          "sha": "f2eff17c6c4fc945f6fd761564212802107a1d7d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f2eff17c6c4fc945f6fd761564212802107a1d7d"
        }
      ],
      "message": "Add accessor for sigops-adjusted weight",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-04T19:54:20Z"
      },
      "sha": "1d3b53bcf11c23bdad3031f43fcf1e307521d682"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhjNTlhYTU2Y2I4YjhhYzk3ODQ5MTZjMTIwOTVkNmJiZDdlOGVmODc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c59aa56cb8b8ac9784916c12095d6bbd7e8ef87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8c59aa56cb8b8ac9784916c12095d6bbd7e8ef87",
      "tree": {
        "sha": "9dc61ce8b052ca1652cfb6da181348a08376b31f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dc61ce8b052ca1652cfb6da181348a08376b31f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d3b53bcf11c23bdad3031f43fcf1e307521d682",
          "sha": "1d3b53bcf11c23bdad3031f43fcf1e307521d682",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3b53bcf11c23bdad3031f43fcf1e307521d682"
        }
      ],
      "message": "Add transactions to txgraph, but without cluster dependencies\n\nEffectively this is treating all transactions in txgraph as being in a cluster\nof size 1.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-09T17:43:43Z"
      },
      "sha": "8c59aa56cb8b8ac9784916c12095d6bbd7e8ef87"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI4MDFlODA1MjhhM2ExYzI5NDlhOGZkYTYzMzg4ODI2MTNhNjczZTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2801e80528a3a1c2949a8fda6338882613a673e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2801e80528a3a1c2949a8fda6338882613a673e5",
      "tree": {
        "sha": "9d085b985995890696211c65cfba45d65c25e58f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d085b985995890696211c65cfba45d65c25e58f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c59aa56cb8b8ac9784916c12095d6bbd7e8ef87",
          "sha": "8c59aa56cb8b8ac9784916c12095d6bbd7e8ef87",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8c59aa56cb8b8ac9784916c12095d6bbd7e8ef87"
        }
      ],
      "message": "Add new (unused) limits for cluster size/count",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-21T10:17:40Z"
      },
      "sha": "2801e80528a3a1c2949a8fda6338882613a673e5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQyOWJkYmVjZmRlOTNjNTQzNzRmYjMwOThlMzU3ZTE4NTU2ZTdlMjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/429bdbecfde93c54374fb3098e357e18556e7e21",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/429bdbecfde93c54374fb3098e357e18556e7e21",
      "tree": {
        "sha": "7c914e53a38535f52bc2211a669a70a93b51e8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c914e53a38535f52bc2211a669a70a93b51e8c4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2801e80528a3a1c2949a8fda6338882613a673e5",
          "sha": "2801e80528a3a1c2949a8fda6338882613a673e5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2801e80528a3a1c2949a8fda6338882613a673e5"
        }
      ],
      "message": "test: update feature_rbf.py replacement test\n\nPreparatory commit to the rbf functional test, before changes are made to the\nrbf rules as part of cluster mempool.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-09T19:58:41Z"
      },
      "sha": "429bdbecfde93c54374fb3098e357e18556e7e21"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhkNmM3ZTQ0MDFiZDkxOWM0YjM5MGJkNTQyOWNiZGRmOTI0MDE1NzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d6c7e4401bd919c4b390bd5429cbddf92401575",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6c7e4401bd919c4b390bd5429cbddf92401575",
      "tree": {
        "sha": "7c0cc6ffe09da095c73171ca2f0f5a4962a73f38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c0cc6ffe09da095c73171ca2f0f5a4962a73f38"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/429bdbecfde93c54374fb3098e357e18556e7e21",
          "sha": "429bdbecfde93c54374fb3098e357e18556e7e21",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/429bdbecfde93c54374fb3098e357e18556e7e21"
        }
      ],
      "message": "[test] rework/delete feature_rbf tests requiring large clusters",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-14T18:03:42Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2025-09-03T17:09:47Z"
      },
      "sha": "8d6c7e4401bd919c4b390bd5429cbddf92401575"
    },
    {
      "event": "renamed",
      "id": 20278200903,
      "node_id": "RTE_lADOABII587RhpYCzwAAAAS4rMpH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278200903",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T19:50:10Z",
      "rename": {
        "from": "Cluster mempool ",
        "to": "Cluster mempool"
      }
    },
    {
      "event": "commented",
      "id": 3403378806,
      "node_id": "IC_kwDOABII587K23B2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3403378806",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T19:50:14Z",
      "updated_at": "2025-10-17T02:55:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33629.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33616](https://github.com/bitcoin/bitcoin/pull/33616) (policy: don't CheckEphemeralSpends on reorg by instagibbs)\n* [#33421](https://github.com/bitcoin/bitcoin/pull/33421) (node: add `BlockTemplateCache` by ismaelsadeeq)\n* [#33214](https://github.com/bitcoin/bitcoin/pull/33214) (rpc: require integer verbosity; remove boolean 'verbose' by fqlx)\n* [#33192](https://github.com/bitcoin/bitcoin/pull/33192) (refactor: unify container presence checks by l0rinc)\n* [#33191](https://github.com/bitcoin/bitcoin/pull/33191) (net: Provide block templates to peers on request by ajtowns)\n* [#32587](https://github.com/bitcoin/bitcoin/pull/32587) (test: Fix reorg patterns in tests to use proper fork-based approach by yuvicc)\n* [#31974](https://github.com/bitcoin/bitcoin/pull/31974) (Drop testnet3 by Sjors)\n* [#31682](https://github.com/bitcoin/bitcoin/pull/31682) ([IBD] specialize CheckBlock's input & coinbase checks by l0rinc)\n* [#31382](https://github.com/bitcoin/bitcoin/pull/31382) (kernel: Flush in ChainstateManager destructor by TheCharlatan)\n* [#31260](https://github.com/bitcoin/bitcoin/pull/31260) (scripted-diff: Type-safe settings retrieval by ryanofsky)\n* [#30342](https://github.com/bitcoin/bitcoin/pull/30342) (kernel, logging: Pass Logger instances to kernel objects by ryanofsky)\n* [#30277](https://github.com/bitcoin/bitcoin/pull/30277) ([DO NOT MERGE] Erlay: bandwidth-efficient transaction relay protocol (Full implementation) by sr-gi)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo over LogPrintf [WIP, NOMERGE, DRAFT] by maflcko)\n* [#28690](https://github.com/bitcoin/bitcoin/pull/28690) (build: Introduce internal kernel library by TheCharlatan)\n* [#17783](https://github.com/bitcoin/bitcoin/pull/17783) (common: Disallow calling IsArgSet() on ALLOW_LIST options by ryanofsky)\n* [#17581](https://github.com/bitcoin/bitcoin/pull/17581) (refactor: Remove settings merge reverse precedence code by ryanofsky)\n* [#17580](https://github.com/bitcoin/bitcoin/pull/17580) (refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags by ryanofsky)\n* [#17493](https://github.com/bitcoin/bitcoin/pull/17493) (util: Forbid ambiguous multiple assignments in config file by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- the the -> the [duplicate article; makes the sentence awkward/inaccurate] (in mempool_stress.cpp: \"// transactions we'll \"mine\" in the the benchmark.\")\n- with  more -> with more [extra space between words] (in mempool_package_rbf.py log message)\n\n<sup>drahtbot_id_5_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#issuecomment-3403378806",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33629"
    },
    {
      "event": "labeled",
      "id": 20278488088,
      "node_id": "LE_lADOABII587RhpYCzwAAAAS4sSwY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278488088",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:05:03Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 20278488104,
      "node_id": "LE_lADOABII587RhpYCzwAAAAS4sSwo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278488104",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:05:03Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "labeled",
      "id": 20278488114,
      "node_id": "LE_lADOABII587RhpYCzwAAAAS4sSwy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278488114",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:05:03Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "milestoned",
      "id": 20278491841,
      "node_id": "MIE_lADOABII587RhpYCzwAAAAS4sTrB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278491841",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:05:15Z",
      "milestone": {
        "title": "31.0"
      }
    },
    {
      "event": "reviewed",
      "id": 3341892072,
      "node_id": "PRR_kwDOABII587HMTno",
      "url": null,
      "actor": null,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-15T20:32:55Z",
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#pullrequestreview-3341892072",
      "submitted_at": "2025-10-15T20:32:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
    },
    {
      "event": "reviewed",
      "id": 3340512731,
      "node_id": "PRR_kwDOABII587HHC3b",
      "url": null,
      "actor": null,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-15T21:58:25Z",
      "author_association": "MEMBER",
      "body": "reviewed through 8cdd7bb11adeaeb4709c670bef4b57362cfbebcb\r\n\r\nfocusing on logic this time around, only glanced at tests",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#pullrequestreview-3340512731",
      "submitted_at": "2025-10-15T21:58:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI5Y2JjYTc2NzYyNThkZDViY2JkYTA4NmJjMGRlMGQ1ODIyMjhjZGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9cbca7676258dd5bcbda086bc0de0d582228cdb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b9cbca7676258dd5bcbda086bc0de0d582228cdb",
      "tree": {
        "sha": "996d05f54bec766ad39d6379a7656054e3b68179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/996d05f54bec766ad39d6379a7656054e3b68179"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d6c7e4401bd919c4b390bd5429cbddf92401575",
          "sha": "8d6c7e4401bd919c4b390bd5429cbddf92401575",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6c7e4401bd919c4b390bd5429cbddf92401575"
        }
      ],
      "message": "Do not allow mempool clusters to exceed configured limits\n\nInclude an adjustment to mempool_tests.cpp due to the additional memory used by\ntxgraph.\n\nIncludes a temporary change to the mempool_ephemeral_dust.py functional test,\ndue to validation checks being reordered. This change will revert once the RBF\nrules are changed in a later commit.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:58:08Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-21T12:58:04Z"
      },
      "sha": "b9cbca7676258dd5bcbda086bc0de0d582228cdb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQyZjc1YzU1NWNhZjFmNmE2MmI4YWIxZWYwZjI1NDNmMGM4NGNjMzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2f75c555caf1f6a62b8ab1ef0f2543f0c84cc39",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d2f75c555caf1f6a62b8ab1ef0f2543f0c84cc39",
      "tree": {
        "sha": "abaf3205e8d259c36188923f8f0cd8bbfe8d53fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abaf3205e8d259c36188923f8f0cd8bbfe8d53fb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9cbca7676258dd5bcbda086bc0de0d582228cdb",
          "sha": "b9cbca7676258dd5bcbda086bc0de0d582228cdb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b9cbca7676258dd5bcbda086bc0de0d582228cdb"
        }
      ],
      "message": "Check cluster limits when using -walletrejectlongchains",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:58:08Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-23T14:26:05Z"
      },
      "sha": "d2f75c555caf1f6a62b8ab1ef0f2543f0c84cc39"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ3NTk5ZjI0YTBlMWU3ZTU0YmNhNzIwOGYxMDQ3MjBjNWVlY2NlYmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7599f24a0e1e7e54bca7208f104720c5eeccebd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d7599f24a0e1e7e54bca7208f104720c5eeccebd",
      "tree": {
        "sha": "89147708519766e8b7d6725c50fd63c11433e409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89147708519766e8b7d6725c50fd63c11433e409"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2f75c555caf1f6a62b8ab1ef0f2543f0c84cc39",
          "sha": "d2f75c555caf1f6a62b8ab1ef0f2543f0c84cc39",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d2f75c555caf1f6a62b8ab1ef0f2543f0c84cc39"
        }
      ],
      "message": "Rework miner_tests to not require large cluster limit",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:58:08Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-08T18:36:48Z"
      },
      "sha": "d7599f24a0e1e7e54bca7208f104720c5eeccebd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJlZDJiNWM5MWE2MGRhYzBhMDJiMTZmM2NhM2JjMzQ4Zjg0N2YwZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bed2b5c91a60dac0a02b16f3ca3bc348f847f0d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bed2b5c91a60dac0a02b16f3ca3bc348f847f0d0",
      "tree": {
        "sha": "5492c2efbcf679d7c9a25e5c2efb92ec1713585c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5492c2efbcf679d7c9a25e5c2efb92ec1713585c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7599f24a0e1e7e54bca7208f104720c5eeccebd",
          "sha": "d7599f24a0e1e7e54bca7208f104720c5eeccebd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d7599f24a0e1e7e54bca7208f104720c5eeccebd"
        }
      ],
      "message": "Limit mempool size based on chunk feerate\n\nRather than evicting the transactions with the lowest descendant feerate,\ninstead evict transactions that have the lowest chunk feerate.\n\nOnce mining is implemented based on choosing transactions with highest chunk\nfeerate (see next commit), mining and eviction will be opposites, so that we\nwill evict the transactions that would be mined last.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:58:08Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-21T00:55:50Z"
      },
      "sha": "bed2b5c91a60dac0a02b16f3ca3bc348f847f0d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg5MDA1ZDg4NzI4YmYzZTAwNDY4OTRjZDc5MDZjYmZjMjIxMWQzODc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89005d88728bf3e0046894cd7906cbfc2211d387",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/89005d88728bf3e0046894cd7906cbfc2211d387",
      "tree": {
        "sha": "edece413df09f30fe2db9deeb5adb5f089dd7345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edece413df09f30fe2db9deeb5adb5f089dd7345"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bed2b5c91a60dac0a02b16f3ca3bc348f847f0d0",
          "sha": "bed2b5c91a60dac0a02b16f3ca3bc348f847f0d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bed2b5c91a60dac0a02b16f3ca3bc348f847f0d0"
        }
      ],
      "message": "bench: rewrite ComplexMemPool to not create oversized clusters",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:58:08Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-09T14:35:55Z"
      },
      "sha": "89005d88728bf3e0046894cd7906cbfc2211d387"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE4YmU3NDNhZWI0MmVjOGFiNjEzZjgyMjk4OWExMWEyZjJjZTcwYWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
      "tree": {
        "sha": "4ce916cbc0f8624b889b0d1cd31098edef460c39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ce916cbc0f8624b889b0d1cd31098edef460c39"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89005d88728bf3e0046894cd7906cbfc2211d387",
          "sha": "89005d88728bf3e0046894cd7906cbfc2211d387",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/89005d88728bf3e0046894cd7906cbfc2211d387"
        }
      ],
      "message": "Select transactions for blocks based on chunk feerate\n\nCo-Authored-By: Gregory Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:59:46Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-21T01:16:36Z"
      },
      "sha": "a8be743aeb42ec8ab613f822989a11a2f2ce70ac"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFmYjkwMDNiYzYwMmE3N2VkMTViZjRlNzkyNzdkOTYwOTM3YTVjMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afb9003bc602a77ed15bf4e79277d960937a5c28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/afb9003bc602a77ed15bf4e79277d960937a5c28",
      "tree": {
        "sha": "7c5e2234d54635253ed6cf3446311db6c96a94f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c5e2234d54635253ed6cf3446311db6c96a94f8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
          "sha": "a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a8be743aeb42ec8ab613f822989a11a2f2ce70ac"
        }
      ],
      "message": "test: rewrite PopulateMempool to not violate mempool policy (cluster size) limits",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:59:46Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-09T14:43:11Z"
      },
      "sha": "afb9003bc602a77ed15bf4e79277d960937a5c28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxYTA0NTcwMGVlMTNhNjc0NmM0ZjRkZTI1M2U2NGEwYjhhNjEzMzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31a045700ee13a6746c4f4de253e64a0b8a61334",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/31a045700ee13a6746c4f4de253e64a0b8a61334",
      "tree": {
        "sha": "1a2491ddcb58497eb01afdea8aea37e133c436b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a2491ddcb58497eb01afdea8aea37e133c436b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afb9003bc602a77ed15bf4e79277d960937a5c28",
          "sha": "afb9003bc602a77ed15bf4e79277d960937a5c28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/afb9003bc602a77ed15bf4e79277d960937a5c28"
        }
      ],
      "message": "policy: Remove CPFP carveout rule\n\nThe addition of a cluster size limit makes the CPFP carveout rule useless,\nbecause carveout cannot be used to bypass the cluster size limit. Remove this\npolicy rule and update tests to no longer rely on the behavior.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-15T23:59:46Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-03T14:54:30Z"
      },
      "sha": "31a045700ee13a6746c4f4de253e64a0b8a61334"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20307299673,
      "node_id": "HRFPE_lADOABII587RhpYCzwAAAAS6aM1Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20307299673",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "63b1180b142a83d4c266820e0a4415ee95cf1e26",
      "commit_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits/63b1180b142a83d4c266820e0a4415ee95cf1e26",
      "created_at": "2025-10-16T00:02:56Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2MzE1YzI0MzI2MDE2Y2ZhZWU1YmQwNDZlOGIyZTRlMTA4OGFjNmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "tree": {
        "sha": "cda8f397f89c3887ee43211a740becd6cc5fff04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cda8f397f89c3887ee43211a740becd6cc5fff04"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31a045700ee13a6746c4f4de253e64a0b8a61334",
          "sha": "31a045700ee13a6746c4f4de253e64a0b8a61334",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/31a045700ee13a6746c4f4de253e64a0b8a61334"
        }
      ],
      "message": "Implement new RBF logic for cluster mempool\n\nWith a total ordering on mempool transactions, we are now able to calculate a\ntransaction's mining score at all times. Use this to improve the RBF logic:\n\n- we no longer enforce a \"no new unconfirmed parents\" rule\n\n- we now require that the mempool's feerate diagram must improve in order\n  to accept a replacement\n\n- the topology restrictions for conflicts in the package rbf setting have been\n  eliminated\n\nRevert the temporary change to mempool_ephemeral_dust.py that were previously\nmade due to RBF validation checks being reordered.\n\nCo-authored-by: Gregory Sanders <gsanders87@gmail.com>, glozow <gloriajzhao@gmail.com>",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-21T17:19:32Z"
      },
      "sha": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIyM2NiNWYzNWMyNmVhYjM4YTM4NTczYzI0ZjZhNjNkMTYwYmMwMDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b23cb5f35c26eab38a38573c24f6a63d160bc005",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b23cb5f35c26eab38a38573c24f6a63d160bc005",
      "tree": {
        "sha": "cda8f397f89c3887ee43211a740becd6cc5fff04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cda8f397f89c3887ee43211a740becd6cc5fff04"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
          "sha": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e6315c24326016cfaee5bd046e8b2e4e1088ac6b"
        }
      ],
      "message": "==== END CLUSTER IMPLEMENTATION ====",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-17T15:36:11Z"
      },
      "sha": "b23cb5f35c26eab38a38573c24f6a63d160bc005"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAxNGU0NWNjODE3ZjVkZGI3NjgzMWFiOTQ5MGZlZDI5NWRmOTRjZWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/014e45cc817f5ddb76831ab9490fed295df94cef",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/014e45cc817f5ddb76831ab9490fed295df94cef",
      "tree": {
        "sha": "cda8f397f89c3887ee43211a740becd6cc5fff04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cda8f397f89c3887ee43211a740becd6cc5fff04"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b23cb5f35c26eab38a38573c24f6a63d160bc005",
          "sha": "b23cb5f35c26eab38a38573c24f6a63d160bc005",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b23cb5f35c26eab38a38573c24f6a63d160bc005"
        }
      ],
      "message": "==== BEGIN MEMPOOL CLEANUP ====",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-17T15:36:45Z"
      },
      "sha": "014e45cc817f5ddb76831ab9490fed295df94cef"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdjNGNkODZhZDQ2MzE2MDgyY2RhM2FhNjMxNjg3MDM3YTJmMWY2ZDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c4cd86ad46316082cda3aa631687037a2f1f6d4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4cd86ad46316082cda3aa631687037a2f1f6d4",
      "tree": {
        "sha": "0929f986d8788e08119a76069eb317840dbfacc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0929f986d8788e08119a76069eb317840dbfacc9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/014e45cc817f5ddb76831ab9490fed295df94cef",
          "sha": "014e45cc817f5ddb76831ab9490fed295df94cef",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/014e45cc817f5ddb76831ab9490fed295df94cef"
        }
      ],
      "message": "Remove the ancestor and descendant indices from the mempool",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-21T18:45:20Z"
      },
      "sha": "7c4cd86ad46316082cda3aa631687037a2f1f6d4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzNmYwNGU3NzBlZWI0ZWY4NDc3NzIyY2IxZjIzZjI5NzQ2ODgzYTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/936f04e770eeb4ef8477722cb1f23f29746883a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/936f04e770eeb4ef8477722cb1f23f29746883a1",
      "tree": {
        "sha": "6b355c7d7b341075afdd3f156d6b20c403ecaadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b355c7d7b341075afdd3f156d6b20c403ecaadf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c4cd86ad46316082cda3aa631687037a2f1f6d4",
          "sha": "7c4cd86ad46316082cda3aa631687037a2f1f6d4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4cd86ad46316082cda3aa631687037a2f1f6d4"
        }
      ],
      "message": "Use cluster linearization for transaction relay sort order\n\nPreviously, transaction batches were first sorted by ancestor count and then\nfeerate, to ensure transactions are announced in a topologically valid order,\nwhile prioritizing higher feerate transactions. Ancestor count is a crude\ntopological sort criteria, so replace this with linearization order so that the\nhighest feerate transactions (as would be observed by the mining algorithm) are\nrelayed before lower feerate ones, in a topologically valid way.\n\nThis also fixes a test that only worked due to the ancestor-count-based sort\norder.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-27T18:47:42Z"
      },
      "sha": "936f04e770eeb4ef8477722cb1f23f29746883a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliMzE4MzZhYmZjMDg2ZTQ2OTNlY2RiMWNlYWVjMGE4ZTIxZGJiOGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b31836abfc086e4693ecdb1ceaec0a8e21dbb8f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b31836abfc086e4693ecdb1ceaec0a8e21dbb8f",
      "tree": {
        "sha": "fd823ed6dc3e717c30e6f104613a194767b57854",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd823ed6dc3e717c30e6f104613a194767b57854"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/936f04e770eeb4ef8477722cb1f23f29746883a1",
          "sha": "936f04e770eeb4ef8477722cb1f23f29746883a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/936f04e770eeb4ef8477722cb1f23f29746883a1"
        }
      ],
      "message": "Remove CTxMemPool::GetSortedDepthAndScore\n\nThe mempool clusters and linearization permit sorting the mempool topologically\nwithout making use of ancestor counts (as long as the graph is not oversized).\n\nCo-authored-by: Pieter Wuille <pieter@wuille.net>",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-28T14:20:04Z"
      },
      "sha": "9b31836abfc086e4693ecdb1ceaec0a8e21dbb8f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4Y2M5MGY5MWY3NThkM2RhZTU1ZWJkYTQyMDljNDMwNDg3NjgyY2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18cc90f91f758d3dae55ebda4209c430487682cc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18cc90f91f758d3dae55ebda4209c430487682cc",
      "tree": {
        "sha": "2411ae9d76ee063f50066063d61f77628983db20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2411ae9d76ee063f50066063d61f77628983db20"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b31836abfc086e4693ecdb1ceaec0a8e21dbb8f",
          "sha": "9b31836abfc086e4693ecdb1ceaec0a8e21dbb8f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b31836abfc086e4693ecdb1ceaec0a8e21dbb8f"
        }
      ],
      "message": "Reimplement GetTransactionAncestry() to not rely on cached data\n\nIn preparation for removing ancestor data from CTxMemPoolEntry, recalculate the\nancestor statistics on demand wherever needed.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-28T18:47:40Z"
      },
      "sha": "18cc90f91f758d3dae55ebda4209c430487682cc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEzNTk4MTg0ZjBmZDU3ODNiYmIwOTZjZDQ3NGRjNmY2ZDhmZjNlZDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13598184f0fd5783bbb096cd474dc6f6d8ff3ed6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/13598184f0fd5783bbb096cd474dc6f6d8ff3ed6",
      "tree": {
        "sha": "70cfaff41e299fa884deb7e13d03f4efba98b64d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70cfaff41e299fa884deb7e13d03f4efba98b64d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18cc90f91f758d3dae55ebda4209c430487682cc",
          "sha": "18cc90f91f758d3dae55ebda4209c430487682cc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18cc90f91f758d3dae55ebda4209c430487682cc"
        }
      ],
      "message": "rpc: Calculate ancestor data from scratch for mempool rpc calls",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-28T19:07:05Z"
      },
      "sha": "13598184f0fd5783bbb096cd474dc6f6d8ff3ed6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyOWNlYzRmNmRkYjg4MDIxMGI3ZTAwMTFmZmY4YjBhNWY4OGM5MzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/729cec4f6ddb880210b7e0011fff8b0a5f88c933",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/729cec4f6ddb880210b7e0011fff8b0a5f88c933",
      "tree": {
        "sha": "24af1134c3a14026280ee09494e4b64c716b4aaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24af1134c3a14026280ee09494e4b64c716b4aaf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13598184f0fd5783bbb096cd474dc6f6d8ff3ed6",
          "sha": "13598184f0fd5783bbb096cd474dc6f6d8ff3ed6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/13598184f0fd5783bbb096cd474dc6f6d8ff3ed6"
        }
      ],
      "message": "Remove dependency on cached ancestor data in mini-miner",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-28T21:55:16Z"
      },
      "sha": "729cec4f6ddb880210b7e0011fff8b0a5f88c933"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliYjg3YjgyYmNjMzk3N2NiZGEzOGNkZTU5NWE3MDhmZTRmNzA2MjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bb87b82bcc3977cbda38cde595a708fe4f70625",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb87b82bcc3977cbda38cde595a708fe4f70625",
      "tree": {
        "sha": "742e7550692147e9c1cbd512cd17c49b6e9d1cd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/742e7550692147e9c1cbd512cd17c49b6e9d1cd6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/729cec4f6ddb880210b7e0011fff8b0a5f88c933",
          "sha": "729cec4f6ddb880210b7e0011fff8b0a5f88c933",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/729cec4f6ddb880210b7e0011fff8b0a5f88c933"
        }
      ],
      "message": "Stop enforcing ancestor size/count limits\n\nThe cluster limits should be sufficient.\n\nCo-Authored-By: Gregory Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-09-28T21:59:15Z"
      },
      "sha": "9bb87b82bcc3977cbda38cde595a708fe4f70625"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNmMmY1MjExYThmYWIxNDM4ZmViMWNmMWNjYjg2ZGNjZWRkNGI2Yzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2f5211a8fab1438feb1cf1ccb86dccedd4b6c8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2f5211a8fab1438feb1cf1ccb86dccedd4b6c8",
      "tree": {
        "sha": "90abddb9f28d332163fe7a1b5a1429c91fd24054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90abddb9f28d332163fe7a1b5a1429c91fd24054"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bb87b82bcc3977cbda38cde595a708fe4f70625",
          "sha": "9bb87b82bcc3977cbda38cde595a708fe4f70625",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb87b82bcc3977cbda38cde595a708fe4f70625"
        }
      ],
      "message": "Add test case for cluster size limits to TRUC logic",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-14T10:59:01Z"
      },
      "sha": "cf2f5211a8fab1438feb1cf1ccb86dccedd4b6c8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIyM2IxNTZjN2JkZjExMmE0ZmU2NGFjZDcxZTM5OGNjN2MwYmQyMzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b23b156c7bdf112a4fe64acd71e398cc7c0bd231",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b23b156c7bdf112a4fe64acd71e398cc7c0bd231",
      "tree": {
        "sha": "ad20c6069043a67b174055ee46d6e732c6ed6c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad20c6069043a67b174055ee46d6e732c6ed6c18"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2f5211a8fab1438feb1cf1ccb86dccedd4b6c8",
          "sha": "cf2f5211a8fab1438feb1cf1ccb86dccedd4b6c8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2f5211a8fab1438feb1cf1ccb86dccedd4b6c8"
        }
      ],
      "message": "Use mempool/txgraph to determine if a tx has descendants\n\nRemove a reference to GetCountWithDescendants() in preparation for removing\nthis function and the associated cached state from the mempool.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-03T15:19:15Z"
      },
      "sha": "b23b156c7bdf112a4fe64acd71e398cc7c0bd231"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE5ZjZlYTMwODgyZDk4MWY0MGIxMTZmNzVjNDI2N2YwMDEyNTdkZDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9f6ea30882d981f40b116f75c4267f001257dd7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f6ea30882d981f40b116f75c4267f001257dd7",
      "tree": {
        "sha": "9018efd20aecfbe0642c7a8903d98d9ecd3708bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9018efd20aecfbe0642c7a8903d98d9ecd3708bd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b23b156c7bdf112a4fe64acd71e398cc7c0bd231",
          "sha": "b23b156c7bdf112a4fe64acd71e398cc7c0bd231",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b23b156c7bdf112a4fe64acd71e398cc7c0bd231"
        }
      ],
      "message": "Calculate descendant information for mempool RPC output on-the-fly\n\nThis is in preparation for removing the cached descendant state from the\nmempool.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-03T15:57:16Z"
      },
      "sha": "a9f6ea30882d981f40b116f75c4267f001257dd7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYxNjNiZjBhYmI5OWEyMWVlZjI1OGRhNzI3ZDcyNzhiMDZjYzVhODU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f163bf0abb99a21eef258da727d7278b06cc5a85",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f163bf0abb99a21eef258da727d7278b06cc5a85",
      "tree": {
        "sha": "23464393b54c0a946758c41be13a30dda05bce3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23464393b54c0a946758c41be13a30dda05bce3f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9f6ea30882d981f40b116f75c4267f001257dd7",
          "sha": "a9f6ea30882d981f40b116f75c4267f001257dd7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f6ea30882d981f40b116f75c4267f001257dd7"
        }
      ],
      "message": "test: remove rbf carveout test from mempool_limit.py",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-18T17:22:09Z"
      },
      "sha": "f163bf0abb99a21eef258da727d7278b06cc5a85"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA5ODIzNmY4ZDk0ZmNiOGUxYjhkNDE5ZTAxMmIzNTlmMjY3YWY5MmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/098236f8d94fcb8e1b8d419e012b359f267af92c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/098236f8d94fcb8e1b8d419e012b359f267af92c",
      "tree": {
        "sha": "3f29a6ba628b2e52c247a12723c919ecbc15758a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f29a6ba628b2e52c247a12723c919ecbc15758a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f163bf0abb99a21eef258da727d7278b06cc5a85",
          "sha": "f163bf0abb99a21eef258da727d7278b06cc5a85",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f163bf0abb99a21eef258da727d7278b06cc5a85"
        }
      ],
      "message": "Stop enforcing descendant size/count limits\n\nCluster size limits should be enough.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-03T17:56:22Z"
      },
      "sha": "098236f8d94fcb8e1b8d419e012b359f267af92c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE5NzFhMzRhNzhjYTBkOGZiYmUwODA0MTBmYjFiN2FlODI0MzIwZDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1971a34a78ca0d8fbbe080410fb1b7ae824320d6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1971a34a78ca0d8fbbe080410fb1b7ae824320d6",
      "tree": {
        "sha": "f9c702cbd674ba9c2fe264f7537133e1816db122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9c702cbd674ba9c2fe264f7537133e1816db122"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/098236f8d94fcb8e1b8d419e012b359f267af92c",
          "sha": "098236f8d94fcb8e1b8d419e012b359f267af92c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/098236f8d94fcb8e1b8d419e012b359f267af92c"
        }
      ],
      "message": "Eliminate RBF workaround for CPFP carveout transactions\n\nThe new cluster mempool RBF rules take into account clusters sizes exactly, so\nwith the removal of descendant count enforcement this idea is obsolete.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2024-06-12T18:50:47Z"
      },
      "sha": "1971a34a78ca0d8fbbe080410fb1b7ae824320d6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZiNDIwMmU2N2VhYmMyOWFmZGU0Y2RlZTk4ODY4ZmVlNWI2Yzg1MzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4202e67eabc29afde4cdee98868fee5b6c8532",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4202e67eabc29afde4cdee98868fee5b6c8532",
      "tree": {
        "sha": "7c18b184aad4e9607c929de72300a89c32d90fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c18b184aad4e9607c929de72300a89c32d90fb1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1971a34a78ca0d8fbbe080410fb1b7ae824320d6",
          "sha": "1971a34a78ca0d8fbbe080410fb1b7ae824320d6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1971a34a78ca0d8fbbe080410fb1b7ae824320d6"
        }
      ],
      "message": "wallet: Replace max descendantsize with clustersize\n\nWith the descendant size limits removed, replace the concept of \"max number of\ndescendants of any ancestor of a given tx\" with the cluster count of the cluster\nthat the transaction belongs to.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-03T19:00:00Z"
      },
      "sha": "fb4202e67eabc29afde4cdee98868fee5b6c8532"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2YzE0M2NlN2U5MzU5YmQ3ZDZjODgzMTk4MWM3NGRmOTUzOTViNTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c143ce7e9359bd7d6c8831981c74df95395b58",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/66c143ce7e9359bd7d6c8831981c74df95395b58",
      "tree": {
        "sha": "02997737afc84e6dcf856886a86d909dfe75931a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02997737afc84e6dcf856886a86d909dfe75931a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4202e67eabc29afde4cdee98868fee5b6c8532",
          "sha": "fb4202e67eabc29afde4cdee98868fee5b6c8532",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4202e67eabc29afde4cdee98868fee5b6c8532"
        }
      ],
      "message": "mempool: Remove unused function CalculateDescendantMaximum",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-04T13:19:21Z"
      },
      "sha": "66c143ce7e9359bd7d6c8831981c74df95395b58"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY3YjQyOTQxNzI5MzcyODAyZWU4NjBjYmMzYWQ0ODI1OTIwMzQxYTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67b42941729372802ee860cbc3ad4825920341a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/67b42941729372802ee860cbc3ad4825920341a8",
      "tree": {
        "sha": "78c2b3e446d5ecade268044fcb414aec04f2a4d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78c2b3e446d5ecade268044fcb414aec04f2a4d0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c143ce7e9359bd7d6c8831981c74df95395b58",
          "sha": "66c143ce7e9359bd7d6c8831981c74df95395b58",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66c143ce7e9359bd7d6c8831981c74df95395b58"
        }
      ],
      "message": "Eliminate use of cached ancestor data in miniminer_tests and truc_policy",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-14T17:49:03Z"
      },
      "sha": "67b42941729372802ee860cbc3ad4825920341a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdiM2RhOTlmMWViODkyNjE4ZWFkODA2M2NkMmFjYzE5ZTBmNWMxMzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b3da99f1eb892618ead8063cd2acc19e0f5c139",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7b3da99f1eb892618ead8063cd2acc19e0f5c139",
      "tree": {
        "sha": "47bb0d257d262438243d913a3cb526c053f4b669",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47bb0d257d262438243d913a3cb526c053f4b669"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67b42941729372802ee860cbc3ad4825920341a8",
          "sha": "67b42941729372802ee860cbc3ad4825920341a8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/67b42941729372802ee860cbc3ad4825920341a8"
        }
      ],
      "message": "mempool: eliminate accessors to mempool entry ancestor/descendant cached state",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-04T13:28:05Z"
      },
      "sha": "7b3da99f1eb892618ead8063cd2acc19e0f5c139"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI3NmYyYzU3MjI5NGQ5NmZiYmE1NDFhZGNmMDljYWU0M2ZjYWJiZDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/276f2c572294d96fbba541adcf09cae43fcabbd2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/276f2c572294d96fbba541adcf09cae43fcabbd2",
      "tree": {
        "sha": "a8f8daca6764892155e0042fa9e54de4c38aea16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8f8daca6764892155e0042fa9e54de4c38aea16"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b3da99f1eb892618ead8063cd2acc19e0f5c139",
          "sha": "7b3da99f1eb892618ead8063cd2acc19e0f5c139",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7b3da99f1eb892618ead8063cd2acc19e0f5c139"
        }
      ],
      "message": "Remove unused members from CTxMemPoolEntry",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-04T13:48:04Z"
      },
      "sha": "276f2c572294d96fbba541adcf09cae43fcabbd2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM0OTQ0Yjk3ZmEzYmNlYTc5ZWMzZWYxNDgwOGJlYmNjMTE3MmJjYWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34944b97fa3bcea79ec3ef14808bebcc1172bcaf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/34944b97fa3bcea79ec3ef14808bebcc1172bcaf",
      "tree": {
        "sha": "12616a1921186876bd8578ca151295f84559820c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12616a1921186876bd8578ca151295f84559820c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/276f2c572294d96fbba541adcf09cae43fcabbd2",
          "sha": "276f2c572294d96fbba541adcf09cae43fcabbd2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/276f2c572294d96fbba541adcf09cae43fcabbd2"
        }
      ],
      "message": "Remove mempool logic designed to maintain ancestor/descendant state",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-04T14:47:14Z"
      },
      "sha": "34944b97fa3bcea79ec3ef14808bebcc1172bcaf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5N2RlMDU5ODhhMzNmN2RkYjcxMjExZWYzMTc4YWYxYWI4OTM1MDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/697de05988a33f7ddb71211ef3178af1ab893502",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/697de05988a33f7ddb71211ef3178af1ab893502",
      "tree": {
        "sha": "8e1c81c6b4e1e5e7272b945d16fed02a3415327f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e1c81c6b4e1e5e7272b945d16fed02a3415327f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34944b97fa3bcea79ec3ef14808bebcc1172bcaf",
          "sha": "34944b97fa3bcea79ec3ef14808bebcc1172bcaf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/34944b97fa3bcea79ec3ef14808bebcc1172bcaf"
        }
      ],
      "message": "mempool: addUnchecked no longer needs ancestors",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-05T13:33:41Z"
      },
      "sha": "697de05988a33f7ddb71211ef3178af1ab893502"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk2N2Y3ODI1NDQ5YjcwOGU0NjYyMTRkZmExMzg2MWYzYzJhZTg2NDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/967f7825449b708e466214dfa13861f3c2ae8643",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/967f7825449b708e466214dfa13861f3c2ae8643",
      "tree": {
        "sha": "c3648d3f068b02efb478fb086522043883b6b0f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3648d3f068b02efb478fb086522043883b6b0f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/697de05988a33f7ddb71211ef3178af1ab893502",
          "sha": "697de05988a33f7ddb71211ef3178af1ab893502",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/697de05988a33f7ddb71211ef3178af1ab893502"
        }
      ],
      "message": "Remove unused limits from CalculateMemPoolAncestors",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-15T01:15:06Z"
      },
      "sha": "967f7825449b708e466214dfa13861f3c2ae8643"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFhYWY5ZTlkYTFiYWEyNjI1NjIxZmNlYTE2NzYwMDBmY2Q1ZGM0NTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aaf9e9da1baa2625621fcea1676000fcd5dc459",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1aaf9e9da1baa2625621fcea1676000fcd5dc459",
      "tree": {
        "sha": "4b876a33f306412b1606ad450fa245e510a10734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b876a33f306412b1606ad450fa245e510a10734"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/967f7825449b708e466214dfa13861f3c2ae8643",
          "sha": "967f7825449b708e466214dfa13861f3c2ae8643",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/967f7825449b708e466214dfa13861f3c2ae8643"
        }
      ],
      "message": "Make removeConflicts private",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-15T10:12:22Z"
      },
      "sha": "1aaf9e9da1baa2625621fcea1676000fcd5dc459"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2M2IwYTFlNGJiODA3Mjc3MGM4YzEyOTY2NjJmZWRhZjc0ZDIwZWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e63b0a1e4bb8072770c8c1296662fedaf74d20ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e63b0a1e4bb8072770c8c1296662fedaf74d20ee",
      "tree": {
        "sha": "4b876a33f306412b1606ad450fa245e510a10734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b876a33f306412b1606ad450fa245e510a10734"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aaf9e9da1baa2625621fcea1676000fcd5dc459",
          "sha": "1aaf9e9da1baa2625621fcea1676000fcd5dc459",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1aaf9e9da1baa2625621fcea1676000fcd5dc459"
        }
      ],
      "message": "==== END MEMPOOL CLEANUP ====",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-17T15:36:50Z"
      },
      "sha": "e63b0a1e4bb8072770c8c1296662fedaf74d20ee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2NmFkMzUzMGM4OGQ4MzM0NGYyYzg3NjU1NDZmNDI0MWU0ODU3ZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/666ad3530c88d83344f2c8765546f4241e4857e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/666ad3530c88d83344f2c8765546f4241e4857e0",
      "tree": {
        "sha": "4b876a33f306412b1606ad450fa245e510a10734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b876a33f306412b1606ad450fa245e510a10734"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e63b0a1e4bb8072770c8c1296662fedaf74d20ee",
          "sha": "e63b0a1e4bb8072770c8c1296662fedaf74d20ee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e63b0a1e4bb8072770c8c1296662fedaf74d20ee"
        }
      ],
      "message": "==== BEGIN OPTIMIZATIONS ====",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-17T15:37:03Z"
      },
      "sha": "666ad3530c88d83344f2c8765546f4241e4857e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY3MTFlMTFhYzhjOTU4YjM2MjgwOTY1ZDk2ZGE4YTIwYjVjMzcwN2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6711e11ac8c958b36280965d96da8a20b5c3707d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6711e11ac8c958b36280965d96da8a20b5c3707d",
      "tree": {
        "sha": "e8c13d5792adef4fff5f5da5c99471253ac80fee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8c13d5792adef4fff5f5da5c99471253ac80fee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/666ad3530c88d83344f2c8765546f4241e4857e0",
          "sha": "666ad3530c88d83344f2c8765546f4241e4857e0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/666ad3530c88d83344f2c8765546f4241e4857e0"
        }
      ],
      "message": "Simplify ancestor calculation functions\n\nNow that ancestor calculation never fails (due to ancestor/descendant limits\nbeing eliminated), we can eliminate the error handling from\nCalculateMemPoolAncestors.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-15T01:31:51Z"
      },
      "sha": "6711e11ac8c958b36280965d96da8a20b5c3707d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI5OWZjNGQyMmQ5MWNmNTY0NTkzNDdlNzY0ZjA0MzI4MWQ5NzUwN2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/299fc4d22d91cf56459347e764f043281d97507b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/299fc4d22d91cf56459347e764f043281d97507b",
      "tree": {
        "sha": "140f1d53b1cb466bf5b1013c941fbf4604cbc3e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/140f1d53b1cb466bf5b1013c941fbf4604cbc3e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6711e11ac8c958b36280965d96da8a20b5c3707d",
          "sha": "6711e11ac8c958b36280965d96da8a20b5c3707d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6711e11ac8c958b36280965d96da8a20b5c3707d"
        }
      ],
      "message": "Use txgraph to calculate ancestors",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-14T22:21:34Z"
      },
      "sha": "299fc4d22d91cf56459347e764f043281d97507b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE4M2NlZDg2ZjFjMWZlZGRkN2FmMGQ1NTZlOWI3N2QxODdmM2IzNzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a83ced86f1c1feddd7af0d556e9b77d187f3b377",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a83ced86f1c1feddd7af0d556e9b77d187f3b377",
      "tree": {
        "sha": "ed34268aab2b99f4b1c228b3fb90ee7ba3907300",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed34268aab2b99f4b1c228b3fb90ee7ba3907300"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/299fc4d22d91cf56459347e764f043281d97507b",
          "sha": "299fc4d22d91cf56459347e764f043281d97507b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/299fc4d22d91cf56459347e764f043281d97507b"
        }
      ],
      "message": "Use txgraph to calculate descendants",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-14T23:28:25Z"
      },
      "sha": "a83ced86f1c1feddd7af0d556e9b77d187f3b377"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlNzgyYmJjYzhlNmQ2MjNkZGQxMWIxZGIxNWZhOWM0YmJlNGZkNDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e782bbcc8e6d623ddd11b1db15fa9c4bbe4fd47",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e782bbcc8e6d623ddd11b1db15fa9c4bbe4fd47",
      "tree": {
        "sha": "1b2b7f5d6e61862338865804240c7918bd4522bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b2b7f5d6e61862338865804240c7918bd4522bd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a83ced86f1c1feddd7af0d556e9b77d187f3b377",
          "sha": "a83ced86f1c1feddd7af0d556e9b77d187f3b377",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a83ced86f1c1feddd7af0d556e9b77d187f3b377"
        }
      ],
      "message": "Rework truc_policy to use descendants, not children",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-23T20:49:00Z"
      },
      "sha": "6e782bbcc8e6d623ddd11b1db15fa9c4bbe4fd47"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUzZjcxNDBlOWMyMDU0NGJkMTVmOWE4Mjc1YWI3ZjJmZjY2NDJlZmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53f7140e9c20544bd15f9a8275ab7f2ff6642efc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/53f7140e9c20544bd15f9a8275ab7f2ff6642efc",
      "tree": {
        "sha": "865537f109c3626f43975d06caeda706c1f0ca0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/865537f109c3626f43975d06caeda706c1f0ca0f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e782bbcc8e6d623ddd11b1db15fa9c4bbe4fd47",
          "sha": "6e782bbcc8e6d623ddd11b1db15fa9c4bbe4fd47",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e782bbcc8e6d623ddd11b1db15fa9c4bbe4fd47"
        }
      ],
      "message": "Make getting parents/children a function of the mempool, not a mempool entry",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-16T15:02:26Z"
      },
      "sha": "53f7140e9c20544bd15f9a8275ab7f2ff6642efc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMwY2ZkZmY4NDA3MTQyMGNmOTAwZTcxZDUzYTY4MWMzMDY1YjlkMjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30cfdff84071420cf900e71d53a681c3065b9d29",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/30cfdff84071420cf900e71d53a681c3065b9d29",
      "tree": {
        "sha": "b4dce2a2920c317fa85ed12446b586606582f199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4dce2a2920c317fa85ed12446b586606582f199"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53f7140e9c20544bd15f9a8275ab7f2ff6642efc",
          "sha": "53f7140e9c20544bd15f9a8275ab7f2ff6642efc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/53f7140e9c20544bd15f9a8275ab7f2ff6642efc"
        }
      ],
      "message": "Eliminate CheckPackageLimits, which no longer does anything",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-01-25T16:30:50Z"
      },
      "sha": "30cfdff84071420cf900e71d53a681c3065b9d29"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI1NTQ4NTJmNGY2ZjdmYWI1MzczMGQzNWFiMmM5YzExNjFiYTBhOTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b554852f4f6f7fab53730d35ab2c9c1161ba0a92",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b554852f4f6f7fab53730d35ab2c9c1161ba0a92",
      "tree": {
        "sha": "2c79ea0c40024a4652b037557a94b5b0ca2eb28b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c79ea0c40024a4652b037557a94b5b0ca2eb28b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30cfdff84071420cf900e71d53a681c3065b9d29",
          "sha": "30cfdff84071420cf900e71d53a681c3065b9d29",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/30cfdff84071420cf900e71d53a681c3065b9d29"
        }
      ],
      "message": "Fix miniminer_tests to work with cluster limits",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-08T18:38:19Z"
      },
      "sha": "b554852f4f6f7fab53730d35ab2c9c1161ba0a92"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ5MDA2YzU0YTAxZTBmOWI0ZjliYjJhNmYxNzFhMjFkYmMzN2JlOWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9006c54a01e0f9b4f9bb2a6f171a21dbc37be9a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d9006c54a01e0f9b4f9bb2a6f171a21dbc37be9a",
      "tree": {
        "sha": "395a9844330b9bd4d5756b2f0aa355019fc6b225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/395a9844330b9bd4d5756b2f0aa355019fc6b225"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b554852f4f6f7fab53730d35ab2c9c1161ba0a92",
          "sha": "b554852f4f6f7fab53730d35ab2c9c1161ba0a92",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b554852f4f6f7fab53730d35ab2c9c1161ba0a92"
        }
      ],
      "message": "Rewrite GatherClusters to use the txgraph implementation",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-16T15:10:07Z"
      },
      "sha": "d9006c54a01e0f9b4f9bb2a6f171a21dbc37be9a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA2NWRlNGIzY2JiNTg4ZTRmODcyMGVkMTFmYWRkNzM2NTE0ZjQ0MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/065de4b3cbb588e4f8720ed11fadd736514f4421",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/065de4b3cbb588e4f8720ed11fadd736514f4421",
      "tree": {
        "sha": "aaa591f086f9948d856d09ab17bde0163bf99532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaa591f086f9948d856d09ab17bde0163bf99532"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9006c54a01e0f9b4f9bb2a6f171a21dbc37be9a",
          "sha": "d9006c54a01e0f9b4f9bb2a6f171a21dbc37be9a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d9006c54a01e0f9b4f9bb2a6f171a21dbc37be9a"
        }
      ],
      "message": "Stop tracking parents/children outside of txgraph",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2024-04-16T16:13:42Z"
      },
      "sha": "065de4b3cbb588e4f8720ed11fadd736514f4421"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkMTNiNGI4NjU4NDFlNDkwYjQwNTVhMTNlZTM2OWJiODBiNGExY2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d13b4b865841e490b4055a13ee369bb80b4a1cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1d13b4b865841e490b4055a13ee369bb80b4a1cb",
      "tree": {
        "sha": "aaa591f086f9948d856d09ab17bde0163bf99532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaa591f086f9948d856d09ab17bde0163bf99532"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/065de4b3cbb588e4f8720ed11fadd736514f4421",
          "sha": "065de4b3cbb588e4f8720ed11fadd736514f4421",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/065de4b3cbb588e4f8720ed11fadd736514f4421"
        }
      ],
      "message": "==== END OPTIMIZATIONS ====",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-05T23:58:52Z"
      },
      "sha": "1d13b4b865841e490b4055a13ee369bb80b4a1cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxMDU1NWU1NTVjMTA2ZjY1MGQ4ODdlOTY3OGJhNDM1MTg4ODE0MGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/310555e555c106f650d887e9678ba4351888140b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/310555e555c106f650d887e9678ba4351888140b",
      "tree": {
        "sha": "aaa591f086f9948d856d09ab17bde0163bf99532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaa591f086f9948d856d09ab17bde0163bf99532"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d13b4b865841e490b4055a13ee369bb80b4a1cb",
          "sha": "1d13b4b865841e490b4055a13ee369bb80b4a1cb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1d13b4b865841e490b4055a13ee369bb80b4a1cb"
        }
      ],
      "message": "==== BEGIN DOCS/TESTING ====",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-05T23:59:10Z"
      },
      "sha": "310555e555c106f650d887e9678ba4351888140b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYyMGYwYTA4ZTViMjJkNDNiZTM3M2ExYWQ0Y2JhM2FmNjRhMzQyNGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f20f0a08e5b22d43be373a1ad4cba3af64a3424f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f20f0a08e5b22d43be373a1ad4cba3af64a3424f",
      "tree": {
        "sha": "d8de09efc34bad4255f54deb2958d4f8a4f4d7e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8de09efc34bad4255f54deb2958d4f8a4f4d7e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/310555e555c106f650d887e9678ba4351888140b",
          "sha": "310555e555c106f650d887e9678ba4351888140b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/310555e555c106f650d887e9678ba4351888140b"
        }
      ],
      "message": "Avoid violating mempool policy limits in tests\n\nChanges AddToMempool() helper to only apply changes if the mempool limits are\nrespected.\n\nFix package_rbf fuzz target to handle mempool policy violations",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-02-04T20:03:25Z"
      },
      "sha": "f20f0a08e5b22d43be373a1ad4cba3af64a3424f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViZWUzMTU1ZDMyMDdhNDMzM2FkMzVkMzNhMzJkN2NhYjdkYWExNGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebee3155d3207a4333ad35d33a32d7cab7daa14c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ebee3155d3207a4333ad35d33a32d7cab7daa14c",
      "tree": {
        "sha": "474c09a38621ff4f058c5b895ccd5f2326597c43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/474c09a38621ff4f058c5b895ccd5f2326597c43"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f20f0a08e5b22d43be373a1ad4cba3af64a3424f",
          "sha": "f20f0a08e5b22d43be373a1ad4cba3af64a3424f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f20f0a08e5b22d43be373a1ad4cba3af64a3424f"
        }
      ],
      "message": "bench: add more mempool benchmarks\n\nAdd benchmarks for:\n\n  - mempool update time when blocks are found\n  - adding a transaction\n  - performing the mempool's RBF calculation\n  - calculating mempool ancestors/descendants",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-10-11T15:34:16Z"
      },
      "sha": "ebee3155d3207a4333ad35d33a32d7cab7daa14c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ3NGQxM2ZkOWEwYjY4MGM0ZGVhNWQ5ZWJiZjIzNjYzZDRmNTYyYmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/474d13fd9a0b680c4dea5d9ebbf23663d4f562be",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/474d13fd9a0b680c4dea5d9ebbf23663d4f562be",
      "tree": {
        "sha": "62ceeb974588319450c4e5aef0fb137ed269033f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62ceeb974588319450c4e5aef0fb137ed269033f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebee3155d3207a4333ad35d33a32d7cab7daa14c",
          "sha": "ebee3155d3207a4333ad35d33a32d7cab7daa14c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ebee3155d3207a4333ad35d33a32d7cab7daa14c"
        }
      ],
      "message": "fuzz: try to add more code coverage for mempool fuzzing\n\nIncluding test coverage for mempool eviction and expiry",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2023-10-12T14:48:55Z"
      },
      "sha": "474d13fd9a0b680c4dea5d9ebbf23663d4f562be"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViMjI4YzQwY2M2YTYzMzQ3OTM0YjlmOTRiNGVhNzk3OTg1NmM2ZWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb228c40cc6a63347934b9f94b4ea7979856c6ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/eb228c40cc6a63347934b9f94b4ea7979856c6ee",
      "tree": {
        "sha": "763328ba9f96710ce3bb3767585cb94cb5f8ff0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/763328ba9f96710ce3bb3767585cb94cb5f8ff0a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/474d13fd9a0b680c4dea5d9ebbf23663d4f562be",
          "sha": "474d13fd9a0b680c4dea5d9ebbf23663d4f562be",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/474d13fd9a0b680c4dea5d9ebbf23663d4f562be"
        }
      ],
      "message": "Expose cluster information via rpc\n\nCo-authored-by: glozow <gloriajzhao@gmail.com>",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2023-04-19T21:12:04Z"
      },
      "sha": "eb228c40cc6a63347934b9f94b4ea7979856c6ee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZiYTUyMDBkNTlhZjg3ZGIyNDBhMWIwNjFmOTk1YzYzYjBlZDVlZTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fba5200d59af87db240a1b061f995c63b0ed5ee8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fba5200d59af87db240a1b061f995c63b0ed5ee8",
      "tree": {
        "sha": "873b50f255cd3d95bc456b455cceee11bc32d7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/873b50f255cd3d95bc456b455cceee11bc32d7cc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb228c40cc6a63347934b9f94b4ea7979856c6ee",
          "sha": "eb228c40cc6a63347934b9f94b4ea7979856c6ee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eb228c40cc6a63347934b9f94b4ea7979856c6ee"
        }
      ],
      "message": "doc: Update mempool_replacements.md to reflect feerate diagram checks",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:10:05Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2024-04-24T23:52:18Z"
      },
      "sha": "fba5200d59af87db240a1b061f995c63b0ed5ee8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhmNjJlOTE3N2I5ZDM1YmViMjdjYTk3NDk3NjhiOTk1NDNkNDIyNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f62e9177b9d35beb27ca9749768b99543d4225b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8f62e9177b9d35beb27ca9749768b99543d4225b",
      "tree": {
        "sha": "edb211f1e894d5c9792089d793fc7a222987f2d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edb211f1e894d5c9792089d793fc7a222987f2d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fba5200d59af87db240a1b061f995c63b0ed5ee8",
          "sha": "fba5200d59af87db240a1b061f995c63b0ed5ee8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fba5200d59af87db240a1b061f995c63b0ed5ee8"
        }
      ],
      "message": "test: add functional test for new cluster mempool RPCs\n\nCo-authored-by: glozow <gloriajzhao@gmail.com>",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:19:47Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2024-04-27T13:31:59Z"
      },
      "sha": "8f62e9177b9d35beb27ca9749768b99543d4225b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1Y2U5ODdkNWM2MDE4NTY0MTEzZmQ1YjQ2YjY0NTIxMWNhZjJjNjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5ce987d5c6018564113fd5b46b645211caf2c64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ce987d5c6018564113fd5b46b645211caf2c64",
      "tree": {
        "sha": "ba9f1e5522c98304fd22e3e5a98578cc54bd4ca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba9f1e5522c98304fd22e3e5a98578cc54bd4ca5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f62e9177b9d35beb27ca9749768b99543d4225b",
          "sha": "8f62e9177b9d35beb27ca9749768b99543d4225b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8f62e9177b9d35beb27ca9749768b99543d4225b"
        }
      ],
      "message": "fuzz: remove comparison between mini_miner block construction and miner\n\nThis is in preparation for eliminating the block template building happening in\nmini_miner, in favor of directly using the linearizations done in the mempool.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:19:53Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2024-04-28T11:34:48Z"
      },
      "sha": "c5ce987d5c6018564113fd5b46b645211caf2c64"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAwOWRiNmMzYTQyN2RjMzExN2M1NzgzOWYyM2M3YWIwYmUxNDIwNmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/009db6c3a427dc3117c57839f23c7ab0be14206c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/009db6c3a427dc3117c57839f23c7ab0be14206c",
      "tree": {
        "sha": "14b0e18f600605214c72d6eaecac7d24c68c00ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b0e18f600605214c72d6eaecac7d24c68c00ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5ce987d5c6018564113fd5b46b645211caf2c64",
          "sha": "c5ce987d5c6018564113fd5b46b645211caf2c64",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ce987d5c6018564113fd5b46b645211caf2c64"
        }
      ],
      "message": "Invoke TxGraph::DoWork() at appropriate times",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:19:53Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-07-29T20:16:18Z"
      },
      "sha": "009db6c3a427dc3117c57839f23c7ab0be14206c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIxYjNhZDQyMmE0NDBiMzBhNmFhZGFiMjQ2NmIyM2RjMjQ3YTBmMGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21b3ad422a440b30a6aadab2466b23dc247a0f0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/21b3ad422a440b30a6aadab2466b23dc247a0f0d",
      "tree": {
        "sha": "48cfb44d816131594abdb495c9bf90383ec02692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48cfb44d816131594abdb495c9bf90383ec02692"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/009db6c3a427dc3117c57839f23c7ab0be14206c",
          "sha": "009db6c3a427dc3117c57839f23c7ab0be14206c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/009db6c3a427dc3117c57839f23c7ab0be14206c"
        }
      ],
      "message": "Update comments for CTxMemPool class",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:19:53Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-09-02T23:01:10Z"
      },
      "sha": "21b3ad422a440b30a6aadab2466b23dc247a0f0d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMzY2FjYzMzNTExNmE3Y2U5ODk1YjYxODFlOTQwMWMyMGYzZGEwZDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33cacc335116a7ce9895b6181e9401c20f3da0d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/33cacc335116a7ce9895b6181e9401c20f3da0d5",
      "tree": {
        "sha": "a6caebb811e169d2f0d48de356e620987e729c06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6caebb811e169d2f0d48de356e620987e729c06"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21b3ad422a440b30a6aadab2466b23dc247a0f0d",
          "sha": "21b3ad422a440b30a6aadab2466b23dc247a0f0d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/21b3ad422a440b30a6aadab2466b23dc247a0f0d"
        }
      ],
      "message": "Add check that GetSortedScoreWithTopology() agrees with CompareMiningScoreWithTopology()\n\nWe use CompareMiningScoreWithTopology() for sorting transaction announcements\nduring tx relay, and we use GetSortedScoreWithTopology() in\nCTxMemPool::check().",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:19:53Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-09-17T17:26:45Z"
      },
      "sha": "33cacc335116a7ce9895b6181e9401c20f3da0d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEwODcyZjdlYzkyMzgwM2Y3MTFjZDJjM2FmOTNhMGUxNzEyMTMzMGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10872f7ec923803f711cd2c3af93a0e17121330e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/10872f7ec923803f711cd2c3af93a0e17121330e",
      "tree": {
        "sha": "9d6be0da28a39c80c55315f0e359f366b6cca030",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d6be0da28a39c80c55315f0e359f366b6cca030"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33cacc335116a7ce9895b6181e9401c20f3da0d5",
          "sha": "33cacc335116a7ce9895b6181e9401c20f3da0d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/33cacc335116a7ce9895b6181e9401c20f3da0d5"
        }
      ],
      "message": "Rework RBF and TRUC validation\n\nCalculating mempool ancestors for a new transaction should not be done until\nafter cluster size limits have been enforced, to limit CPU DoS potential.\n\nAchieve this by reworking TRUC and RBF validation logic:\n\n- TRUC policy enforcement is now done using only mempool parents of\n  new transactions, not all mempool ancestors.\n- RBF replacement checks are performed earlier (which allows for checking\n  cluster size limits earlier, because cluster size checks cannot happen until\n  after all conflicts are staged for removal).\n- Verifying that a new transaction doesn't conflict with an ancestor now\n  happens later, in AcceptSingleTransaction() rather than in PreChecks(). This\n  means that the test is not performed at all in AcceptMultipleTransactions(),\n  but in package acceptance we already disallow RBF in situations where a\n  package transaction has in-mempool parents.\n\nAlso to ensure that all RBF validation logic is applied in both the single\ntransaction and multiple transaction cases, remove the optimization that skips\nthe PackageMempoolChecks() in the case of a single transaction being validated\nin AcceptMultipleTransactions().",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-10-16T00:19:53Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2025-09-21T16:52:05Z"
      },
      "sha": "10872f7ec923803f711cd2c3af93a0e17121330e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20307441697,
      "node_id": "HRFPE_lADOABII587RhpYCzwAAAAS6avgh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20307441697",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "commit_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits/10872f7ec923803f711cd2c3af93a0e17121330e",
      "created_at": "2025-10-16T00:20:20Z"
    },
    {
      "event": "reviewed",
      "id": 3339641710,
      "node_id": "PRR_kwDOABII587HDuNu",
      "url": null,
      "actor": null,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-16T15:15:47Z",
      "author_association": "MEMBER",
      "body": "Reviewed the main implementation e6315c24326016cfaee5bd046e8b2e4e1088ac6b\r\n\r\nI've not noticed any major issue, dropped a few minor comments and nits.\r\nIf any comment become stale after the update feel free to ignore it",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#pullrequestreview-3339641710",
      "submitted_at": "2025-10-16T15:15:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
    },
    {
      "event": "reviewed",
      "id": 3345064005,
      "node_id": "PRR_kwDOABII587HYaBF",
      "url": null,
      "actor": null,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-16T15:38:51Z",
      "author_association": "MEMBER",
      "body": "reviewed through 10872f7ec923803f711cd2c3af93a0e17121330e\r\n\r\nfocused on commit structure and comprehension only, next will be focusing on testing",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#pullrequestreview-3345064005",
      "submitted_at": "2025-10-16T15:38:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
    },
    {
      "event": "reviewed",
      "id": 3342174984,
      "node_id": "PRR_kwDOABII587HNYsI",
      "url": null,
      "actor": null,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-17T17:49:59Z",
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#pullrequestreview-3342174984",
      "submitted_at": "2025-10-17T17:49:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
    },
    {
      "event": "reviewed",
      "id": 3351431350,
      "node_id": "PRR_kwDOABII587Hwsi2",
      "url": null,
      "actor": null,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-17T20:19:45Z",
      "author_association": "MEMBER",
      "body": "Focused on reviewing the RBF logic in e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#pullrequestreview-3351431350",
      "submitted_at": "2025-10-17T20:19:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432032703",
      "pull_request_review_id": 3339641710,
      "id": 2432032703,
      "node_id": "PRRC_kwDOABII586Q9d-_",
      "diff_hunk": "@@ -188,4 +189,8 @@ static inline int64_t GetVirtualTransactionInputSize(const CTxIn& tx)\n     return GetVirtualTransactionInputSize(tx, 0, 0);\n }\n \n+int64_t GetSigOpsAdjustedWeight(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop);",
      "path": "src/policy/policy.h",
      "position": 23,
      "original_position": 12,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "f2eff17c6c4fc945f6fd761564212802107a1d7d",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Add sigops adjusted weight calculator\" f2eff17c6c4fc945f6fd761564212802107a1d7d\r\n\r\nnit: use snake case.",
      "created_at": "2025-10-15T10:27:58Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432032703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432032703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432258434",
      "pull_request_review_id": 3339641710,
      "id": 2432258434,
      "node_id": "PRRC_kwDOABII586Q-VGC",
      "diff_hunk": "@@ -641,6 +641,8 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-test=<option>\", \"Pass a test-only option. Options include : \" + Join(TEST_OPTIONS_DOC, \", \") + \".\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustercount=<n>\", strprintf(\"Do not accept transactions connected to <n> or more existing in-mempool transactions (default: %u, maximum: %u)\", DEFAULT_CLUSTER_LIMIT, MAX_CLUSTER_COUNT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustersize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool connected transactions exceeds <n> kilobytes (default: %u)\", DEFAULT_CLUSTER_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2801e80528a3a1c2949a8fda6338882613a673e5",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Add new (unused) limits for cluster size/count\" 2801e80528a3a1c2949a8fda6338882613a673e5\r\n\r\n\r\nnit: be specific it is in virtual size\r\n```suggestion\r\n    argsman.AddArg(\"-limitclustersize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool connected transactions exceeds <n> virtual kilobytes (default: %u)\", DEFAULT_CLUSTER_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\r\n\r\n```",
      "created_at": "2025-10-15T11:47:06Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432258434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432258434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432321152",
      "pull_request_review_id": 3339641710,
      "id": 2432321152,
      "node_id": "PRRC_kwDOABII586Q-kaA",
      "diff_hunk": "@@ -21,6 +21,8 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n \n MAX_REPLACEMENT_LIMIT = 100\n+MAX_CLUSTER_LIMIT = 64",
      "path": "test/functional/feature_rbf.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "429bdbecfde93c54374fb3098e357e18556e7e21",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"test: update feature_rbf.py replacement test\"  429bdbecfde93c54374fb3098e357e18556e7e21\r\n\r\nnit: This should live in `functional/test_framework/mempool_util.py`",
      "created_at": "2025-10-15T12:10:57Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432321152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432321152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432430377",
      "pull_request_review_id": 3339641710,
      "id": 2432430377,
      "node_id": "PRRC_kwDOABII586Q-_Ep",
      "diff_hunk": "@@ -220,7 +220,7 @@ def test_chainlimits_exceeded(self):\n \n     def run_test(self):\n         # Mine in batches of 25 to test multi-block reorg under chain limits\n-        self.transaction_graph_test(size=CUSTOM_ANCESTOR_COUNT, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_graph_test(size=64, n_tx_to_mine=[25, 50, 75])",
      "path": "test/functional/mempool_updatefromblock.py",
      "position": 29,
      "original_position": 28,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "5a388c0d595b2318fea4b1dce977e2d5ff1abc48",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Do not allow mempool clusters to exceed configured limits\" 5a388c0d595b2318fea4b1dce977e2d5ff1abc48\r\n\r\nIf you define the max cluster count in mempool util it can be reused here.",
      "created_at": "2025-10-15T12:47:27Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432430377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432430377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432516613",
      "pull_request_review_id": 3339641710,
      "id": 2432516613,
      "node_id": "PRRC_kwDOABII586Q_UIF",
      "diff_hunk": "@@ -547,7 +547,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n         AddToMempool(pool, entry.Fee(100LL).FromTx(tx5));\n     AddToMempool(pool, entry.Fee(900LL).FromTx(tx7));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 0.75); // should maximize mempool size by only removing 5/7",
      "path": "src/test/mempool_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "5a388c0d595b2318fea4b1dce977e2d5ff1abc48",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Do not allow mempool clusters to exceed configured limits\" 5a388c0d595b2318fea4b1dce977e2d5ff1abc48\r\n\r\nI try to not use the magic number by trimming using\r\n\r\n`pool.DynamicMemoryUsage() - usage_of_5 - usage_of_7` but test fail because tx 6 is also evicted.\r\nHowever when I subtract only the usage of 5 the test succeed.\r\n\r\nI grab the usages by computing the delta in memory usage after insertion of the tx.\r\n\r\n\r\n",
      "created_at": "2025-10-15T13:12:35Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432516613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432516613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432642810",
      "pull_request_review_id": 3340512731,
      "id": 2432642810,
      "node_id": "PRRC_kwDOABII586Q_y76",
      "diff_hunk": "@@ -59,8 +59,8 @@ class LOCKABLE Epoch\n     public:\n         Marker() = default;\n         Marker(const Marker&) = default;\n-        Marker(Marker&&) = delete;\n-        Marker& operator=(Marker&&) = delete;\n+        Marker(Marker&&) = default;",
      "path": "src/util/epochguard.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "51430680ecb722e1d4ee4a26dac5724050f41c9e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "51430680ecb722e1d4ee4a26dac5724050f41c9e\r\n\r\nThe why of this is unclear to me through 8cdd7bb11adeaeb4709c670bef4b57362cfbebcb , worth reordering or expanding commit message?",
      "created_at": "2025-10-15T13:48:33Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432642810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432642810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432661442",
      "pull_request_review_id": 3339641710,
      "id": 2432661442,
      "node_id": "PRRC_kwDOABII586Q_3fC",
      "diff_hunk": "@@ -719,10 +719,16 @@ class ChainImpl : public Chain\n     util::Result<void> checkChainLimits(const CTransactionRef& tx) override\n     {\n         if (!m_node.mempool) return {};\n-        LockPoints lp;\n-        CTxMemPoolEntry entry(TxGraph::Ref(), tx, 0, 0, 0, 0, false, 0, lp);\n         LOCK(m_node.mempool->cs);\n-        return m_node.mempool->CheckPackageLimits({tx}, entry.GetTxSize());\n+        // Use CTxMemPool's ChangeSet interface to check whether the chain\n+        // limits would be violated. Note that the changeset will be destroyed\n+        // when it goes out of scope.\n+        auto changeset = m_node.mempool->GetChangeSet();",
      "path": "src/node/interfaces.cpp",
      "position": 38,
      "original_position": 11,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "1102ac7f74ac2f48760b46be58c7deb70fa727cf",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Check cluster limits when using -walletrejectlongchains\"  1102ac7f74ac2f48760b46be58c7deb70fa727cf\r\n\r\nnit: also state that it should be safe to create a new change set here because we lock mempool cs.  ",
      "created_at": "2025-10-15T13:53:44Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432661442",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432661442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 723,
      "original_line": 723,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432836478",
      "pull_request_review_id": 3340512731,
      "id": 2432836478,
      "node_id": "PRRC_kwDOABII586RAiN-",
      "diff_hunk": "@@ -137,12 +137,11 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<Txid>& vHashesToU\n         {",
      "path": "src/txmempool.cpp",
      "position": 110,
      "original_position": 1,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "6c73e4744837a7dc138a9177df3a48f30a1ba6c1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "6c73e4744837a7dc138a9177df3a48f30a1ba6c1\r\n\r\nHad to double-check the claim on space usage, seems to hold\r\n\r\nhttps://www.boost.org/doc/libs/1_73_0/libs/multi_index/doc/performance.html#:~:text=On%20the%20other%20hand%2C%20the,N%2D1)p%2C%20where",
      "created_at": "2025-10-15T14:39:31Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2432836478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2432836478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433318113",
      "pull_request_review_id": 3340512731,
      "id": 2433318113,
      "node_id": "PRRC_kwDOABII586RCXzh",
      "diff_hunk": "@@ -1604,6 +1611,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n+    // Check if the transaction would exceed the cluster size limit.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "5a388c0d595b2318fea4b1dce977e2d5ff1abc48",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "5a388c0d595b2318fea4b1dce977e2d5ff1abc48\r\n\r\n```Suggestion\r\n    // Check if the transactions would exceed the cluster size limit.\r\n```",
      "created_at": "2025-10-15T16:47:41Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433318113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433318113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433669609",
      "pull_request_review_id": 3341892072,
      "id": 2433669609,
      "node_id": "PRRC_kwDOABII586RDtnp",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test cluster mempool accessors and limits\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+MAX_CLUSTER_COUNT = 64\n+\n+class MempoolClusterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        node = self.nodes[0]\n+        parent_tx = self.wallet.send_self_transfer(from_node=node)\n+        utxo_to_spend = parent_tx[\"new_utxo\"]\n+        ancestors = [parent_tx[\"txid\"]]\n+        while len(node.getrawmempool()) < MAX_CLUSTER_COUNT:\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend)\n+            # Confirm that each transaction is in the same cluster as the first.\n+            assert node.getmempoolcluster(next_tx['txid']) == node.getmempoolcluster(parent_tx['txid'])\n+\n+            # Confirm that the ancestors are what we expect\n+            mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\n+            assert sorted(mempool_ancestors) == sorted(ancestors)\n+\n+            # Confirm that each successive transaction is added as a descendant.\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in ancestors ])\n+\n+            # Update for next iteration\n+            ancestors.append(next_tx[\"txid\"])\n+            utxo_to_spend = next_tx[\"new_utxo\"]\n+\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == MAX_CLUSTER_COUNT\n+        feeratediagram = node.getmempoolfeeratediagram()\n+        last_val = [0, 0]\n+        for x in feeratediagram:\n+            assert x['vsize'] > 0 or x['fee'] == 0\n+            assert last_val[0]*x['fee'] >= last_val[1]*x['vsize']\n+            last_val = [x['vsize'], x['fee']]\n+\n+        # Test that adding one more transaction to the cluster will fail.\n+        bad_tx = self.wallet.create_self_transfer(utxo_to_spend=utxo_to_spend)\n+        assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, bad_tx[\"hex\"])\n+\n+        # TODO: verify that the size limits are also enforced.\n+        # TODO: add tests that exercise rbf, package submission, and package\n+        # rbf and verify that cluster limits are enforced.",
      "path": "test/functional/mempool_cluster.py",
      "position": 1,
      "original_position": 59,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wrote up some tests for cluster count and size limits in RBFs, package RBFs, package submission, at different configs of `-limitclustercount` and `-limitclustersize`, etc:\r\n\r\n<details>\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/mempool_cluster.py b/test/functional/mempool_cluster.py\r\nindex 3da8b477a2f..c75eb22bf9b 100755\r\n--- a/test/functional/mempool_cluster.py\r\n+++ b/test/functional/mempool_cluster.py\r\n@@ -4,59 +4,322 @@\r\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \"\"\"Test cluster mempool accessors and limits\"\"\"\r\n \r\n+from decimal import Decimal\r\n+\r\n+from test_framework.mempool_util import (\r\n+    DEFAULT_CLUSTER_LIMIT,\r\n+    DEFAULT_CLUSTER_SIZE_LIMIT_KVB,\r\n+)\r\n+from test_framework.messages import (\r\n+    COIN,\r\n+)\r\n from test_framework.test_framework import BitcoinTestFramework\r\n from test_framework.wallet import (\r\n     MiniWallet,\r\n )\r\n from test_framework.util import (\r\n+    assert_equal,\r\n+    assert_greater_than,\r\n+    assert_greater_than_or_equal,\r\n     assert_raises_rpc_error,\r\n )\r\n \r\n-MAX_CLUSTER_COUNT = 64\r\n+def cleanup(func):\r\n+    def wrapper(self, *args, **kwargs):\r\n+        try:\r\n+            func(self, *args, **kwargs)\r\n+        finally:\r\n+            # Mine blocks to clear the mempool and replenish the wallet's confirmed UTXOs.\r\n+            while (len(self.nodes[0].getrawmempool()) > 0):\r\n+                self.generate(self.nodes[0], 1)\r\n+            self.wallet.rescan_utxos(include_mempool=True)\r\n+    return wrapper\r\n \r\n class MempoolClusterTest(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n         self.num_nodes = 1\r\n \r\n-    def run_test(self):\r\n-        node = self.nodes[0]\r\n-        self.wallet = MiniWallet(node)\r\n-\r\n-        node = self.nodes[0]\r\n-        parent_tx = self.wallet.send_self_transfer(from_node=node)\r\n+    def add_chain_cluster(self, node, cluster_count, target_vsize=None):\r\n+        \"\"\"Create a cluster of transactions, with the count specified.\r\n+        The topology is a chain: the i'th transaction depends on the (i-1)'th transaction.\r\n+        Optionally provide a target_vsize for each transaction.\r\n+        \"\"\"\r\n+        parent_tx = self.wallet.send_self_transfer(from_node=node, confirmed_only=True, target_vsize=target_vsize)\r\n         utxo_to_spend = parent_tx[\"new_utxo\"]\r\n-        ancestors = [parent_tx[\"txid\"]]\r\n-        while len(node.getrawmempool()) < MAX_CLUSTER_COUNT:\r\n-            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend)\r\n+        all_txids = [parent_tx[\"txid\"]]\r\n+        all_results = [parent_tx]\r\n+\r\n+        while len(all_results) < cluster_count:\r\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend, target_vsize=target_vsize)\r\n+            assert next_tx[\"txid\"] in node.getrawmempool()\r\n+\r\n             # Confirm that each transaction is in the same cluster as the first.\r\n-            assert node.getmempoolcluster(next_tx['txid']) == node.getmempoolcluster(parent_tx['txid'])\r\n+            assert_equal(node.getmempoolcluster(next_tx['txid']), node.getmempoolcluster(parent_tx['txid']))\r\n \r\n             # Confirm that the ancestors are what we expect\r\n             mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\r\n-            assert sorted(mempool_ancestors) == sorted(ancestors)\r\n+            assert_equal(sorted(mempool_ancestors), sorted(all_txids))\r\n \r\n             # Confirm that each successive transaction is added as a descendant.\r\n-            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in ancestors ])\r\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in all_txids ])\r\n \r\n             # Update for next iteration\r\n-            ancestors.append(next_tx[\"txid\"])\r\n+            all_results.append(next_tx)\r\n+            all_txids.append(next_tx[\"txid\"])\r\n             utxo_to_spend = next_tx[\"new_utxo\"]\r\n \r\n-        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == MAX_CLUSTER_COUNT\r\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == cluster_count\r\n+        return all_results\r\n+\r\n+    def check_feerate_diagram(self, node):\r\n+        \"\"\"Sanity check the feerate diagram.\"\"\"\r\n         feeratediagram = node.getmempoolfeeratediagram()\r\n         last_val = [0, 0]\r\n         for x in feeratediagram:\r\n+            # The vsize is always positive, except for the first iteration\r\n             assert x['vsize'] > 0 or x['fee'] == 0\r\n-            assert last_val[0]*x['fee'] >= last_val[1]*x['vsize']\r\n+            # Monotonically decreasing fee per vsize\r\n+            assert_greater_than_or_equal(last_val[0] * x['fee'], last_val[1] * x['vsize'])\r\n             last_val = [x['vsize'], x['fee']]\r\n \r\n+    def test_limit_enforcement(self, cluster_submitted, target_vsize_per_tx=None):\r\n+        \"\"\"\r\n+        the cluster may change as a result of these transactions, so cluster_submitted is mutated accordingly\r\n+        \"\"\"\r\n+        # Cluster has already been submitted and has at least 3 transactions, otherwise this test won't work.\r\n+        assert_greater_than_or_equal(len(cluster_submitted), 3)\r\n+        node = self.nodes[0]\r\n+        last_result = cluster_submitted[-1]\r\n+        # We assume that this is the maximum cluster count\r\n+        cluster_limit = node.getmempoolcluster(cluster_submitted[-1][\"txid\"])['txcount']\r\n+\r\n         # Test that adding one more transaction to the cluster will fail.\r\n-        bad_tx = self.wallet.create_self_transfer(utxo_to_spend=utxo_to_spend)\r\n+        bad_tx = self.wallet.create_self_transfer(utxo_to_spend=last_result[\"new_utxo\"], target_vsize=target_vsize_per_tx)\r\n         assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, bad_tx[\"hex\"])\r\n \r\n-        # TODO: verify that the size limits are also enforced.\r\n-        # TODO: add tests that exercise rbf, package submission, and package\r\n-        # rbf and verify that cluster limits are enforced.\r\n+        # It should also work during replacement\r\n+        utxo_to_double_spend = self.wallet.get_utxo(confirmed_only=True)\r\n+        fee = Decimal(\"0.000001\")\r\n+        tx_to_replace = self.wallet.create_self_transfer(utxo_to_spend=utxo_to_double_spend, fee=fee)\r\n+        node.sendrawtransaction(tx_to_replace[\"hex\"])\r\n+\r\n+        # Multiply fee by 5, which should easily cover the cost to replace. Otherwise, use the target vsize at 10sat/vB\r\n+        fee_to_use = target_vsize_per_tx * 10 if target_vsize_per_tx is not None else int(fee * COIN * 5)\r\n+        bad_tx_also_replacement = self.wallet.create_self_transfer_multi(\r\n+            utxos_to_spend=[last_result[\"new_utxo\"], utxo_to_double_spend],\r\n+            target_vsize=target_vsize_per_tx,\r\n+            fee_per_output=fee_to_use,\r\n+        )\r\n+        assert_raises_rpc_error(-26, \"replacement-failed\", node.sendrawtransaction, bad_tx_also_replacement[\"hex\"])\r\n+\r\n+        # Replace the last transaction. We are extending the cluster by one, but also removing one: 64 + 1 - 1 = 64\r\n+        # In the case of vsize, it should similarly cancel out.\r\n+        second_to_last_utxo = cluster_submitted[-2][\"new_utxo\"]\r\n+        fee_to_beat = cluster_submitted[-1][\"fee\"]\r\n+        vsize_to_use = cluster_submitted[-1][\"tx\"].get_vsize() if target_vsize_per_tx is not None else None\r\n+        good_tx_replacement = self.wallet.create_self_transfer(utxo_to_spend=second_to_last_utxo, fee=fee_to_beat * 5, target_vsize=vsize_to_use)\r\n+        node.sendrawtransaction(good_tx_replacement[\"hex\"], maxfeerate=0)\r\n+\r\n+        cluster_submitted[-1] = good_tx_replacement\r\n+\r\n+    def test_limit_enforcement_package(self, cluster_submitted):\r\n+        node = self.nodes[0]\r\n+        # Create a package from the second to last transaction. This shouldn't work because the effect is 64 + 2 - 1 = 65\r\n+        last_utxo = cluster_submitted[-2][\"new_utxo\"]\r\n+        fee_to_beat = cluster_submitted[-1][\"fee\"]\r\n+        # We do not use package RBF here because it has additional restrictions on mempool ancestors.\r\n+        parent_tx_bad = self.wallet.create_self_transfer(utxo_to_spend=last_utxo, fee=fee_to_beat * 5)\r\n+        child_tx_bad = self.wallet.create_self_transfer(utxo_to_spend=parent_tx_bad[\"new_utxo\"])\r\n+        package_result = node.submitpackage([parent_tx_bad[\"hex\"], child_tx_bad[\"hex\"]], maxfeerate=0)\r\n+        # The parent should be submitted, but the child rejected.\r\n+        result_parent_only = node.submitpackage([parent_tx_bad[\"hex\"], child_tx_bad[\"hex\"]])\r\n+\r\n+        assert parent_tx_bad[\"txid\"] in node.getrawmempool()\r\n+        assert child_tx_bad[\"txid\"] not in node.getrawmempool()\r\n+        assert_equal(result_parent_only[\"package_msg\"], \"transaction failed\")\r\n+        assert_equal(result_parent_only[\"tx-results\"][child_tx_bad[\"wtxid\"]][\"error\"], \"too-large-cluster\")\r\n+\r\n+        # Now, create a package from the second to last transaction. This should work because the effect is 64 + 2 - 2 = 64\r\n+        third_to_last_utxo = cluster_submitted[-3][\"new_utxo\"]\r\n+        parent_tx_good = self.wallet.create_self_transfer(utxo_to_spend=third_to_last_utxo)\r\n+        child_tx_good = self.wallet.create_self_transfer(utxo_to_spend=parent_tx_good[\"new_utxo\"], fee=fee_to_beat * 5)\r\n+        result_both_good = node.submitpackage([parent_tx_good[\"hex\"], child_tx_good[\"hex\"]], maxfeerate=0)\r\n+        assert_equal(result_both_good[\"package_msg\"], \"success\")\r\n+        assert parent_tx_good[\"txid\"] in node.getrawmempool()\r\n+        assert child_tx_good[\"txid\"] in node.getrawmempool()\r\n+\r\n+    @cleanup\r\n+    def test_cluster_count_limit(self, max_cluster_count):\r\n+        node = self.nodes[0]\r\n+        cluster_submitted = self.add_chain_cluster(node, max_cluster_count)\r\n+        self.check_feerate_diagram(node)\r\n+        for result in cluster_submitted:\r\n+            assert_equal(node.getmempoolcluster(result[\"txid\"])['txcount'], max_cluster_count)\r\n+\r\n+        self.log.info(\"Test that cluster count limit is enforced\")\r\n+        self.test_limit_enforcement(cluster_submitted)\r\n+        self.log.info(\"Test that the resulting cluster count is correctly calculated in a package\")\r\n+        self.test_limit_enforcement_package(cluster_submitted)\r\n+\r\n+    @cleanup\r\n+    def test_cluster_size_limit(self, max_cluster_size_vbytes):\r\n+        node = self.nodes[0]\r\n+        # This number should be smaller than the cluster count limit.\r\n+        num_txns = 10\r\n+        # Leave some buffer so it is possible to add a reasonably-sized transaction.\r\n+        target_vsize_per_tx = int((max_cluster_size_vbytes - 500) / num_txns)\r\n+        cluster_submitted = self.add_chain_cluster(node, num_txns, target_vsize_per_tx)\r\n+\r\n+        vsize_remaining = max_cluster_size_vbytes - node.getmempoolcluster(cluster_submitted[0][\"txid\"])['vsize']\r\n+        self.log.info(\"Test that cluster size limit is enforced\")\r\n+        self.test_limit_enforcement(cluster_submitted, target_vsize_per_tx=vsize_remaining + 4)\r\n+\r\n+        # Try another cluster and add a small transaction: it should succeed\r\n+        last_result = cluster_submitted[-1]\r\n+        small_tx = self.wallet.create_self_transfer(utxo_to_spend=last_result[\"new_utxo\"], target_vsize=vsize_remaining)\r\n+        node.sendrawtransaction(small_tx[\"hex\"])\r\n+\r\n+    @cleanup\r\n+    def test_cluster_merging(self, max_cluster_count):\r\n+        node = self.nodes[0]\r\n+\r\n+        self.log.info(f\"Test merging 2 clusters with transaction counts totaling {max_cluster_count}\")\r\n+        for num_txns_cluster1 in [1, 5, 10]:\r\n+            # Create a chain of transactions\r\n+            cluster1 = self.add_chain_cluster(node, num_txns_cluster1)\r\n+            for result in cluster1:\r\n+                node.sendrawtransaction(result[\"hex\"])\r\n+            utxo_from_cluster1 = cluster1[-1][\"new_utxo\"]\r\n+\r\n+            # Make the next cluster, which contains the remaining transactions\r\n+            assert_greater_than(max_cluster_count, num_txns_cluster1)\r\n+            num_txns_cluster2 = max_cluster_count - num_txns_cluster1\r\n+            cluster2 = self.add_chain_cluster(node, num_txns_cluster2)\r\n+            for result in cluster2:\r\n+                node.sendrawtransaction(result[\"hex\"])\r\n+            utxo_from_cluster2 = cluster2[-1][\"new_utxo\"]\r\n+\r\n+            # Now create a transaction that spends from both clusters, which would merge them.\r\n+            tx_merger = self.wallet.create_self_transfer_multi(utxos_to_spend=[utxo_from_cluster1, utxo_from_cluster2])\r\n+            assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, tx_merger[\"hex\"])\r\n+\r\n+            # Spending from the clusters independently should work\r\n+            tx_spending_cluster1 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_from_cluster1)\r\n+            tx_spending_cluster2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_from_cluster2)\r\n+            assert tx_spending_cluster1[\"txid\"] in node.getrawmempool()\r\n+            assert tx_spending_cluster2[\"txid\"] in node.getrawmempool()\r\n+\r\n+        self.log.info(f\"Test merging {max_cluster_count} clusters with 1 transaction spending from all of them\")\r\n+        utxos_to_merge = []\r\n+        for _ in range(max_cluster_count):\r\n+            # Use a confirmed utxo to ensure distinct clusters\r\n+            confirmed_utxo = self.wallet.get_utxo(confirmed_only=True)\r\n+            singleton = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=confirmed_utxo)\r\n+            assert singleton[\"txid\"] in node.getrawmempool()\r\n+            utxos_to_merge.append(singleton[\"new_utxo\"])\r\n+\r\n+        assert_equal(len(utxos_to_merge), max_cluster_count)\r\n+        tx_merger = self.wallet.create_self_transfer_multi(utxos_to_spend=utxos_to_merge)\r\n+        assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, tx_merger[\"hex\"])\r\n+\r\n+        # Spending from 1 fewer cluster should work\r\n+        tx_merger_all_but_one = self.wallet.create_self_transfer_multi(utxos_to_spend=utxos_to_merge[:-1])\r\n+        node.sendrawtransaction(tx_merger_all_but_one[\"hex\"])\r\n+        assert tx_merger_all_but_one[\"txid\"] in node.getrawmempool()\r\n+\r\n+    @cleanup\r\n+    def test_cluster_merging_size(self, max_cluster_size_vbytes):\r\n+        node = self.nodes[0]\r\n+\r\n+        self.log.info(f\"Test merging clusters with sizes totaling {max_cluster_size_vbytes} vB\")\r\n+        num_txns = 10\r\n+        # Leave some buffer so it is possible to add a reasonably-sized transaction.\r\n+        target_vsize_per_tx = int((max_cluster_size_vbytes - 500) / num_txns)\r\n+        utxos_to_merge = []\r\n+        vsize_remaining = max_cluster_size_vbytes\r\n+        for _ in range(num_txns):\r\n+            confirmed_utxo = self.wallet.get_utxo(confirmed_only=True)\r\n+            singleton = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=confirmed_utxo)\r\n+            assert singleton[\"txid\"] in node.getrawmempool()\r\n+            utxos_to_merge.append(singleton[\"new_utxo\"])\r\n+            vsize_remaining -= singleton[\"tx\"].get_vsize()\r\n+\r\n+        assert_greater_than_or_equal(vsize_remaining, 500)\r\n+\r\n+        # Create a transaction spending from all clusters that exceeds the cluster size limit.\r\n+        tx_merger_too_big = self.wallet.create_self_transfer_multi(utxos_to_spend=utxos_to_merge, target_vsize=vsize_remaining + 4, fee_per_output=10000)\r\n+        assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, tx_merger_too_big[\"hex\"])\r\n+\r\n+        # A transaction that is slightly smaller should work.\r\n+        tx_merger_small = self.wallet.create_self_transfer_multi(utxos_to_spend=utxos_to_merge[:-1], target_vsize=vsize_remaining - 4, fee_per_output=10000)\r\n+        node.sendrawtransaction(tx_merger_small[\"hex\"])\r\n+        assert tx_merger_small[\"txid\"] in node.getrawmempool()\r\n+\r\n+    @cleanup\r\n+    def test_cluster_limit_rbf(self, max_cluster_count):\r\n+        node = self.nodes[0]\r\n+\r\n+        # Use min feerate for the to-be-replaced transactions. There are many, so replacement cost can be expensive.\r\n+        min_feerate = node.getmempoolinfo()[\"mempoolminfee\"]\r\n+\r\n+        self.log.info(\"Test that cluster size calculation takes RBF into account\")\r\n+        utxos_created_by_parents = []\r\n+        fees_rbf_sats = 0\r\n+        for _ in range(max_cluster_count - 1):\r\n+            parent_tx = self.wallet.send_self_transfer(from_node=node, confirmed_only=True)\r\n+            utxo_to_replace = parent_tx[\"new_utxo\"]\r\n+            child_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_replace, fee_rate=min_feerate)\r\n+\r\n+            fees_rbf_sats += int(child_tx[\"fee\"] * COIN)\r\n+            utxos_created_by_parents.append(utxo_to_replace)\r\n+\r\n+        # This transaction would create a cluster of size max_cluster_count\r\n+        # Importantly, the node should account for the fact that half of the transactions will be replaced.\r\n+        tx_merger_replacer = self.wallet.create_self_transfer_multi(utxos_to_spend=utxos_created_by_parents, fee_per_output=fees_rbf_sats * 2)\r\n+        node.sendrawtransaction(tx_merger_replacer[\"hex\"])\r\n+        assert tx_merger_replacer[\"txid\"] in node.getrawmempool()\r\n+        assert_equal(node.getmempoolcluster(tx_merger_replacer[\"txid\"])['txcount'], max_cluster_count)\r\n+\r\n+        self.log.info(\"Test that cluster size calculation takes package RBF into account\")\r\n+        utxos_to_replace = []\r\n+        fee_rbf_decimal = 0\r\n+        for _ in range(max_cluster_count):\r\n+            confirmed_utxo = self.wallet.get_utxo(confirmed_only=True)\r\n+            tx_to_replace = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=confirmed_utxo, fee_rate=min_feerate)\r\n+            fee_rbf_decimal += tx_to_replace[\"fee\"]\r\n+            utxos_to_replace.append(confirmed_utxo)\r\n+\r\n+        tx_replacer = self.wallet.create_self_transfer_multi(utxos_to_spend=utxos_to_replace)\r\n+        tx_replacer_sponsor = self.wallet.create_self_transfer(utxo_to_spend=tx_replacer[\"new_utxos\"][0], fee=fee_rbf_decimal * 2)\r\n+        node.submitpackage([tx_replacer[\"hex\"], tx_replacer_sponsor[\"hex\"]], maxfeerate=0)\r\n+        assert tx_replacer[\"txid\"] in node.getrawmempool()\r\n+        assert tx_replacer_sponsor[\"txid\"] in node.getrawmempool()\r\n+        assert_equal(node.getmempoolcluster(tx_replacer[\"txid\"])['txcount'], 2)\r\n+\r\n+\r\n+    def run_test(self):\r\n+        node = self.nodes[0]\r\n+        self.wallet = MiniWallet(node)\r\n+        self.generate(self.wallet, 400)\r\n+\r\n+        self.test_cluster_limit_rbf(DEFAULT_CLUSTER_LIMIT)\r\n+\r\n+        for cluster_size_limit_kvb in [10, 20, 33, 100, DEFAULT_CLUSTER_SIZE_LIMIT_KVB]:\r\n+            self.log.info(f\"-> Resetting node with -limitclustersize={cluster_size_limit_kvb}\")\r\n+            self.restart_node(0, extra_args=[f\"-limitclustersize={cluster_size_limit_kvb}\"])\r\n+\r\n+            cluster_size_limit = cluster_size_limit_kvb * 1000\r\n+            self.test_cluster_size_limit(cluster_size_limit)\r\n+            self.test_cluster_merging_size(cluster_size_limit)\r\n+\r\n+        for cluster_count_limit in [4, 10, 16, 32, DEFAULT_CLUSTER_LIMIT]:\r\n+            self.log.info(f\"-> Resetting node with -limitclustercount={cluster_count_limit}\")\r\n+            self.restart_node(0, extra_args=[f\"-limitclustercount={cluster_count_limit}\"])\r\n+\r\n+            self.test_cluster_count_limit(cluster_count_limit)\r\n+            if cluster_count_limit > 10:\r\n+                self.test_cluster_merging(cluster_count_limit)\r\n+\r\n \r\n if __name__ == '__main__':\r\n     MempoolClusterTest(__file__).main()\r\ndiff --git a/test/functional/test_framework/mempool_util.py b/test/functional/test_framework/mempool_util.py\r\nindex 3c4609c0b44..89e2558307e 100644\r\n--- a/test/functional/test_framework/mempool_util.py\r\n+++ b/test/functional/test_framework/mempool_util.py\r\n@@ -33,6 +33,8 @@ from .wallet import (\r\n DEFAULT_MIN_RELAY_TX_FEE = 100\r\n # Default for -incrementalrelayfee in sat/kvB\r\n DEFAULT_INCREMENTAL_RELAY_FEE = 100\r\n+DEFAULT_CLUSTER_LIMIT = 64\r\n+DEFAULT_CLUSTER_SIZE_LIMIT_KVB = 101\r\n \r\n TRUC_MAX_VSIZE = 10000\r\n TRUC_CHILD_MAX_VSIZE = 1000\r\n```\r\n\r\n</details>",
      "created_at": "2025-10-15T19:11:35Z",
      "updated_at": "2025-10-17T17:52:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433669609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433669609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433686891",
      "pull_request_review_id": 3341892072,
      "id": 2433686891,
      "node_id": "PRRC_kwDOABII586RDx1r",
      "diff_hunk": "@@ -641,6 +641,8 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-test=<option>\", \"Pass a test-only option. Options include : \" + Join(TEST_OPTIONS_DOC, \", \") + \".\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustercount=<n>\", strprintf(\"Do not accept transactions connected to <n> or more existing in-mempool transactions (default: %u, maximum: %u)\", DEFAULT_CLUSTER_LIMIT, MAX_CLUSTER_COUNT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustersize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool connected transactions exceeds <n> kilobytes (default: %u)\", DEFAULT_CLUSTER_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It would be nice to expose these through the `getmempoolinfo` RPC.\r\n\r\n```diff\r\ndiff --git a/src/rpc/mempool.cpp b/src/rpc/mempool.cpp\r\nindex 492693c9cef..1b62c74f0b3 100644\r\n--- a/src/rpc/mempool.cpp\r\n+++ b/src/rpc/mempool.cpp\r\n@@ -812,6 +812,8 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\r\n     ret.pushKV(\"fullrbf\", true);\r\n     ret.pushKV(\"permitbaremultisig\", pool.m_opts.permit_bare_multisig);\r\n     ret.pushKV(\"maxdatacarriersize\", pool.m_opts.max_datacarrier_bytes.value_or(0));\r\n+    ret.pushKV(\"limitclustercount\", pool.m_opts.limits.cluster_count);\r\n+    ret.pushKV(\"limitclustersize\", pool.m_opts.limits.cluster_size_vbytes);\r\n     return ret;\r\n }\r\n \r\n@@ -836,6 +838,8 @@ static RPCHelpMan getmempoolinfo()\r\n                 {RPCResult::Type::BOOL, \"fullrbf\", \"True if the mempool accepts RBF without replaceability signaling inspection (DEPRECATED)\"},\r\n                 {RPCResult::Type::BOOL, \"permitbaremultisig\", \"True if the mempool accepts transactions with bare multisig outputs\"},\r\n                 {RPCResult::Type::NUM, \"maxdatacarriersize\", \"Maximum number of bytes that can be used by OP_RETURN outputs in the mempool\"},\r\n+                {RPCResult::Type::NUM, \"limitclustercount\", \"Maximum number of transactions that can be in a cluster (configured by -limitclustercount)\"},\r\n+                {RPCResult::Type::NUM, \"limitclustersize\", \"Maximum size of a cluster in virtual bytes (configured by -limitclustersize)\"},\r\n             }},\r\n         RPCExamples{\r\n             HelpExampleCli(\"getmempoolinfo\", \"\")\r\n\r\n```",
      "created_at": "2025-10-15T19:18:04Z",
      "updated_at": "2025-10-15T20:32:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433686891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433686891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": 644,
      "original_start_line": 644,
      "start_side": "RIGHT",
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433860250",
      "pull_request_review_id": 3340512731,
      "id": 2433860250,
      "node_id": "PRRC_kwDOABII586REcKa",
      "diff_hunk": "@@ -145,10 +143,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock()\n     pblock->nTime = TicksSinceEpoch<std::chrono::seconds>(NodeClock::now());\n     m_lock_time_cutoff = pindexPrev->GetMedianTimePast();\n \n-    int nPackagesSelected = 0;\n-    int nDescendantsUpdated = 0;\n     if (m_mempool) {\n-        addPackageTxs(nPackagesSelected, nDescendantsUpdated);\n+        LOCK(m_mempool->cs);\n+        m_mempool->StartBlockBuilding();\n+        addChunks();",
      "path": "src/node/miner.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ae1ac5410383e57ed16867580a5fd355a46953de\r\n\r\nSeems more self-contained to start/stop the builder inside `addChunks`",
      "created_at": "2025-10-15T20:30:53Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433860250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433860250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433884234",
      "pull_request_review_id": 3340512731,
      "id": 2433884234,
      "node_id": "PRRC_kwDOABII586REiBK",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);",
      "path": "src/node/miner.cpp",
      "position": 242,
      "original_position": 240,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ae1ac5410383e57ed16867580a5fd355a46953de\r\n\r\nif we're essentially only using this, why not inline `chunk_feerate` instead?",
      "created_at": "2025-10-15T20:40:00Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433884234",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433884234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 250,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433925096",
      "pull_request_review_id": 3340512731,
      "id": 2433925096,
      "node_id": "PRRC_kwDOABII586REr_o",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;",
      "path": "src/node/miner.cpp",
      "position": 224,
      "original_position": 224,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ae1ac5410383e57ed16867580a5fd355a46953de\r\n\r\nWas getting confused with the two vectors, are they even needed?\r\n\r\n```\r\ndiff --git a/src/node/miner.cpp b/src/node/miner.cpp\r\nindex 52103bda82..1bfe771444 100644\r\n--- a/src/node/miner.cpp\r\n+++ b/src/node/miner.cpp\r\n@@ -206,8 +206,8 @@ bool BlockAssembler::TestPackage(FeePerWeight package_feerate, int64_t packageSi\r\n // Perform transaction-level checks before adding to block:\r\n // - transaction finality (locktime)\r\n-bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\r\n+bool BlockAssembler::TestPackageTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const\r\n {\r\n-    for (auto tx : txs) {\r\n-        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\r\n+    for (const auto tx : txs) {\r\n+        if (!IsFinalTx(tx.get().GetTx(), nHeight, m_lock_time_cutoff)) {\r\n             return false;\r\n         }\r\n@@ -243,13 +243,11 @@ void BlockAssembler::addChunks()\r\n \r\n     std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\r\n+    selected_transactions.reserve(MAX_CLUSTER_COUNT_LIMIT);\r\n     FeePerWeight chunk_feerate;\r\n \r\n+    // This fills selected_transactions\r\n     chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\r\n     FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);\r\n \r\n-    std::vector<const CTxMemPoolEntry*> chunk_txs;\r\n-    // We'll add at most one chunk per iteration below, and chunk count is bounded by\r\n-    // the cluster size limit.\r\n-    chunk_txs.reserve(MAX_CLUSTER_COUNT_LIMIT);\r\n     while (selected_transactions.size() > 0) {\r\n         // Check to see if min fee rate is still respected.\r\n@@ -260,12 +258,10 @@ void BlockAssembler::addChunks()\r\n \r\n         int64_t package_sig_ops = 0;\r\n-        chunk_txs.clear();\r\n         for (const auto& tx : selected_transactions) {\r\n-            chunk_txs.emplace_back(&tx.get());\r\n             package_sig_ops += tx.get().GetSigOpCost();\r\n         }\r\n \r\n         // Check to see if this chunk will fit.\r\n-        if (!TestPackage(chunk_feerate, package_sig_ops) || !TestPackageTransactions(chunk_txs)) {\r\n+        if (!TestPackage(chunk_feerate, package_sig_ops) || !TestPackageTransactions(selected_transactions)) {\r\n             m_mempool->SkipBuilderChunk();\r\n             // This chunk won't fit, so we let it be removed from the heap and\r\n@@ -283,6 +279,6 @@ void BlockAssembler::addChunks()\r\n             // This chunk will fit, so add it to the block.\r\n             nConsecutiveFailed = 0;\r\n-            for (const auto& tx : chunk_txs) {\r\n-                AddToBlock(*tx);\r\n+            for (const auto& tx : selected_transactions) {\r\n+                AddToBlock(tx);\r\n             }\r\n             pblocktemplate->m_package_feerates.emplace_back(chunk_feerate_vsize);\r\ndiff --git a/src/node/miner.h b/src/node/miner.h\r\nindex 58fedcc1af..a42e2e2cb4 100644\r\n--- a/src/node/miner.h\r\n+++ b/src/node/miner.h\r\n@@ -117,5 +117,5 @@ private:\r\n       * These checks should always succeed, and they're here\r\n       * only as an extra check in case of suboptimal node configuration */\r\n-    bool TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const;\r\n+    bool TestPackageTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const;\r\n };\r\n ```",
      "created_at": "2025-10-15T20:57:07Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433925096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433925096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 244,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433939831",
      "pull_request_review_id": 3340512731,
      "id": 2433939831,
      "node_id": "PRRC_kwDOABII586REvl3",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);\n \n-        if (packageFees < m_options.blockMinFeeRate.GetFee(packageSize)) {\n-            // Everything else we might consider has a lower fee rate\n+    std::vector<const CTxMemPoolEntry*> chunk_txs;\n+    // We'll add at most one chunk per iteration below, and chunk count is bounded by\n+    // the cluster size limit.\n+    chunk_txs.reserve(MAX_CLUSTER_COUNT_LIMIT);\n+    while (selected_transactions.size() > 0) {\n+        // Check to see if min fee rate is still respected.\n+        if (chunk_feerate.fee < m_options.blockMinFeeRate.GetFee(chunk_feerate_vsize.size)) {\n+            // Everything else we might consider has a lower feerate\n             return;\n         }\n \n-        if (!TestPackage(packageSize, packageSigOpsCost)) {\n-            if (fUsingModified) {\n-                // Since we always look at the best entry in mapModifiedTx,\n-                // we must erase failed entries so that we can consider the\n-                // next best entry on the next loop iteration\n-                mapModifiedTx.get<ancestor_score>().erase(modit);\n-                failedTx.insert(iter->GetSharedTx()->GetHash());\n-            }\n+        int64_t package_sig_ops = 0;\n+        chunk_txs.clear();\n+        for (const auto& tx : selected_transactions) {\n+            chunk_txs.emplace_back(&tx.get());\n+            package_sig_ops += tx.get().GetSigOpCost();\n+        }\n \n+        // Check to see if this chunk will fit.\n+        if (!TestPackage(chunk_feerate, package_sig_ops) || !TestPackageTransactions(chunk_txs)) {",
      "path": "src/node/miner.cpp",
      "position": 1,
      "original_position": 271,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ae1ac5410383e57ed16867580a5fd355a46953de\r\n\r\nnit: I think renaming `TestPackage` to `TestPackageBlockLimits` or something might help readability going forward",
      "created_at": "2025-10-15T21:04:20Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2433939831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433939831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434013019",
      "pull_request_review_id": 3340512731,
      "id": 2434013019,
      "node_id": "PRRC_kwDOABII586RFBdb",
      "diff_hunk": "@@ -1107,6 +1085,12 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     for (auto it : all_conflicts) {\n         m_subpackage.m_changeset->StageRemoval(it);\n     }\n+\n+    if (const auto err_string{ImprovesFeerateDiagram(*m_subpackage.m_changeset)}) {\n+        // If we can't calculate a feerate, it's because the cluster size limits were hit.",
      "path": "src/validation.cpp",
      "position": 259,
      "original_position": 50,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2aad9f01e514b77538eb780138a8e52484eaf5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "2aad9f01e514b77538eb780138a8e52484eaf5a8\r\n\r\nis this right? If so this warrants a test (note to self and others)\r\n```Suggestion\r\n        // If we can't calculate a feerate, it's because the cluster size limits were hit, and we may want to try package RBF.\r\n```",
      "created_at": "2025-10-15T21:31:40Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434013019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434013019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1023,
      "original_line": 1023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434061477",
      "pull_request_review_id": 3340512731,
      "id": 2434061477,
      "node_id": "PRRC_kwDOABII586RFNSl",
      "diff_hunk": "@@ -514,6 +514,15 @@ class CTxMemPool\n      */\n     void UpdateTransactionsFromBlock(const std::vector<Txid>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\n \n+    size_t GetUniqueClusterCount(const setEntries& iters_conflicting) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        std::vector<const TxGraph::Ref *> entries;\n+        entries.reserve(iters_conflicting.size());\n+        for (auto it : iters_conflicting) {\n+            entries.emplace_back(&*it);\n+        }\n+        return m_txgraph->CountDistinctClusters(entries, TxGraph::Level::MAIN);",
      "path": "src/txmempool.h",
      "position": 368,
      "original_position": 10,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2aad9f01e514b77538eb780138a8e52484eaf5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "2aad9f01e514b77538eb780138a8e52484eaf5a8\r\n\r\nnit: belt and suspenders\r\n\r\n```Suggestion\r\n        Assume(!m_txgraph->IsOversized(TxGraph::Level::MAIN));\r\n        return m_txgraph->CountDistinctClusters(entries, TxGraph::Level::MAIN);\r\n```",
      "created_at": "2025-10-15T21:46:07Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434061477",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434061477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 419,
      "original_line": 419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434078457",
      "pull_request_review_id": 3340512731,
      "id": 2434078457,
      "node_id": "PRRC_kwDOABII586RFRb5",
      "diff_hunk": "@@ -193,12 +190,12 @@ def test_package_rbf_additional_fees(self):\n \n     def test_package_rbf_max_conflicts(self):\n         node = self.nodes[0]\n-        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n-        num_coins = 51\n+        self.log.info(\"Check Package RBF cannot conflict with  more than MAX_REPLACEMENT_CANDIDATES clusters\")\n+        num_coins = 101\n         parent_coins = self.coins[:num_coins]\n         del self.coins[:num_coins]\n \n-        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        # Original transactions: 101 transactions with 1 descendants each -> 202 total transactions, 101 clusters",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 22,
      "original_position": 22,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2aad9f01e514b77538eb780138a8e52484eaf5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "2aad9f01e514b77538eb780138a8e52484eaf5a8\r\n\r\nDidn't carefully look at this test case, but we should make sure we are testing the case of package RBF conflicting against clusters of up to count 64\r\n\r\nLooks like the test is still only conflicting with size 2",
      "created_at": "2025-10-15T21:55:41Z",
      "updated_at": "2025-10-15T21:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434078457",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434078457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 198,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434195677",
      "pull_request_review_id": 3342628801,
      "id": 2434195677,
      "node_id": "PRRC_kwDOABII586RFuDd",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test cluster mempool accessors and limits\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+MAX_CLUSTER_COUNT = 64\n+\n+class MempoolClusterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        node = self.nodes[0]\n+        parent_tx = self.wallet.send_self_transfer(from_node=node)\n+        utxo_to_spend = parent_tx[\"new_utxo\"]\n+        ancestors = [parent_tx[\"txid\"]]\n+        while len(node.getrawmempool()) < MAX_CLUSTER_COUNT:\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend)\n+            # Confirm that each transaction is in the same cluster as the first.\n+            assert node.getmempoolcluster(next_tx['txid']) == node.getmempoolcluster(parent_tx['txid'])\n+\n+            # Confirm that the ancestors are what we expect\n+            mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\n+            assert sorted(mempool_ancestors) == sorted(ancestors)\n+\n+            # Confirm that each successive transaction is added as a descendant.\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in ancestors ])\n+\n+            # Update for next iteration\n+            ancestors.append(next_tx[\"txid\"])\n+            utxo_to_spend = next_tx[\"new_utxo\"]\n+\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == MAX_CLUSTER_COUNT\n+        feeratediagram = node.getmempoolfeeratediagram()\n+        last_val = [0, 0]\n+        for x in feeratediagram:\n+            assert x['vsize'] > 0 or x['fee'] == 0\n+            assert last_val[0]*x['fee'] >= last_val[1]*x['vsize']\n+            last_val = [x['vsize'], x['fee']]\n+\n+        # Test that adding one more transaction to the cluster will fail.\n+        bad_tx = self.wallet.create_self_transfer(utxo_to_spend=utxo_to_spend)\n+        assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, bad_tx[\"hex\"])\n+\n+        # TODO: verify that the size limits are also enforced.\n+        # TODO: add tests that exercise rbf, package submission, and package\n+        # rbf and verify that cluster limits are enforced.",
      "path": "test/functional/mempool_cluster.py",
      "position": 1,
      "original_position": 59,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "in_reply_to_id": 2433669609,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks good, will include -- thank you for the test coverage!",
      "created_at": "2025-10-15T23:19:02Z",
      "updated_at": "2025-10-15T23:19:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434195677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434195677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434207347",
      "pull_request_review_id": 3342642066,
      "id": 2434207347,
      "node_id": "PRRC_kwDOABII586RFw5z",
      "diff_hunk": "@@ -59,8 +59,8 @@ class LOCKABLE Epoch\n     public:\n         Marker() = default;\n         Marker(const Marker&) = default;\n-        Marker(Marker&&) = delete;\n-        Marker& operator=(Marker&&) = delete;\n+        Marker(Marker&&) = default;",
      "path": "src/util/epochguard.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "51430680ecb722e1d4ee4a26dac5724050f41c9e",
      "in_reply_to_id": 2432642810,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok it's been a really long time since I've thought about this, but I believe the issue was that I needed epoch markers to be movable so that I could make CTxMemPoolEntry movable.\r\n\r\nI don't exactly remember why CTxMemPoolEntry needs to be movable but I believe it has something to do with inheriting from TxGraph::Ref.  I guess Ref's can't be copied, but they can be moved?",
      "created_at": "2025-10-15T23:29:55Z",
      "updated_at": "2025-10-15T23:29:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434207347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434207347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434211174",
      "pull_request_review_id": 3342646532,
      "id": 2434211174,
      "node_id": "PRRC_kwDOABII586RFx1m",
      "diff_hunk": "@@ -137,12 +137,11 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<Txid>& vHashesToU\n         {",
      "path": "src/txmempool.cpp",
      "position": 110,
      "original_position": 1,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "6c73e4744837a7dc138a9177df3a48f30a1ba6c1",
      "in_reply_to_id": 2432836478,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Actually, in fairness I think there might be some platforms where the space usage may be different -- I think I ran into that at some point in the history of this PR with one of our CI jobs, but I don't recall the details now.  (Even still, I think saving the map lookup is likely worth it.)",
      "created_at": "2025-10-15T23:33:47Z",
      "updated_at": "2025-10-15T23:33:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434211174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434211174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434216116",
      "pull_request_review_id": 3342652253,
      "id": 2434216116,
      "node_id": "PRRC_kwDOABII586RFzC0",
      "diff_hunk": "@@ -145,10 +143,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock()\n     pblock->nTime = TicksSinceEpoch<std::chrono::seconds>(NodeClock::now());\n     m_lock_time_cutoff = pindexPrev->GetMedianTimePast();\n \n-    int nPackagesSelected = 0;\n-    int nDescendantsUpdated = 0;\n     if (m_mempool) {\n-        addPackageTxs(nPackagesSelected, nDescendantsUpdated);\n+        LOCK(m_mempool->cs);\n+        m_mempool->StartBlockBuilding();\n+        addChunks();",
      "path": "src/node/miner.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433860250,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the reason I didn't is probably because `addChunks()` has multiple places where it returns, so it seemed a little messy to have to invoke `StopBlockBuilding()` within that function. But if you think it's worth it, I can rework the function and push the calls down into it.",
      "created_at": "2025-10-15T23:38:36Z",
      "updated_at": "2025-10-15T23:38:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434216116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434216116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434220844",
      "pull_request_review_id": 3342657436,
      "id": 2434220844,
      "node_id": "PRRC_kwDOABII586RF0Ms",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);",
      "path": "src/node/miner.cpp",
      "position": 242,
      "original_position": 240,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433884234,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In this commit, `chunk_feerate.fee` is used further down, but this gets cleaned up further in #33591 with the introduction of `CFeeRate::GetFeePerVSize`, at which point this could be inlined.  I'll make that change in #33591.",
      "created_at": "2025-10-15T23:43:14Z",
      "updated_at": "2025-10-15T23:43:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434220844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434220844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 250,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434234855",
      "pull_request_review_id": 3342672654,
      "id": 2434234855,
      "node_id": "PRRC_kwDOABII586RF3nn",
      "diff_hunk": "@@ -1107,6 +1085,12 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     for (auto it : all_conflicts) {\n         m_subpackage.m_changeset->StageRemoval(it);\n     }\n+\n+    if (const auto err_string{ImprovesFeerateDiagram(*m_subpackage.m_changeset)}) {\n+        // If we can't calculate a feerate, it's because the cluster size limits were hit.",
      "path": "src/validation.cpp",
      "position": 259,
      "original_position": 50,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2aad9f01e514b77538eb780138a8e52484eaf5a8",
      "in_reply_to_id": 2434013019,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will take this doc change in #33591.",
      "created_at": "2025-10-15T23:56:42Z",
      "updated_at": "2025-10-15T23:56:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434234855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434234855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1023,
      "original_line": 1023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434241333",
      "pull_request_review_id": 3342680926,
      "id": 2434241333,
      "node_id": "PRRC_kwDOABII586RF5M1",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;",
      "path": "src/node/miner.cpp",
      "position": 224,
      "original_position": 224,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433925096,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point!  Taking your change.",
      "created_at": "2025-10-16T00:03:00Z",
      "updated_at": "2025-10-16T00:03:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434241333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434241333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 244,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434242379",
      "pull_request_review_id": 3342682304,
      "id": 2434242379,
      "node_id": "PRRC_kwDOABII586RF5dL",
      "diff_hunk": "@@ -1604,6 +1611,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n+    // Check if the transaction would exceed the cluster size limit.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "5a388c0d595b2318fea4b1dce977e2d5ff1abc48",
      "in_reply_to_id": 2433318113,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-10-16T00:04:07Z",
      "updated_at": "2025-10-16T00:04:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434242379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434242379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434242823",
      "pull_request_review_id": 3342682894,
      "id": 2434242823,
      "node_id": "PRRC_kwDOABII586RF5kH",
      "diff_hunk": "@@ -641,6 +641,8 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-test=<option>\", \"Pass a test-only option. Options include : \" + Join(TEST_OPTIONS_DOC, \", \") + \".\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustercount=<n>\", strprintf(\"Do not accept transactions connected to <n> or more existing in-mempool transactions (default: %u, maximum: %u)\", DEFAULT_CLUSTER_LIMIT, MAX_CLUSTER_COUNT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustersize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool connected transactions exceeds <n> kilobytes (default: %u)\", DEFAULT_CLUSTER_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "in_reply_to_id": 2433686891,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks.",
      "created_at": "2025-10-16T00:04:37Z",
      "updated_at": "2025-10-16T00:04:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2434242823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434242823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": 644,
      "original_start_line": 644,
      "start_side": "RIGHT",
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435629619",
      "pull_request_review_id": 3344448886,
      "id": 2435629619,
      "node_id": "PRRC_kwDOABII586RLMIz",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test cluster mempool accessors and limits\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+MAX_CLUSTER_COUNT = 64\n+\n+class MempoolClusterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        node = self.nodes[0]\n+        parent_tx = self.wallet.send_self_transfer(from_node=node)\n+        utxo_to_spend = parent_tx[\"new_utxo\"]\n+        ancestors = [parent_tx[\"txid\"]]\n+        while len(node.getrawmempool()) < MAX_CLUSTER_COUNT:\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend)\n+            # Confirm that each transaction is in the same cluster as the first.\n+            assert node.getmempoolcluster(next_tx['txid']) == node.getmempoolcluster(parent_tx['txid'])\n+\n+            # Confirm that the ancestors are what we expect\n+            mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\n+            assert sorted(mempool_ancestors) == sorted(ancestors)\n+\n+            # Confirm that each successive transaction is added as a descendant.\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in ancestors ])\n+\n+            # Update for next iteration\n+            ancestors.append(next_tx[\"txid\"])\n+            utxo_to_spend = next_tx[\"new_utxo\"]\n+\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == MAX_CLUSTER_COUNT\n+        feeratediagram = node.getmempoolfeeratediagram()\n+        last_val = [0, 0]\n+        for x in feeratediagram:\n+            assert x['vsize'] > 0 or x['fee'] == 0\n+            assert last_val[0]*x['fee'] >= last_val[1]*x['vsize']\n+            last_val = [x['vsize'], x['fee']]\n+\n+        # Test that adding one more transaction to the cluster will fail.\n+        bad_tx = self.wallet.create_self_transfer(utxo_to_spend=utxo_to_spend)\n+        assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, bad_tx[\"hex\"])\n+\n+        # TODO: verify that the size limits are also enforced.\n+        # TODO: add tests that exercise rbf, package submission, and package\n+        # rbf and verify that cluster limits are enforced.",
      "path": "test/functional/mempool_cluster.py",
      "position": 1,
      "original_position": 59,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "in_reply_to_id": 2433669609,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I did make a few changes (the linter alerted on a few lines) so please take a look again at what is here.",
      "created_at": "2025-10-16T11:57:52Z",
      "updated_at": "2025-10-16T11:57:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435629619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435629619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435644194",
      "pull_request_review_id": 3344470492,
      "id": 2435644194,
      "node_id": "PRRC_kwDOABII586RLPsi",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);",
      "path": "src/node/miner.cpp",
      "position": 242,
      "original_position": 240,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433884234,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, actually we need the weight further down for the check to see if the chunk will fit in the block, so I'm inclined to leave this as-is?",
      "created_at": "2025-10-16T12:03:05Z",
      "updated_at": "2025-10-16T12:03:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435644194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435644194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 250,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435654614",
      "pull_request_review_id": 3344485966,
      "id": 2435654614,
      "node_id": "PRRC_kwDOABII586RLSPW",
      "diff_hunk": "@@ -514,6 +514,15 @@ class CTxMemPool\n      */\n     void UpdateTransactionsFromBlock(const std::vector<Txid>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main) LOCKS_EXCLUDED(m_epoch);\n \n+    size_t GetUniqueClusterCount(const setEntries& iters_conflicting) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        std::vector<const TxGraph::Ref *> entries;\n+        entries.reserve(iters_conflicting.size());\n+        for (auto it : iters_conflicting) {\n+            entries.emplace_back(&*it);\n+        }\n+        return m_txgraph->CountDistinctClusters(entries, TxGraph::Level::MAIN);",
      "path": "src/txmempool.h",
      "position": 368,
      "original_position": 10,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2aad9f01e514b77538eb780138a8e52484eaf5a8",
      "in_reply_to_id": 2434061477,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-16T12:06:51Z",
      "updated_at": "2025-10-16T12:06:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435654614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435654614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 419,
      "original_line": 419,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435668780",
      "pull_request_review_id": 3344505191,
      "id": 2435668780,
      "node_id": "PRRC_kwDOABII586RLVss",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;",
      "path": "src/node/miner.cpp",
      "position": 224,
      "original_position": 224,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433925096,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Incorporated in a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
      "created_at": "2025-10-16T12:10:55Z",
      "updated_at": "2025-10-16T12:10:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435668780",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435668780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 244,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435683806",
      "pull_request_review_id": 3344528789,
      "id": 2435683806,
      "node_id": "PRRC_kwDOABII586RLZXe",
      "diff_hunk": "@@ -1107,6 +1085,12 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     for (auto it : all_conflicts) {\n         m_subpackage.m_changeset->StageRemoval(it);\n     }\n+\n+    if (const auto err_string{ImprovesFeerateDiagram(*m_subpackage.m_changeset)}) {\n+        // If we can't calculate a feerate, it's because the cluster size limits were hit.",
      "path": "src/validation.cpp",
      "position": 259,
      "original_position": 50,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2aad9f01e514b77538eb780138a8e52484eaf5a8",
      "in_reply_to_id": 2434013019,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in 6881d21c57ce122f0c2f5900e6caab7ba806d279.",
      "created_at": "2025-10-16T12:15:05Z",
      "updated_at": "2025-10-16T12:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435683806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435683806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1023,
      "original_line": 1023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435843010",
      "pull_request_review_id": 3344751997,
      "id": 2435843010,
      "node_id": "PRRC_kwDOABII586RMAPC",
      "diff_hunk": "@@ -145,10 +143,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock()\n     pblock->nTime = TicksSinceEpoch<std::chrono::seconds>(NodeClock::now());\n     m_lock_time_cutoff = pindexPrev->GetMedianTimePast();\n \n-    int nPackagesSelected = 0;\n-    int nDescendantsUpdated = 0;\n     if (m_mempool) {\n-        addPackageTxs(nPackagesSelected, nDescendantsUpdated);\n+        LOCK(m_mempool->cs);\n+        m_mempool->StartBlockBuilding();\n+        addChunks();",
      "path": "src/node/miner.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433860250,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "sounds reasonable, leave as is",
      "created_at": "2025-10-16T13:06:31Z",
      "updated_at": "2025-10-16T13:06:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435843010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435843010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435845248",
      "pull_request_review_id": 3344755003,
      "id": 2435845248,
      "node_id": "PRRC_kwDOABII586RMAyA",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);",
      "path": "src/node/miner.cpp",
      "position": 242,
      "original_position": 240,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433884234,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oops you're right",
      "created_at": "2025-10-16T13:07:17Z",
      "updated_at": "2025-10-16T13:07:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435845248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435845248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 250,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435934233",
      "pull_request_review_id": 3339641710,
      "id": 2435934233,
      "node_id": "PRRC_kwDOABII586RMWgZ",
      "diff_hunk": "@@ -195,29 +100,23 @@ class BlockAssembler\n     /** Clear the block's state and prepare for assembling a new block */\n     void resetBlock();\n     /** Add a tx to the block */\n-    void AddToBlock(CTxMemPool::txiter iter);\n+    void AddToBlock(const CTxMemPoolEntry& entry);\n \n     // Methods for how to add transactions to a block.\n-    /** Add transactions based on feerate including unconfirmed ancestors\n-      * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n-      * statistics from the package selection (for logging statistics).\n+    /** Add transactions based on chunk feerate\n       *\n       * @pre BlockAssembler::m_mempool must not be nullptr\n     */\n-    void addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(!m_mempool->cs);\n+    void addChunks() EXCLUSIVE_LOCKS_REQUIRED(m_mempool->cs);\n \n     // helper functions for addPackageTxs()",
      "path": "src/node/miner.h",
      "position": 129,
      "original_position": 129,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Select transactions for blocks based on chunk feerate\" a8be743aeb42ec8ab613f822989a11a2f2ce70ac\r\n\r\nnit:  change to helper functions for addChunks since addPackageTxs is now gone.\r\n```suggestion\r\n    // helper functions for addChunks()\r\n\r\n```",
      "created_at": "2025-10-16T13:31:47Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435934233",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435934233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435949023",
      "pull_request_review_id": 3339641710,
      "id": 2435949023,
      "node_id": "PRRC_kwDOABII586RMaHf",
      "diff_hunk": "@@ -195,29 +100,23 @@ class BlockAssembler\n     /** Clear the block's state and prepare for assembling a new block */\n     void resetBlock();\n     /** Add a tx to the block */\n-    void AddToBlock(CTxMemPool::txiter iter);\n+    void AddToBlock(const CTxMemPoolEntry& entry);\n \n     // Methods for how to add transactions to a block.\n-    /** Add transactions based on feerate including unconfirmed ancestors\n-      * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n-      * statistics from the package selection (for logging statistics).\n+    /** Add transactions based on chunk feerate\n       *\n       * @pre BlockAssembler::m_mempool must not be nullptr\n     */\n-    void addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(!m_mempool->cs);\n+    void addChunks() EXCLUSIVE_LOCKS_REQUIRED(m_mempool->cs);\n \n     // helper functions for addPackageTxs()\n-    /** Remove confirmed (inBlock) entries from given set */\n-    void onlyUnconfirmed(CTxMemPool::setEntries& testSet);\n     /** Test if a new package would \"fit\" in the block */\n-    bool TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const;\n+    bool TestPackage(FeePerWeight package_feerate, int64_t packageSigOpsCost) const;",
      "path": "src/node/miner.h",
      "position": 134,
      "original_position": 134,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Select transactions for blocks based on chunk feerate\" a8be743aeb42ec8ab613f822989a11a2f2ce70ac\r\n\r\n\r\nnit: It will be better for us replace package with chunk here and other places in the miner?\r\n\r\n```diff\r\ndiff --git a/src/node/miner.cpp b/src/node/miner.cpp\r\nindex 1bfe7714440..e80d55c1f31 100644\r\n--- a/src/node/miner.cpp\r\n+++ b/src/node/miner.cpp\r\n@@ -192,12 +192,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock()\r\n     return std::move(pblocktemplate);\r\n }\r\n \r\n-bool BlockAssembler::TestPackage(FeePerWeight package_feerate, int64_t packageSigOpsCost) const\r\n+bool BlockAssembler::TestChunk(FeePerWeight chunk_feerate, int64_t chunk_sigops_cost) const\r\n {\r\n-    if (nBlockWeight + package_feerate.size >= m_options.nBlockMaxWeight) {\r\n+    if (nBlockWeight + chunk_feerate.size >= m_options.nBlockMaxWeight) {\r\n         return false;\r\n     }\r\n-    if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST) {\r\n+    if (nBlockSigOpsCost + chunk_sigops_cost >= MAX_BLOCK_SIGOPS_COST) {\r\n         return false;\r\n     }\r\n     return true;\r\n@@ -205,7 +205,7 @@ bool BlockAssembler::TestPackage(FeePerWeight package_feerate, int64_t packageSi\r\n \r\n // Perform transaction-level checks before adding to block:\r\n // - transaction finality (locktime)\r\n-bool BlockAssembler::TestPackageTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const\r\n+bool BlockAssembler::TestChunkTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const\r\n {\r\n     for (const auto tx : txs) {\r\n         if (!IsFinalTx(tx.get().GetTx(), nHeight, m_lock_time_cutoff)) {\r\n@@ -256,13 +256,13 @@ void BlockAssembler::addChunks()\r\n             return;\r\n         }\r\n \r\n-        int64_t package_sig_ops = 0;\r\n+        int64_t chunk_sig_ops = 0;\r\n         for (const auto& tx : selected_transactions) {\r\n-            package_sig_ops += tx.get().GetSigOpCost();\r\n+            chunk_sig_ops += tx.get().GetSigOpCost();\r\n         }\r\n \r\n         // Check to see if this chunk will fit.\r\n-        if (!TestPackage(chunk_feerate, package_sig_ops) || !TestPackageTransactions(selected_transactions)) {\r\n+        if (!TestChunk(chunk_feerate, chunk_sig_ops) || !TestChunkTransactions(selected_transactions)) {\r\n             m_mempool->SkipBuilderChunk();\r\n             // This chunk won't fit, so we let it be removed from the heap and\r\n             // we'll try the next best.\r\n@@ -281,7 +281,7 @@ void BlockAssembler::addChunks()\r\n             for (const auto& tx : selected_transactions) {\r\n                 AddToBlock(tx);\r\n             }\r\n-            pblocktemplate->m_package_feerates.emplace_back(chunk_feerate_vsize);\r\n+            pblocktemplate->m_chunk_feerates.emplace_back(chunk_feerate_vsize);\r\n         }\r\n \r\n         selected_transactions.clear();\r\ndiff --git a/src/node/miner.h b/src/node/miner.h\r\nindex a42e2e2cb48..5fee028d9cd 100644\r\n--- a/src/node/miner.h\r\n+++ b/src/node/miner.h\r\n@@ -47,9 +47,9 @@ struct CBlockTemplate\r\n     // Sigops per transaction, not including coinbase transaction (unlike CBlock::vtx).\r\n     std::vector<int64_t> vTxSigOpsCost;\r\n     std::vector<unsigned char> vchCoinbaseCommitment;\r\n-    /* A vector of package fee rates, ordered by the sequence in which\r\n-     * packages are selected for inclusion in the block template.*/\r\n-    std::vector<FeePerVSize> m_package_feerates;\r\n+    /* A vector of chunk fee rates, ordered by the sequence in which\r\n+     * chunks are selected for inclusion in the block template.*/\r\n+    std::vector<FeePerVSize> m_chunk_feerates;\r\n };\r\n \r\n /** Generate a new block, without valid proof-of-work */\r\n@@ -109,14 +109,14 @@ private:\r\n     */\r\n     void addChunks() EXCLUSIVE_LOCKS_REQUIRED(m_mempool->cs);\r\n \r\n-    // helper functions for addPackageTxs()\r\n-    /** Test if a new package would \"fit\" in the block */\r\n-    bool TestPackage(FeePerWeight package_feerate, int64_t packageSigOpsCost) const;\r\n-    /** Perform checks on each transaction in a package:\r\n+    // helper functions for addChunkTxs()\r\n+    /** Test if a new chunk would \"fit\" in the block */\r\n+    bool TestChunk(FeePerWeight chunk_feerate, int64_t chunk_sigops_cost) const;\r\n+    /** Perform checks on each transaction in a chunk:\r\n       * locktime, premature-witness, serialized size (if necessary)\r\n       * These checks should always succeed, and they're here\r\n       * only as an extra check in case of suboptimal node configuration */\r\n-    bool TestPackageTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const;\r\n+    bool TestChunkTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const;\r\n };\r\n \r\n /**\r\n```",
      "created_at": "2025-10-16T13:36:14Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2435949023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2435949023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436027616",
      "pull_request_review_id": 3342174984,
      "id": 2436027616,
      "node_id": "PRRC_kwDOABII586RMtTg",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test cluster mempool accessors and limits\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+MAX_CLUSTER_COUNT = 64\n+\n+class MempoolClusterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        node = self.nodes[0]\n+        parent_tx = self.wallet.send_self_transfer(from_node=node)\n+        utxo_to_spend = parent_tx[\"new_utxo\"]\n+        ancestors = [parent_tx[\"txid\"]]\n+        while len(node.getrawmempool()) < MAX_CLUSTER_COUNT:\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend)\n+            # Confirm that each transaction is in the same cluster as the first.\n+            assert node.getmempoolcluster(next_tx['txid']) == node.getmempoolcluster(parent_tx['txid'])\n+\n+            # Confirm that the ancestors are what we expect\n+            mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\n+            assert sorted(mempool_ancestors) == sorted(ancestors)\n+\n+            # Confirm that each successive transaction is added as a descendant.\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in ancestors ])\n+\n+            # Update for next iteration\n+            ancestors.append(next_tx[\"txid\"])\n+            utxo_to_spend = next_tx[\"new_utxo\"]\n+\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == MAX_CLUSTER_COUNT\n+        feeratediagram = node.getmempoolfeeratediagram()\n+        last_val = [0, 0]\n+        for x in feeratediagram:\n+            assert x['vsize'] > 0 or x['fee'] == 0\n+            assert last_val[0]*x['fee'] >= last_val[1]*x['vsize']\n+            last_val = [x['vsize'], x['fee']]\n+\n+        # Test that adding one more transaction to the cluster will fail.\n+        bad_tx = self.wallet.create_self_transfer(utxo_to_spend=utxo_to_spend)\n+        assert_raises_rpc_error(-26, \"too-large-cluster\", node.sendrawtransaction, bad_tx[\"hex\"])\n+\n+        # TODO: verify that the size limits are also enforced.\n+        # TODO: add tests that exercise rbf, package submission, and package\n+        # rbf and verify that cluster limits are enforced.",
      "path": "test/functional/mempool_cluster.py",
      "position": 1,
      "original_position": 59,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "in_reply_to_id": 2433669609,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My bad on the linter, lgtm!",
      "created_at": "2025-10-16T13:56:55Z",
      "updated_at": "2025-10-17T17:49:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436027616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436027616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436033865",
      "pull_request_review_id": 3339641710,
      "id": 2436033865,
      "node_id": "PRRC_kwDOABII586RMu1J",
      "diff_hunk": "@@ -219,224 +205,88 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<CTxMemPoolEntryRef>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (const auto tx : txs) {\n+        if (!IsFinalTx(tx.get().GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    selected_transactions.reserve(MAX_CLUSTER_COUNT_LIMIT);\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    // This fills selected_transactions\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);\n \n-        if (packageFees < m_options.blockMinFeeRate.GetFee(packageSize)) {\n-            // Everything else we might consider has a lower fee rate\n+    while (selected_transactions.size() > 0) {\n+        // Check to see if min fee rate is still respected.\n+        if (chunk_feerate.fee < m_options.blockMinFeeRate.GetFee(chunk_feerate_vsize.size)) {\n+            // Everything else we might consider has a lower feerate\n             return;\n         }\n \n-        if (!TestPackage(packageSize, packageSigOpsCost)) {\n-            if (fUsingModified) {\n-                // Since we always look at the best entry in mapModifiedTx,\n-                // we must erase failed entries so that we can consider the\n-                // next best entry on the next loop iteration\n-                mapModifiedTx.get<ancestor_score>().erase(modit);\n-                failedTx.insert(iter->GetSharedTx()->GetHash());\n-            }\n+        int64_t package_sig_ops = 0;\n+        for (const auto& tx : selected_transactions) {\n+            package_sig_ops += tx.get().GetSigOpCost();\n+        }\n \n+        // Check to see if this chunk will fit.\n+        if (!TestPackage(chunk_feerate, package_sig_ops) || !TestPackageTransactions(selected_transactions)) {\n+            m_mempool->SkipBuilderChunk();\n+            // This chunk won't fit, so we let it be removed from the heap and\n+            // we'll try the next best.\n             ++nConsecutiveFailed;\n \n             if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && nBlockWeight +\n                     BLOCK_FULL_ENOUGH_WEIGHT_DELTA > m_options.nBlockMaxWeight) {\n                 // Give up if we're close to full and haven't succeeded in a while\n-                break;\n+                return;\n             }\n-            continue;\n-        }\n-\n-        auto ancestors{mempool.AssumeCalculateMemPoolAncestors(__func__, *iter, CTxMemPool::Limits::NoLimits(), /*fSearchForParents=*/false)};\n-\n-        onlyUnconfirmed(ancestors);\n-        ancestors.insert(iter);\n+        } else {\n+            m_mempool->IncludeBuilderChunk();\n \n-        // Test if all tx's are Final\n-        if (!TestPackageTransactions(ancestors)) {\n-            if (fUsingModified) {\n-                mapModifiedTx.get<ancestor_score>().erase(modit);\n-                failedTx.insert(iter->GetSharedTx()->GetHash());\n+            // This chunk will fit, so add it to the block.\n+            nConsecutiveFailed = 0;\n+            for (const auto& tx : selected_transactions) {\n+                AddToBlock(tx);\n             }\n-            continue;\n+            pblocktemplate->m_package_feerates.emplace_back(chunk_feerate_vsize);\n         }\n \n-        // This transaction will make it in; reset the failed counter.\n-        nConsecutiveFailed = 0;\n-\n-        // Package can be added. Sort the entries in a valid order.\n-        std::vector<CTxMemPool::txiter> sortedEntries;\n-        SortForBlock(ancestors, sortedEntries);\n-\n-        for (size_t i = 0; i < sortedEntries.size(); ++i) {\n-            AddToBlock(sortedEntries[i]);\n-            // Erase from the modified set, if present\n-            mapModifiedTx.erase(sortedEntries[i]);\n-        }\n-\n-        ++nPackagesSelected;\n-        pblocktemplate->m_package_feerates.emplace_back(packageFees, static_cast<int32_t>(packageSize));\n-\n-        // Update transactions that depend on each of these\n-        nDescendantsUpdated += UpdatePackagesForAdded(mempool, ancestors, mapModifiedTx);\n+        selected_transactions.clear();",
      "path": "src/node/miner.cpp",
      "position": 321,
      "original_position": 321,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "a8be743aeb42ec8ab613f822989a11a2f2ce70ac",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Select transactions for blocks based on chunk feerate\" a8be743aeb42ec8ab613f822989a11a2f2ce70ac\r\n\r\nnit: maybe reserve again after clear here?\r\n",
      "created_at": "2025-10-16T13:58:24Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436033865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436033865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 287,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436048271",
      "pull_request_review_id": 3339641710,
      "id": 2436048271,
      "node_id": "PRRC_kwDOABII586RMyWP",
      "diff_hunk": "@@ -535,49 +535,64 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n std::vector<CTransactionRef> TestChain100Setup::PopulateMempool(FastRandomContext& det_rand, size_t num_transactions, bool submit)\n {\n     std::vector<CTransactionRef> mempool_transactions;\n-    std::deque<std::pair<COutPoint, CAmount>> unspent_prevouts;\n+    std::deque<std::pair<COutPoint, CAmount>> unspent_prevouts, undo_info;",
      "path": "src/test/util/setup_common.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "afb9003bc602a77ed15bf4e79277d960937a5c28",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"test: rewrite PopulateMempool to not violate mempool policy (cluster size) limits\"  afb9003bc602a77ed15bf4e79277d960937a5c28\r\n\r\nnitty-nit: instead of undo, spent outputs might be better?",
      "created_at": "2025-10-16T14:02:02Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436048271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436048271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 538,
      "original_line": 538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436069486",
      "pull_request_review_id": 3345064005,
      "id": 2436069486,
      "node_id": "PRRC_kwDOABII586RM3hu",
      "diff_hunk": "@@ -74,12 +74,11 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     // Add every entry to m_entries_by_txid and m_entries, except the ones that will be replaced.\n     for (const auto& txiter : cluster) {\n         if (!m_to_be_replaced.count(txiter->GetTx().GetHash())) {\n-            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(),\n-                MiniMinerMempoolEntry{/*tx_in=*/txiter->GetSharedTx(),\n-                                      /*vsize_self=*/txiter->GetTxSize(),\n-                                      /*vsize_ancestor=*/txiter->GetSizeWithAncestors(),\n-                                      /*fee_self=*/txiter->GetModifiedFee(),\n-                                      /*fee_ancestor=*/txiter->GetModFeesWithAncestors()});\n+            size_t ancestor_count{0};\n+            size_t ancestor_size{0};\n+            CAmount ancestor_fee{0};\n+            mempool.CalculateAncestorData(*txiter, ancestor_count, ancestor_size, ancestor_fee);\n+            auto [mapiter, success] = m_entries_by_txid.emplace(txiter->GetTx().GetHash(), MiniMinerMempoolEntry(txiter->GetSharedTx(), txiter->GetTxSize(), int64_t(ancestor_size), txiter->GetModifiedFee(), ancestor_fee));",
      "path": "src/node/mini_miner.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "729cec4f6ddb880210b7e0011fff8b0a5f88c933",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "729cec4f6ddb880210b7e0011fff8b0a5f88c933\r\n\r\nmicro-nit: readability of format prior to this commit was better, can it remain a multiline ctor for MiniMinerMempoolEntry with annotations?",
      "created_at": "2025-10-16T14:06:11Z",
      "updated_at": "2025-10-16T15:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436069486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436069486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436127304",
      "pull_request_review_id": 3339641710,
      "id": 2436127304,
      "node_id": "PRRC_kwDOABII586RNFpI",
      "diff_hunk": "@@ -1002,40 +1002,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (auto ancestors{m_subpackage.m_changeset->CalculateMemPoolAncestors(ws.m_tx_handle, maybe_rbf_limits)}) {\n         ws.m_ancestors = std::move(*ancestors);\n     } else {\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.",
      "path": "src/validation.cpp",
      "position": 140,
      "original_position": 4,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "31a045700ee13a6746c4f4de253e64a0b8a61334",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"policy: Remove CPFP carveout rule\" 31a045700ee13a6746c4f4de253e64a0b8a61334\r\n\r\nIn doc/policy/mempool-limits.md,  Exemptions section CPFP carveout is  now stale and should also be deleted",
      "created_at": "2025-10-16T14:16:02Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436127304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436127304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1005,
      "original_line": 1005,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436313337",
      "pull_request_review_id": 3339641710,
      "id": 2436313337,
      "node_id": "PRRC_kwDOABII586RNzD5",
      "diff_hunk": "@@ -21,8 +21,8 @@\n class CFeeRate;\n class uint256;\n \n-/** Maximum number of transactions that can be replaced by RBF (Rule #5). This includes all\n- * mempool conflicts and their descendants. */\n+/** Maximum number of unique clusters that can be affected by an RBF (Rule #5);",
      "path": "src/policy/rbf.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Implement new RBF logic for cluster mempool\" e6315c24326016cfaee5bd046e8b2e4e1088ac6b\r\n\r\nDelete the bip125 rule numbers references.\r\n",
      "created_at": "2025-10-16T14:49:03Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436313337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436313337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436396593",
      "pull_request_review_id": 3339641710,
      "id": 2436396593,
      "node_id": "PRRC_kwDOABII586ROHYx",
      "diff_hunk": "@@ -333,14 +330,9 @@ def test_new_unconfirmed_inputs(self):\n         )[\"tx\"]\n         tx2_hex = tx2.serialize().hex()\n \n-        # This will raise an exception\n-        reject_reason = \"replacement-adds-unconfirmed\"\n-        reject_details = f\"{reject_reason}, replacement {tx2.txid_hex} adds unconfirmed input, idx 1\"\n-        res = self.nodes[0].testmempoolaccept(rawtxs=[tx2_hex])[0]\n-        assert_equal(res[\"reject-reason\"], reject_reason)\n-        assert_equal(res[\"reject-details\"], reject_details)\n-        assert_raises_rpc_error(-26, f\"{reject_details}\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n-\n+        # This will not raise an exception\n+        tx2_id = self.nodes[0].sendrawtransaction(tx2_hex, 0)\n+        assert tx2_id in self.nodes[0].getrawmempool()\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"",
      "path": "test/functional/feature_rbf.py",
      "position": 123,
      "original_position": 57,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Implement new RBF logic for cluster mempool\" e6315c24326016cfaee5bd046e8b2e4e1088ac6b\r\n\r\nnit: replace transactions with clusters here and other places\r\n```suggestion\r\n        \"\"\"Replacements that evict too many clusters are rejected\"\"\"\r\n\r\n```",
      "created_at": "2025-10-16T15:06:06Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436396593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436396593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 338,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436409780",
      "pull_request_review_id": 3339641710,
      "id": 2436409780,
      "node_id": "PRRC_kwDOABII586ROKm0",
      "diff_hunk": "@@ -39,35 +39,6 @@ static inline CTransactionRef make_tx(const std::vector<CTransactionRef>& inputs\n \n // Make two child transactions from parent (which must have at least 2 outputs).\n // Each tx will have the same outputs, using the amounts specified in output_values.",
      "path": "src/test/rbf_tests.cpp",
      "position": 3,
      "original_position": 3,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Implement new RBF logic for cluster mempool\" e6315c24326016cfaee5bd046e8b2e4e1088ac6b\r\n\r\n```suggestion\r\n```",
      "created_at": "2025-10-16T15:10:01Z",
      "updated_at": "2025-10-16T15:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436409780",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436409780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": 40,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436500068",
      "pull_request_review_id": 3345064005,
      "id": 2436500068,
      "node_id": "PRRC_kwDOABII586ROgpk",
      "diff_hunk": "@@ -57,28 +57,35 @@ struct ParentInfo {\n \n std::optional<std::string> PackageTRUCChecks(const CTxMemPool& pool, const CTransactionRef& ptx, int64_t vsize,\n                                            const Package& package,\n-                                           const CTxMemPool::setEntries& mempool_ancestors)\n+                                           const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& mempool_parents)\n {\n     // This function is specialized for these limits, and must be reimplemented if they ever change.\n     static_assert(TRUC_ANCESTOR_LIMIT == 2);\n     static_assert(TRUC_DESCENDANT_LIMIT == 2);\n \n     const auto in_package_parents{FindInPackageParents(package, ptx)};\n \n-    // Now we have all ancestors, so we can start checking TRUC rules.\n+    // Now we have all parents, so we can start checking TRUC rules.\n     if (ptx->version == TRUC_VERSION) {\n         // SingleTRUCChecks should have checked this already.\n         if (!Assume(vsize <= TRUC_MAX_VSIZE)) {\n             return strprintf(\"version=3 tx %s (wtxid=%s) is too big: %u > %u virtual bytes\",\n                              ptx->GetHash().ToString(), ptx->GetWitnessHash().ToString(), vsize, TRUC_MAX_VSIZE);\n         }\n \n-        if (mempool_ancestors.size() + in_package_parents.size() + 1 > TRUC_ANCESTOR_LIMIT) {\n+        if (mempool_parents.size() + in_package_parents.size() + 1 > TRUC_ANCESTOR_LIMIT) {\n             return strprintf(\"tx %s (wtxid=%s) would have too many ancestors\",\n                              ptx->GetHash().ToString(), ptx->GetWitnessHash().ToString());\n         }\n \n-        const bool has_parent{mempool_ancestors.size() + in_package_parents.size() > 0};\n+        if (mempool_parents.size()) {\n+            if (pool.GetNumAncestors(mempool_parents[0]) + in_package_parents.size() + 1 > TRUC_ANCESTOR_LIMIT) {",
      "path": "src/policy/truc_policy.cpp",
      "position": 30,
      "original_position": 30,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "10872f7ec923803f711cd2c3af93a0e17121330e\r\n\r\nYou're still looking up ancestors in TRUC prior to knowing how large the resulting graph would be, but you're only doing it once against a single in-mempool parent, so it should be bounded to 64 results total.\r\n\r\nMaybe leave a comment to that effect or stick that in the commit message?",
      "created_at": "2025-10-16T15:36:55Z",
      "updated_at": "2025-10-16T15:44:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436500068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436500068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436684815",
      "pull_request_review_id": 3342174984,
      "id": 2436684815,
      "node_id": "PRRC_kwDOABII586RPNwP",
      "diff_hunk": "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test cluster mempool accessors and limits\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.mempool_util import (\n+    DEFAULT_CLUSTER_LIMIT,\n+    DEFAULT_CLUSTER_SIZE_LIMIT_KVB,\n+)\n+from test_framework.messages import (\n+    COIN,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            # Mine blocks to clear the mempool and replenish the wallet's confirmed UTXOs.\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.generate(self.nodes[0], 1)\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class MempoolClusterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def add_chain_cluster(self, node, cluster_count, target_vsize=None):\n+        \"\"\"Create a cluster of transactions, with the count specified.\n+        The topology is a chain: the i'th transaction depends on the (i-1)'th transaction.\n+        Optionally provide a target_vsize for each transaction.\n+        \"\"\"\n+        parent_tx = self.wallet.send_self_transfer(from_node=node, confirmed_only=True, target_vsize=target_vsize)\n+        utxo_to_spend = parent_tx[\"new_utxo\"]\n+        all_txids = [parent_tx[\"txid\"]]\n+        all_results = [parent_tx]\n+\n+        while len(all_results) < cluster_count:\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend, target_vsize=target_vsize)\n+            assert next_tx[\"txid\"] in node.getrawmempool()\n+\n+            # Confirm that each transaction is in the same cluster as the first.\n+            assert_equal(node.getmempoolcluster(next_tx['txid']), node.getmempoolcluster(parent_tx['txid']))\n+\n+            # Confirm that the ancestors are what we expect\n+            mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\n+            assert_equal(sorted(mempool_ancestors), sorted(all_txids))\n+\n+            # Confirm that each successive transaction is added as a descendant.\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in all_txids ])\n+\n+            # Update for next iteration\n+            all_results.append(next_tx)\n+            all_txids.append(next_tx[\"txid\"])\n+            utxo_to_spend = next_tx[\"new_utxo\"]\n+\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == cluster_count\n+        return all_results\n+\n+    def check_feerate_diagram(self, node):\n+        \"\"\"Sanity check the feerate diagram.\"\"\"\n+        feeratediagram = node.getmempoolfeeratediagram()\n+        last_val = [0, 0]\n+        for x in feeratediagram:\n+            # The vsize is always positive, except for the first iteration\n+            assert x['vsize'] > 0 or x['fee'] == 0\n+            # Monotonically decreasing fee per vsize\n+            assert_greater_than_or_equal(last_val[0] * x['fee'], last_val[1] * x['vsize'])",
      "path": "test/functional/mempool_cluster.py",
      "position": 82,
      "original_position": 82,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "8f62e9177b9d35beb27ca9749768b99543d4225b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This started failing when I added it to other tests, then I realized it's the wrong direction\r\n```suggestion\r\n            assert_greater_than_or_equal(last_val[1] * x['vsize'], last_val[0] * x['fee'])\r\n```",
      "created_at": "2025-10-16T16:38:57Z",
      "updated_at": "2025-10-17T17:49:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2436684815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2436684815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2437193014",
      "pull_request_review_id": 3342174984,
      "id": 2437193014,
      "node_id": "PRRC_kwDOABII586RRJ02",
      "diff_hunk": "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test cluster mempool accessors and limits\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.mempool_util import (\n+    DEFAULT_CLUSTER_LIMIT,\n+    DEFAULT_CLUSTER_SIZE_LIMIT_KVB,\n+)\n+from test_framework.messages import (\n+    COIN,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            # Mine blocks to clear the mempool and replenish the wallet's confirmed UTXOs.\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.generate(self.nodes[0], 1)\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class MempoolClusterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def add_chain_cluster(self, node, cluster_count, target_vsize=None):\n+        \"\"\"Create a cluster of transactions, with the count specified.\n+        The topology is a chain: the i'th transaction depends on the (i-1)'th transaction.\n+        Optionally provide a target_vsize for each transaction.\n+        \"\"\"\n+        parent_tx = self.wallet.send_self_transfer(from_node=node, confirmed_only=True, target_vsize=target_vsize)\n+        utxo_to_spend = parent_tx[\"new_utxo\"]\n+        all_txids = [parent_tx[\"txid\"]]\n+        all_results = [parent_tx]\n+\n+        while len(all_results) < cluster_count:\n+            next_tx = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_to_spend, target_vsize=target_vsize)\n+            assert next_tx[\"txid\"] in node.getrawmempool()\n+\n+            # Confirm that each transaction is in the same cluster as the first.\n+            assert_equal(node.getmempoolcluster(next_tx['txid']), node.getmempoolcluster(parent_tx['txid']))\n+\n+            # Confirm that the ancestors are what we expect\n+            mempool_ancestors = node.getmempoolancestors(next_tx['txid'])\n+            assert_equal(sorted(mempool_ancestors), sorted(all_txids))\n+\n+            # Confirm that each successive transaction is added as a descendant.\n+            assert all([ next_tx[\"txid\"] in node.getmempooldescendants(x) for x in all_txids ])\n+\n+            # Update for next iteration\n+            all_results.append(next_tx)\n+            all_txids.append(next_tx[\"txid\"])\n+            utxo_to_spend = next_tx[\"new_utxo\"]\n+\n+        assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == cluster_count\n+        return all_results\n+\n+    def check_feerate_diagram(self, node):\n+        \"\"\"Sanity check the feerate diagram.\"\"\"\n+        feeratediagram = node.getmempoolfeeratediagram()\n+        last_val = [0, 0]\n+        for x in feeratediagram:\n+            # The vsize is always positive, except for the first iteration\n+            assert x['vsize'] > 0 or x['fee'] == 0\n+            # Monotonically decreasing fee per vsize\n+            assert_greater_than_or_equal(last_val[0] * x['fee'], last_val[1] * x['vsize'])",
      "path": "test/functional/mempool_cluster.py",
      "position": 82,
      "original_position": 82,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "8f62e9177b9d35beb27ca9749768b99543d4225b",
      "in_reply_to_id": 2436684815,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I ended up writing some feerate diagram tests to check my understanding of how it works. It might be helpful for reviewers and/or if you're interested in taking them:\r\n\r\n<details>\r\n\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/mempool_cluster.py b/test/functional/mempool_cluster.py\r\nindex ee8005a1cd2..c86e6a1b5c0 100755\r\n--- a/test/functional/mempool_cluster.py\r\n+++ b/test/functional/mempool_cluster.py\r\n@@ -7,6 +7,8 @@\r\n from decimal import Decimal\r\n \r\n from test_framework.mempool_util import (\r\n+    assert_equal_feerate_diagram,\r\n+    check_feerate_diagram_monotonically_decreasing,\r\n     DEFAULT_CLUSTER_LIMIT,\r\n     DEFAULT_CLUSTER_SIZE_LIMIT_KVB,\r\n )\r\n@@ -71,17 +73,6 @@ class MempoolClusterTest(BitcoinTestFramework):\r\n         assert node.getmempoolcluster(parent_tx['txid'])['txcount'] == cluster_count\r\n         return all_results\r\n \r\n-    def check_feerate_diagram(self, node):\r\n-        \"\"\"Sanity check the feerate diagram.\"\"\"\r\n-        feeratediagram = node.getmempoolfeeratediagram()\r\n-        last_val = [0, 0]\r\n-        for x in feeratediagram:\r\n-            # The vsize is always positive, except for the first iteration\r\n-            assert x['vsize'] > 0 or x['fee'] == 0\r\n-            # Monotonically decreasing fee per vsize\r\n-            assert_greater_than_or_equal(last_val[0] * x['fee'], last_val[1] * x['vsize'])\r\n-            last_val = [x['vsize'], x['fee']]\r\n-\r\n     def test_limit_enforcement(self, cluster_submitted, target_vsize_per_tx=None):\r\n         \"\"\"\r\n         the cluster may change as a result of these transactions, so cluster_submitted is mutated accordingly\r\n@@ -149,7 +140,7 @@ class MempoolClusterTest(BitcoinTestFramework):\r\n     def test_cluster_count_limit(self, max_cluster_count):\r\n         node = self.nodes[0]\r\n         cluster_submitted = self.add_chain_cluster(node, max_cluster_count)\r\n-        self.check_feerate_diagram(node)\r\n+        check_feerate_diagram_monotonically_decreasing(node.getmempoolfeeratediagram())\r\n         for result in cluster_submitted:\r\n             assert_equal(node.getmempoolcluster(result[\"txid\"])['txcount'], max_cluster_count)\r\n \r\n@@ -292,6 +283,151 @@ class MempoolClusterTest(BitcoinTestFramework):\r\n         assert tx_replacer_sponsor[\"txid\"] in node.getrawmempool()\r\n         assert_equal(node.getmempoolcluster(tx_replacer[\"txid\"])['txcount'], 2)\r\n \r\n+    @cleanup\r\n+    def test_feerate_diagram(self):\r\n+        node = self.nodes[0]\r\n+        self.log.info(\"Test that the feerate diagram shows chunks correctly\")\r\n+\r\n+        # 1 sat/vB as Decimal BTC/kvB\r\n+        feerate_1000sat_kvb = Decimal(1000) / COIN\r\n+\r\n+        def sats_to_btc(sats):\r\n+            \"\"\"Convert int sats to Decimal BTC with 8 decimal places\"\"\"\r\n+            return Decimal(sats) / Decimal(1e8)\r\n+\r\n+        # txA (0sat / 500vB) <- txB (1000sat / 500vB)\r\n+        # Use v3 to allow 0 fee\r\n+        txA = self.wallet.create_self_transfer(confirmed_only=True, fee=0, fee_rate=0, version=3, target_vsize=500)\r\n+        txB = self.wallet.create_self_transfer(utxo_to_spend=txA[\"new_utxo\"], fee=sats_to_btc(1000), version=3, target_vsize=500)\r\n+        result_ab = node.submitpackage([txA[\"hex\"], txB[\"hex\"]])\r\n+        assert_equal(result_ab[\"package_msg\"], \"success\")\r\n+\r\n+        # one cluster, one chunk with feerate 1sat/vB\r\n+        assert_equal(result_ab[\"tx-results\"][txA[\"wtxid\"]][\"fees\"][\"effective-feerate\"], feerate_1000sat_kvb)\r\n+        assert_equal(result_ab[\"tx-results\"][txB[\"wtxid\"]][\"fees\"][\"effective-feerate\"], feerate_1000sat_kvb)\r\n+        assert_equal(node.getmempoolcluster(txA[\"txid\"])['txcount'], 2)\r\n+        expected_feerate_diagram_ab = [\r\n+            [0, 0],\r\n+            [1000, 1000], # [txA, txB] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_ab, node.getmempoolfeeratediagram())\r\n+\r\n+        # txC (0sat / 1000vB) <- txD (2000sat / 1000vB)\r\n+        # Use v3 to allow 0 fee\r\n+        txC = self.wallet.create_self_transfer(confirmed_only=True, fee=0, fee_rate=0, version=3, target_vsize=1000)\r\n+        txD = self.wallet.create_self_transfer(utxo_to_spend=txC[\"new_utxo\"], fee=sats_to_btc(2000), version=3, target_vsize=1000)\r\n+        result_cd = node.submitpackage([txC[\"hex\"], txD[\"hex\"]])\r\n+\r\n+        # one cluster, one chunks with feerate 1sat/vB\r\n+        assert_equal(result_cd[\"package_msg\"], \"success\")\r\n+        assert_equal(result_cd[\"tx-results\"][txC[\"wtxid\"]][\"fees\"][\"effective-feerate\"], feerate_1000sat_kvb)\r\n+        assert_equal(result_cd[\"tx-results\"][txD[\"wtxid\"]][\"fees\"][\"effective-feerate\"], feerate_1000sat_kvb)\r\n+        assert_equal(node.getmempoolcluster(txC[\"txid\"])['txcount'], 2)\r\n+        # Same chunk feerate as [txA, txB], but [txC, txD] has larger vsize.\r\n+        expected_feerate_diagram_cd = [\r\n+            [0, 0],\r\n+            [1000, 1000], # [txA, txB] 1sat/vB\r\n+            [3000, 3000], # [txC, txD] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_cd, node.getmempoolfeeratediagram())\r\n+\r\n+        self.log.info(\"Test that the feerate diagram uses modified fees\")\r\n+        # txE (800sat / 400vB)\r\n+        # 799sat of fees will come from prioritisetransaction\r\n+        txE = self.wallet.create_self_transfer(confirmed_only=True, fee=sats_to_btc(1), target_vsize=400)\r\n+        node.prioritisetransaction(txid=txE[\"txid\"], fee_delta=799)\r\n+        node.sendrawtransaction(txE[\"hex\"])\r\n+        assert_equal(node.getmempoolcluster(txE[\"txid\"])['txcount'], 1)\r\n+        expected_feerate_diagram_e = [\r\n+            [0, 0],\r\n+            [800, 400], # [txE] 2sat/vB\r\n+            [1800, 1400], # [txA, txB] 1sat/vB\r\n+            [3800, 3400], # [txC, txD] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_e, node.getmempoolfeeratediagram())\r\n+\r\n+        # txF (750sat / 500vB) <- txG (6250sat / 500vB)\r\n+        txF = self.wallet.create_self_transfer(confirmed_only=True, fee=sats_to_btc(750), target_vsize=500)\r\n+        txG = self.wallet.create_self_transfer(utxo_to_spend=txF[\"new_utxo\"], fee=sats_to_btc(6250), target_vsize=500)\r\n+\r\n+        # Submit them individually to see txF's chunk feerate change.\r\n+        node.sendrawtransaction(txF[\"hex\"])\r\n+        assert_equal(node.getmempoolcluster(txF[\"txid\"])['txcount'], 1)\r\n+        # txF has a feerate of 1.5sat/vB, so it's in the middle\r\n+        expected_feerate_diagram_f = [\r\n+            [0, 0],\r\n+            [800, 400], # [txE] 2sat/vB\r\n+            [1550, 900], # [txF] 1.5sat/vB\r\n+            [2550, 1900], # [txA, txB] 1sat/vB\r\n+            [4550, 3900], # [txC, txD] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_f, node.getmempoolfeeratediagram())\r\n+\r\n+        # txG bumps txF's chunk feerate to 7sat/vB\r\n+        node.sendrawtransaction(txG[\"hex\"])\r\n+        assert_equal(node.getmempoolcluster(txF[\"txid\"])['txcount'], 2)\r\n+        expected_feerate_diagram_g = [\r\n+            [0, 0],\r\n+            [7000, 1000], # [txF, txG] 7sat/vB\r\n+            [7800, 1400], # [txE] 2sat/vB\r\n+            [8800, 2400], # [txA, txB] 1sat/vB\r\n+            [10800, 4400], # [txC, txD] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_g, node.getmempoolfeeratediagram())\r\n+\r\n+        self.log.info(\"Test that prioritisetransaction on a mempool entry affects the feerate diagram\")\r\n+        # Prioritise txD to make its chunk feerate a little more than 8sat/vB\r\n+        node.prioritisetransaction(txid=txD[\"txid\"], fee_delta=14012)\r\n+        expected_feerate_diagram_d_prio = [\r\n+            [0, 0],\r\n+            [16012, 2000], # [txC, txD] 8.006sat/vB\r\n+            [23012, 3000], # [txF, txG] 7sat/vB\r\n+            [23812, 3400], # [txE] 2sat/vB\r\n+            [24812, 4400], # [txA, txB] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_d_prio, node.getmempoolfeeratediagram())\r\n+\r\n+        # De-prioritise txG to split up the chunk, putting txF behind txE and txG at the very end.\r\n+        node.prioritisetransaction(txid=txG[\"txid\"], fee_delta=-6195)\r\n+        expected_feerate_diagram_g_deprio = [\r\n+            [0, 0],\r\n+            [16012, 2000], # [txC, txD] 8.006sat/vB\r\n+            [16812, 2400], # [txE] 2sat/vB\r\n+            [17562, 2900], # [txF] 1.5sat/vB\r\n+            [18562, 3900], # [txA, txB] 1sat/vB\r\n+            [18617, 4400], # [txG] 0.11sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_g_deprio, node.getmempoolfeeratediagram())\r\n+\r\n+        # txH (30sat / 300vB) Spend txE and txG to merge their clusters, but keeping the chunking the same.\r\n+        txH = self.wallet.create_self_transfer_multi(utxos_to_spend=[txE[\"new_utxo\"], txG[\"new_utxo\"]], fee_per_output=30, target_vsize=300)\r\n+        node.sendrawtransaction(txH[\"hex\"])\r\n+        # The cluster is now EFGH\r\n+        assert_equal(node.getmempoolcluster(txE[\"txid\"])['txcount'], 4)\r\n+        expected_feerate_diagram_h = [\r\n+            [0, 0],\r\n+            [16012, 2000], # [txC, txD] 8.006sat/vB\r\n+            [16812, 2400], # [txE] 2sat/vB\r\n+            [17562, 2900], # [txF] 1.5sat/vB\r\n+            [18562, 3900], # [txA, txB] 1sat/vB\r\n+            [18617, 4400], # [txG] 0.11sat/vB\r\n+            [18647, 4700], # [txH] 0.1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_h, node.getmempoolfeeratediagram())\r\n+\r\n+        # txI (2150sat / 200vB) bumps txF, txG, txH to 1.99sat/vB, combining them into a single chunk\r\n+        txI = self.wallet.create_self_transfer(utxo_to_spend=txH[\"new_utxos\"][0], fee=sats_to_btc(2150), target_vsize=200)\r\n+        node.sendrawtransaction(txI[\"hex\"])\r\n+        # The cluster is now EFGHI\r\n+        assert_equal(node.getmempoolcluster(txI[\"txid\"])['txcount'], 5)\r\n+        expected_feerate_diagram_i = [\r\n+            [0, 0],\r\n+            [16012, 2000], # [txC, txD] 8.006sat/vB\r\n+            [16812, 2400], # [txE] 2sat/vB\r\n+            [19797, 3900], # [txF, txG, txH, txI] 1.99sat/vB\r\n+            [20797, 4900], # [txA, txB] 1sat/vB\r\n+        ]\r\n+        assert_equal_feerate_diagram(expected_feerate_diagram_i, node.getmempoolfeeratediagram())\r\n \r\n     def run_test(self):\r\n         node = self.nodes[0]\r\n@@ -299,6 +435,7 @@ class MempoolClusterTest(BitcoinTestFramework):\r\n         self.generate(self.wallet, 400)\r\n \r\n         self.test_cluster_limit_rbf(DEFAULT_CLUSTER_LIMIT)\r\n+        self.test_feerate_diagram()\r\n \r\n         for cluster_size_limit_kvb in [10, 20, 33, 100, DEFAULT_CLUSTER_SIZE_LIMIT_KVB]:\r\n             self.log.info(f\"-> Resetting node with -limitclustersize={cluster_size_limit_kvb}\")\r\ndiff --git a/test/functional/test_framework/mempool_util.py b/test/functional/test_framework/mempool_util.py\r\nindex 89e2558307e..2bce87bda2f 100644\r\n--- a/test/functional/test_framework/mempool_util.py\r\n+++ b/test/functional/test_framework/mempool_util.py\r\n@@ -10,6 +10,7 @@ from .blocktools import (\r\n )\r\n from .messages import (\r\n     COutPoint,\r\n+    COIN,\r\n     CTransaction,\r\n     CTxIn,\r\n     CTxInWitness,\r\n@@ -22,6 +23,7 @@ from .script import (\r\n from .util import (\r\n     assert_equal,\r\n     assert_greater_than,\r\n+    assert_greater_than_or_equal,\r\n     create_lots_of_big_transactions,\r\n     gen_return_txouts,\r\n )\r\n@@ -131,3 +133,28 @@ def create_large_orphan():\r\n     tx.wit.vtxinwit[0].scriptWitness.stack = [CScript(b'X' * 390000)]\r\n     tx.vout = [CTxOut(100, CScript([OP_RETURN, b'a' * 20]))]\r\n     return tx\r\n+\r\n+def check_feerate_diagram_monotonically_decreasing(feerate_diagram):\r\n+    \"\"\"Sanity check the feerate diagram.\"\"\"\r\n+    last_val = [0, 0]\r\n+    for x in feerate_diagram:\r\n+        # The vsize is always positive, except for the first iteration\r\n+        assert x['vsize'] > 0 or x['fee'] == 0\r\n+        # Monotonically decreasing fee per vsize\r\n+        assert_greater_than_or_equal(last_val[0] * x['vsize'], last_val[1] * x['fee'])\r\n+        last_val = [x['vsize'], x['fee']]\r\n+\r\n+def assert_equal_feerate_diagram(expected, actual):\r\n+    \"\"\"Check that expected and actual are equal, handling Decimal values and giving helpful error messages.\r\n+    expected: list of [fee, vsize] pairs where fee is an integer number of satoshis\r\n+    actual: list of { \"fee\": Decimal, \"vsize\": int } from the getmempoolfeeratediagram RPC\r\n+    Also sanity checks that the actual feerates are monotonically decreasing.\r\n+    \"\"\"\r\n+    assert_equal(len(expected), len(actual))\r\n+    for i in range(len(expected)):\r\n+        # We convert the Decimal to an integer number to avoid Decimal comparisons.\r\n+        # For example, Decimal('0') == Decimal('0E-8') and Decimal('0.0001') == Decimal('0.00010000')\r\n+        assert_equal(expected[i][0], int(actual[i][\"fee\"] * COIN))\r\n+        assert_equal(expected[i][1], actual[i][\"vsize\"])\r\n+\r\n+    check_feerate_diagram_monotonically_decreasing(actual)\r\n\r\n```\r\n</details>",
      "created_at": "2025-10-16T19:14:14Z",
      "updated_at": "2025-10-17T17:51:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2437193014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2437193014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2437862407",
      "pull_request_review_id": 3347518017,
      "id": 2437862407,
      "node_id": "PRRC_kwDOABII586RTtQH",
      "diff_hunk": "@@ -219,224 +205,92 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n \n // Perform transaction-level checks before adding to block:\n // - transaction finality (locktime)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n+bool BlockAssembler::TestPackageTransactions(const std::vector<const CTxMemPoolEntry *>& txs) const\n {\n-    for (CTxMemPool::txiter it : package) {\n-        if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {\n+    for (auto tx : txs) {\n+        if (!IsFinalTx(tx->GetTx(), nHeight, m_lock_time_cutoff)) {\n             return false;\n         }\n     }\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(const CTxMemPoolEntry& entry)\n {\n-    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    nBlockWeight += iter->GetTxWeight();\n+    pblocktemplate->block.vtx.emplace_back(entry.GetSharedTx());\n+    pblocktemplate->vTxFees.push_back(entry.GetFee());\n+    pblocktemplate->vTxSigOpsCost.push_back(entry.GetSigOpCost());\n+    nBlockWeight += entry.GetTxWeight();\n     ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter->GetSharedTx()->GetHash());\n+    nBlockSigOpsCost += entry.GetSigOpCost();\n+    nFees += entry.GetFee();\n \n     if (m_options.print_modified_fee) {\n         LogPrintf(\"fee rate %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n-                  iter->GetTx().GetHash().ToString());\n-    }\n-}\n-\n-/** Add descendants of given transactions to mapModifiedTx with ancestor\n- * state updated assuming given transactions are inBlock. Returns number\n- * of updated descendants. */\n-static int UpdatePackagesForAdded(const CTxMemPool& mempool,\n-                                  const CTxMemPool::setEntries& alreadyAdded,\n-                                  indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n-{\n-    AssertLockHeld(mempool.cs);\n-\n-    int nDescendantsUpdated = 0;\n-    for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        mempool.CalculateDescendants(it, descendants);\n-        // Insert all descendants (not yet in block) into the modified set\n-        for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc)) {\n-                continue;\n-            }\n-            ++nDescendantsUpdated;\n-            modtxiter mit = mapModifiedTx.find(desc);\n-            if (mit == mapModifiedTx.end()) {\n-                CTxMemPoolModifiedEntry modEntry(desc);\n-                mit = mapModifiedTx.insert(modEntry).first;\n-            }\n-            mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n-        }\n+                  CFeeRate(entry.GetModifiedFee(), entry.GetTxSize()).ToString(),\n+                  entry.GetTx().GetHash().ToString());\n     }\n-    return nDescendantsUpdated;\n-}\n-\n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n-{\n-    // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n-// This transaction selection algorithm orders the mempool based\n-// on feerate of a transaction including all unconfirmed ancestors.\n-// Since we don't remove transactions from the mempool as we select them\n-// for block inclusion, we need an alternate method of updating the feerate\n-// of a transaction with its not-yet-selected ancestors as we go.\n-// This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)\n+void BlockAssembler::addChunks()\n {\n-    const auto& mempool{*Assert(m_mempool)};\n-    LOCK(mempool.cs);\n-\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n-    // Keep track of entries that failed inclusion, to avoid duplicate work\n-    std::set<Txid> failedTx;\n-\n-    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n-    CTxMemPool::txiter iter;\n-\n     // Limit the number of attempts to add transactions to the block when it is\n     // close to full; this is just a simple heuristic to finish quickly if the\n     // mempool has a lot of entries.\n     const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n     constexpr int32_t BLOCK_FULL_ENOUGH_WEIGHT_DELTA = 4000;\n     int64_t nConsecutiveFailed = 0;\n \n-    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty()) {\n-        // First try to find a new transaction in mapTx to evaluate.\n-        //\n-        // Skip entries in mapTx that are already in a block or are present\n-        // in mapModifiedTx (which implies that the mapTx ancestor state is\n-        // stale due to ancestor inclusion in the block)\n-        // Also skip transactions that we've already failed to add. This can happen if\n-        // we consider a transaction in mapModifiedTx and it fails: we can then\n-        // potentially consider it again while walking mapTx.  It's currently\n-        // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-        // failedTx and avoid re-evaluation, since the re-evaluation would be using\n-        // cached size/sigops/fee values that are not actually correct.\n-        /** Return true if given transaction from mapTx has already been evaluated,\n-         * or if the transaction's cached data in mapTx is incorrect. */\n-        if (mi != mempool.mapTx.get<ancestor_score>().end()) {\n-            auto it = mempool.mapTx.project<0>(mi);\n-            assert(it != mempool.mapTx.end());\n-            if (mapModifiedTx.count(it) || inBlock.count(it->GetSharedTx()->GetHash()) || failedTx.count(it->GetSharedTx()->GetHash())) {\n-                ++mi;\n-                continue;\n-            }\n-        }\n-\n-        // Now that mi is not stale, determine which transaction to evaluate:\n-        // the next entry from mapTx, or the best from mapModifiedTx?\n-        bool fUsingModified = false;\n-\n-        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n-        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n-            // We're out of entries in mapTx; use the entry from mapModifiedTx\n-            iter = modit->iter;\n-            fUsingModified = true;\n-        } else {\n-            // Try to compare the mapTx entry to the mapModifiedTx entry\n-            iter = mempool.mapTx.project<0>(mi);\n-            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n-                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {\n-                // The best entry in mapModifiedTx has higher score\n-                // than the one from mapTx.\n-                // Switch which transaction (package) to consider\n-                iter = modit->iter;\n-                fUsingModified = true;\n-            } else {\n-                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n-                // Increment mi for the next loop iteration.\n-                ++mi;\n-            }\n-        }\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> selected_transactions;\n+    FeePerWeight chunk_feerate;\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter->GetSharedTx()->GetHash()));\n-\n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n-        CAmount packageFees = iter->GetModFeesWithAncestors();\n-        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n-        if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n-            packageFees = modit->nModFeesWithAncestors;\n-            packageSigOpsCost = modit->nSigOpCostWithAncestors;\n-        }\n+    chunk_feerate = m_mempool->GetBlockBuilderChunk(selected_transactions);\n+    FeePerVSize chunk_feerate_vsize = ToFeePerVSize(chunk_feerate);\n \n-        if (packageFees < m_options.blockMinFeeRate.GetFee(packageSize)) {\n-            // Everything else we might consider has a lower fee rate\n+    std::vector<const CTxMemPoolEntry*> chunk_txs;\n+    // We'll add at most one chunk per iteration below, and chunk count is bounded by\n+    // the cluster size limit.\n+    chunk_txs.reserve(MAX_CLUSTER_COUNT_LIMIT);\n+    while (selected_transactions.size() > 0) {\n+        // Check to see if min fee rate is still respected.\n+        if (chunk_feerate.fee < m_options.blockMinFeeRate.GetFee(chunk_feerate_vsize.size)) {\n+            // Everything else we might consider has a lower feerate\n             return;\n         }\n \n-        if (!TestPackage(packageSize, packageSigOpsCost)) {\n-            if (fUsingModified) {\n-                // Since we always look at the best entry in mapModifiedTx,\n-                // we must erase failed entries so that we can consider the\n-                // next best entry on the next loop iteration\n-                mapModifiedTx.get<ancestor_score>().erase(modit);\n-                failedTx.insert(iter->GetSharedTx()->GetHash());\n-            }\n+        int64_t package_sig_ops = 0;\n+        chunk_txs.clear();\n+        for (const auto& tx : selected_transactions) {\n+            chunk_txs.emplace_back(&tx.get());\n+            package_sig_ops += tx.get().GetSigOpCost();\n+        }\n \n+        // Check to see if this chunk will fit.\n+        if (!TestPackage(chunk_feerate, package_sig_ops) || !TestPackageTransactions(chunk_txs)) {",
      "path": "src/node/miner.cpp",
      "position": 1,
      "original_position": 271,
      "commit_id": "d3f8b6380f165e44fa0aa5e2f2b7b75a28087b38",
      "original_commit_id": "ae1ac5410383e57ed16867580a5fd355a46953de",
      "in_reply_to_id": 2433939831,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in #33591 (d7109669b54d299e84dfe90d2ebf591ff673f51c)",
      "created_at": "2025-10-17T00:15:31Z",
      "updated_at": "2025-10-17T00:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2437862407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2437862407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2437897737",
      "pull_request_review_id": 3347559162,
      "id": 2437897737,
      "node_id": "PRRC_kwDOABII586RT14J",
      "diff_hunk": "@@ -641,6 +641,8 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-test=<option>\", \"Pass a test-only option. Options include : \" + Join(TEST_OPTIONS_DOC, \", \") + \".\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustercount=<n>\", strprintf(\"Do not accept transactions connected to <n> or more existing in-mempool transactions (default: %u, maximum: %u)\", DEFAULT_CLUSTER_LIMIT, MAX_CLUSTER_COUNT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitclustersize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool connected transactions exceeds <n> kilobytes (default: %u)\", DEFAULT_CLUSTER_SIZE_LIMIT_KVB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "2801e80528a3a1c2949a8fda6338882613a673e5",
      "in_reply_to_id": 2432258434,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks -- I'm going to make it \"virtual size with all in-mempool...\" rather than \"virtual kilobytes\", which I think is more legible?  ",
      "created_at": "2025-10-17T00:28:32Z",
      "updated_at": "2025-10-17T00:28:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2437897737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2437897737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440825043",
      "pull_request_review_id": 3351431350,
      "id": 2440825043,
      "node_id": "PRRC_kwDOABII586RfAjT",
      "diff_hunk": "@@ -1002,40 +1002,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (auto ancestors{m_subpackage.m_changeset->CalculateMemPoolAncestors(ws.m_tx_handle, maybe_rbf_limits)}) {\n         ws.m_ancestors = std::move(*ancestors);\n     } else {\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.",
      "path": "src/validation.cpp",
      "position": 140,
      "original_position": 4,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "31a045700ee13a6746c4f4de253e64a0b8a61334",
      "in_reply_to_id": 2436127304,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the whole file can be deleted, as ancestor/descendant limits are now also obsolete.\r\n\r\nI think we can write a new doc for cluster limits in a followup? And a release note (/me ducks)",
      "created_at": "2025-10-17T18:22:49Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2440825043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440825043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1005,
      "original_line": 1005,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440839627",
      "pull_request_review_id": 3351431350,
      "id": 2440839627,
      "node_id": "PRRC_kwDOABII586RfEHL",
      "diff_hunk": "@@ -1274,135 +1274,15 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<Txi\n     return clustered_txs;\n }\n \n-std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n-{\n-    for (const auto& direct_conflict : direct_conflicts) {\n-        // Ancestor and descendant counts are inclusive of the tx itself.\n-        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n-        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n-        const bool has_ancestor{ancestor_count > 1};\n-        const bool has_descendant{descendant_count > 1};\n-        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n-        // The only allowed configurations are:\n-        // 1 ancestor and 0 descendant\n-        // 0 ancestor and 1 descendant\n-        // 0 ancestor and 0 descendant\n-        if (ancestor_count > 2) {\n-            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n-        } else if (descendant_count > 2) {\n-            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n-        } else if (has_ancestor && has_descendant) {\n-            return strprintf(\"%s has both ancestor and descendant, exceeding cluster limit of 2\", txid_string);\n-        }\n-        // Additionally enforce that:\n-        // If we have a child,  we are its only parent.\n-        // If we have a parent, we are its only child.\n-        if (has_descendant) {\n-            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n-            if (our_child->get().GetCountWithAncestors() > 2) {\n-                return strprintf(\"%s is not the only parent of child %s\",\n-                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n-            }\n-        } else if (has_ancestor) {\n-            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n-            if (our_parent->get().GetCountWithDescendants() > 2) {\n-                return strprintf(\"%s is not the only child of parent %s\",\n-                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n-            }\n-        }\n-    }\n-    return std::nullopt;\n-}\n-\n util::Result<std::pair<std::vector<FeeFrac>, std::vector<FeeFrac>>> CTxMemPool::ChangeSet::CalculateChunksForRBF()\n {\n     LOCK(m_pool->cs);\n-    FeeFrac replacement_feerate{0, 0};\n-    for (auto it : m_entry_vec) {\n-        replacement_feerate += {it->GetModifiedFee(), it->GetTxSize()};\n-    }\n \n-    auto err_string{m_pool->CheckConflictTopology(m_to_remove)};",
      "path": "src/txmempool.cpp",
      "position": 1071,
      "original_position": 52,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in e6315c24326016cfaee5bd046e8b2e4e1088ac6b\r\n\r\nNice! We should also remove \"All conflicting clusters (connected components of mempool transactions) must be clusters of up to size 2.\" from the package RBF rules in policy/packages.md",
      "created_at": "2025-10-17T18:26:42Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2440839627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440839627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1305,
      "original_line": 1325,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440892816",
      "pull_request_review_id": 3351431350,
      "id": 2440892816,
      "node_id": "PRRC_kwDOABII586RfRGQ",
      "diff_hunk": "@@ -12,12 +12,7 @@ other consensus and policy rules, each of the following conditions are met:\n \n 1. (Removed)\n \n-2. The replacement transaction only include an unconfirmed input if that input was included in\n-   one of the directly conflicting transactions. An unconfirmed input spends an output from a\n-   currently-unconfirmed transaction.\n-\n-   *Rationale*: When RBF was originally implemented, the mempool did not keep track of\n-   ancestor feerates yet. This rule was suggested as a temporary restriction.\n+2. [REDACTED]",
      "path": "doc/policy/mempool-replacements.md",
      "position": 10,
      "original_position": 10,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "fba5200d59af87db240a1b061f995c63b0ed5ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fba5200d59af87db240a1b061f995c63b0ed5ee8 nit: Could be \"(Removed)\" to be consistent with the other rules we no longer implement?",
      "created_at": "2025-10-17T18:42:53Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2440892816",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440892816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440894335",
      "pull_request_review_id": 3351431350,
      "id": 2440894335,
      "node_id": "PRRC_kwDOABII586RfRd_",
      "diff_hunk": "@@ -79,3 +67,5 @@ This set of rules is similar but distinct from BIP125.\n * Signaling for replace-by-fee is no longer required as of [PR 30592](https://github.com/bitcoin/bitcoin/pull/30592).\n \n * The incremental relay feerate default is 0.1sat/vB ([PR #33106](https://github.com/bitcoin/bitcoin/pull/33106)).\n+\n+* Feerate diagram policy enabled in conjunction with switch to cluster mempool as of **v??.0**.",
      "path": "doc/policy/mempool-replacements.md",
      "position": 49,
      "original_position": 49,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "fba5200d59af87db240a1b061f995c63b0ed5ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Feerate diagram policy enabled in conjunction with switch to cluster mempool as of **v31.0**.\r\n```",
      "created_at": "2025-10-17T18:43:20Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2440894335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440894335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440904975",
      "pull_request_review_id": 3351431350,
      "id": 2440904975,
      "node_id": "PRRC_kwDOABII586RfUEP",
      "diff_hunk": "@@ -38,23 +33,16 @@ other consensus and policy rules, each of the following conditions are met:\n    *Rationale*: Try to prevent DoS attacks where an attacker causes the network to repeatedly relay\n    transactions each paying a tiny additional amount in fees, e.g. just 1 satoshi.\n \n-5. The number of original transactions does not exceed 100. More precisely, the sum of all\n-   directly conflicting transactions' descendant counts (number of transactions inclusive of itself\n-   and its descendants) must not exceed 100; it is possible that this overestimates the true number\n-   of original transactions.\n+5. The number of distinct clusters corresponding to conflicting transactions does not exceed 100.\n \n-   *Rationale*: Try to prevent DoS attacks where an attacker is able to easily occupy and flush out\n-   significant portions of the node's mempool using replacements with multiple directly conflicting\n-   transactions, each with large descendant sets.\n+   *Rationale*: Limit CPU usage required to update the mempool for so many transactions being\n+   removed at once.\n \n-6. The replacement transaction's feerate is greater than the feerates of all directly conflicting\n-   transactions.\n+6. The feerate diagram of the mempool must be strictly improved by the replacement transaction.",
      "path": "doc/policy/mempool-replacements.md",
      "position": 32,
      "original_position": 32,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "fba5200d59af87db240a1b061f995c63b0ed5ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fba5200d59af87db240a1b061f995c63b0ed5ee8 \r\n\r\nHappy for this to go into a followup:\r\n\r\nMaybe worth adding a bit more color for people who don't have any context: A singleton replacing a singleton must pay higher total fees and have a higher feerate (covers vast majority of cases). For more complex cases, see this link to more comprehensive explanation.",
      "created_at": "2025-10-17T18:46:44Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2440904975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440904975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2441070793",
      "pull_request_review_id": 3351431350,
      "id": 2441070793,
      "node_id": "PRRC_kwDOABII586Rf8jJ",
      "diff_hunk": "@@ -419,8 +419,7 @@ def test_no_minrelay_fee(self):\n \n         res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs] + [insufficient_sweep_tx[\"hex\"]])\n         assert_equal(res['package_msg'], \"transaction failed\")\n-        #assert_equal(res['tx-results'][insufficient_sweep_tx[\"wtxid\"]][\"error\"], f\"missing-ephemeral-spends, tx {insufficient_sweep_tx['txid']} (wtxid={insufficient_sweep_tx['wtxid']}) did not spend parent's ephemeral dust\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 1,
      "original_position": 4,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "b9cbca76762 Reviewer note, I originally wanted to point out the extra commented line but then read the commit message and saw it changes back later in e6315c24326",
      "created_at": "2025-10-17T19:47:30Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2441070793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2441070793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 422,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2441096106",
      "pull_request_review_id": 3351431350,
      "id": 2441096106,
      "node_id": "PRRC_kwDOABII586RgCuq",
      "diff_hunk": "@@ -1107,6 +1085,12 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     for (auto it : all_conflicts) {\n         m_subpackage.m_changeset->StageRemoval(it);\n     }\n+\n+    if (const auto err_string{ImprovesFeerateDiagram(*m_subpackage.m_changeset)}) {\n+        // If we can't calculate a feerate, it's because the cluster size limits were hit.\n+        return state.Invalid(TxValidationResult::TX_RECONSIDERABLE, \"replacement-failed\", err_string->second);",
      "path": "src/validation.cpp",
      "position": 260,
      "original_position": 51,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e6315c24326: In both single and package settings, `ImprovesFeerateDiagram` is where cluster size limits are checked for the first time if RBF is happening. The check is cached and many RBF checks are cheaper than `CheckMemPoolPolicyLimits`, so that doesn't seem problematic.\r\n\r\nHowever, this is assigning `TX_RECONSIDERABLE` as the error when cluster limits are exceeded, which will cause net_processing to give it some special treatment (we may redownload and revalidate in some circumstances, which may waste resources), which should only be for errors that can be fixed by adding a child (e.g. to pay for fee requirements or sweep dust). Adding a child definitely won't help with cluster limits.\r\n\r\nAlso, I think the error string should be \"too-large-cluster\" (but that's more of a nit).\r\n\r\nPutting `CheckMemPoolPolicyLimits` before replacement checks would automatically fix this. That feels cleaner to me, so `ImprovesFeerateDiagram` doesn't need to do double duty.\r\n\r\nWe could also examine the `err_string` here and assign `TX_RECONSIDERABLE` if it's actually a feerate diagram error, `TX_MEMPOOL_POLICY` if it's a cluster limit error.",
      "created_at": "2025-10-17T20:00:54Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2441096106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2441096106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1024,
      "original_line": 1091,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2441138984",
      "pull_request_review_id": 3351431350,
      "id": 2441138984,
      "node_id": "PRRC_kwDOABII586RgNMo",
      "diff_hunk": "",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "10872f7ec923803f711cd2c3af93a0e17121330e",
      "original_commit_id": "e6315c24326016cfaee5bd046e8b2e4e1088ac6b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the package RBF logic can have one more tweak in e6315c24326016cfaee5bd046e8b2e4e1088ac6b, which I think @sipa brought up a few weeks ago:\r\n\r\nWe currently have the requirement that the package feerate is higher than the parent feerate because \"we don't want the child to be only paying anti-DoS fees\" but that's more restrictive than it needs to be. It's ok if the child has a lower feerate than the parent and only pays anti-DoS fees, as long as it pays for itself to be above the mempool minimum feerate.\r\n\r\nHere's a branch to do this + a few test cases and a doc update: https://github.com/glozow/bitcoin/commits/2025-10-cluster-package-rbf/\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/doc/policy/packages.md b/doc/policy/packages.md\r\nindex 7522a984435..2e8f5cf8e0d 100644\r\n--- a/doc/policy/packages.md\r\n+++ b/doc/policy/packages.md\r\n@@ -38,17 +38,10 @@ The following rules are enforced for all packages:\r\n \r\n    - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\r\n \r\n-   - All conflicting clusters (connected components of mempool transactions) must be clusters of up to size 2.\r\n+   - The child's individual feerate must meet the mempool minimum feerate.\r\n \r\n-   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced, analogous to\r\n-     regular [replacement rule](./mempool-replacements.md) 5).\r\n-\r\n-   - Replacements must pay more total fees at the incremental relay fee (analogous to\r\n-     regular [replacement rules](./mempool-replacements.md) 3 and 4).\r\n-\r\n-   - Parent feerate must be lower than package feerate.\r\n-\r\n-   - Must improve [feerate diagram](https://delvingbitcoin.org/t/mempool-incentive-compatibility/553). (#29242)\r\n+   - All other [replacement rules](./mempool-replacements.md) are met: no more than 100 distinct clusters, total package\r\n+   fees pay for the package size at the incremental relay feerate, and the feerate diagram improves.\r\n \r\n    - *Rationale*: Basic support for package RBF can be used by wallets\r\n      by making chains of no longer than two, then directly conflicting\r\n@@ -56,18 +49,6 @@ The following rules are enforced for all packages:\r\n      result in more robust fee bumping. More general package RBF may be\r\n      enabled in the future.\r\n \r\n-* When packages are evaluated against ancestor/descendant limits, the union of all transactions'\r\n-  descendants and ancestors is considered. (#21800)\r\n-\r\n-   - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\r\n-     heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\r\n-     the other transactions.\r\n-\r\n-* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled in packaged contexts. (#21800)\r\n-\r\n-   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\r\n-     ancestors and descendants being considered at the same time.\r\n-\r\n The following rules are only enforced for packages to be submitted to the mempool (not\r\n enforced for test accepts):\r\n \r\ndiff --git a/src/test/txpackage_tests.cpp b/src/test/txpackage_tests.cpp\r\nindex 1f167586fe9..fbdaa49f70e 100644\r\n--- a/src/test/txpackage_tests.cpp\r\n+++ b/src/test/txpackage_tests.cpp\r\n@@ -1078,6 +1078,7 @@ BOOST_AUTO_TEST_CASE(package_cpfp_tests)\r\n BOOST_AUTO_TEST_CASE(package_rbf_tests)\r\n {\r\n     mineBlocks(5);\r\n+    MockMempoolMinFee(CFeeRate(1000));\r\n     LOCK(::cs_main);\r\n     size_t expected_pool_size = m_node.mempool->size();\r\n     CKey child_key{GenerateRandomKey()};\r\n@@ -1159,16 +1160,19 @@ BOOST_AUTO_TEST_CASE(package_rbf_tests)\r\n             tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\r\n             child_key, child_spk, coinbase_value - 199 - 1300, /*submit=*/false));\r\n \r\n+        CTransactionRef tx_parent_4 = MakeTransactionRef(CreateValidMempoolTransaction(\r\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\r\n+            coinbaseKey, parent_spk, coinbase_value - 1763, /*submit=*/false));\r\n+        CTransactionRef tx_child_4 = MakeTransactionRef(CreateValidMempoolTransaction(\r\n+            tx_parent_4, /*input_vout=*/0, /*input_height=*/101,\r\n+            child_key, child_spk, coinbase_value - 1763 - 60, /*submit=*/false));\r\n+\r\n         // In all packages, the parents conflict with each other\r\n         BOOST_CHECK(tx_parent_1->GetHash() != tx_parent_2->GetHash() && tx_parent_2->GetHash() != tx_parent_3->GetHash());\r\n \r\n         // 1 parent paying 200sat, 1 child paying 200sat.\r\n         Package package1{tx_parent_1, tx_child_1};\r\n-        // 1 parent paying 800sat, 1 child paying 200sat.\r\n-        Package package2{tx_parent_2, tx_child_2};\r\n-        // 1 parent paying 199sat, 1 child paying 1300sat.\r\n-        Package package3{tx_parent_3, tx_child_3};\r\n-\r\n+        {\r\n         const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, false, std::nullopt);\r\n         if (auto err_1{CheckPackageMempoolAcceptResult(package1, submit1, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n             BOOST_ERROR(err_1.value());\r\n@@ -1177,11 +1181,20 @@ BOOST_AUTO_TEST_CASE(package_rbf_tests)\r\n         auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\r\n         BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n         BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        // Both validated individually.\r\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_wtxids_fee_calculations.value().size(), 1);\r\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_wtxids_fee_calculations.value().front(), tx_parent_1->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_wtxids_fee_calculations.value().size(), 1);\r\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_wtxids_fee_calculations.value().front(), tx_child_1->GetWitnessHash());\r\n+        }\r\n         expected_pool_size += 2;\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n \r\n         // This replacement is actually not package rbf; the parent carries enough fees\r\n         // to replace the entire package on its own.\r\n+        // 1 parent paying 800sat, 1 child paying 200sat.\r\n+        Package package2{tx_parent_2, tx_child_2};\r\n+        {\r\n         const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, false, std::nullopt);\r\n         if (auto err_2{CheckPackageMempoolAcceptResult(package2, submit2, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n             BOOST_ERROR(err_2.value());\r\n@@ -1190,8 +1203,17 @@ BOOST_AUTO_TEST_CASE(package_rbf_tests)\r\n         auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\r\n         BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n         BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        // Both validated individually.\r\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_wtxids_fee_calculations.value().size(), 1);\r\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_wtxids_fee_calculations.value().front(), tx_parent_2->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_wtxids_fee_calculations.value().size(), 1);\r\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_wtxids_fee_calculations.value().front(), tx_child_2->GetWitnessHash());\r\n+        }\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n \r\n+        // 1 parent paying 199sat, 1 child paying 1300sat.\r\n+        Package package3{tx_parent_3, tx_child_3};\r\n+        {\r\n         // Package RBF, in which the replacement transaction's child sponsors the fees to meet RBF feerate rules\r\n         const auto submit3 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package3, false, std::nullopt);\r\n         if (auto err_3{CheckPackageMempoolAcceptResult(package3, submit3, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n@@ -1212,27 +1234,91 @@ BOOST_AUTO_TEST_CASE(package_rbf_tests)\r\n         BOOST_CHECK(it_child_3->second.m_wtxids_fee_calculations.value() == expected_package3_wtxids);\r\n         BOOST_CHECK_EQUAL(it_parent_3->second.m_effective_feerate.value().GetFee(package3_total_vsize), 199 + 1300);\r\n         BOOST_CHECK_EQUAL(it_child_3->second.m_effective_feerate.value().GetFee(package3_total_vsize), 199 + 1300);\r\n-\r\n+        }\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n \r\n         // Finally, check that we can prioritise tx_child_1 to get package1 into the mempool.\r\n         // It should not be possible to resubmit package1 and get it in without prioritisation.\r\n+        // 1 parent paying 200sat, 1 child paying 200sat.\r\n+        Package package4{package1};\r\n+        {\r\n         const auto submit4 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, false, std::nullopt);\r\n-        if (auto err_4{CheckPackageMempoolAcceptResult(package1, submit4, /*expect_valid=*/false, m_node.mempool.get())}) {\r\n+        if (auto err_4{CheckPackageMempoolAcceptResult(package4, submit4, /*expect_valid=*/false, m_node.mempool.get())}) {\r\n             BOOST_ERROR(err_4.value());\r\n         }\r\n+        }\r\n+\r\n+        // 1 parent paying 200sat, 1 child paying 1563sat.\r\n+        Package package5{package1};\r\n         m_node.mempool->PrioritiseTransaction(tx_child_1->GetHash(), 1363);\r\n-        const auto submit5 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, false, std::nullopt);\r\n-        if (auto err_5{CheckPackageMempoolAcceptResult(package1, submit5, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+        {\r\n+        const auto submit5 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package5, false, std::nullopt);\r\n+        if (auto err_5{CheckPackageMempoolAcceptResult(package5, submit5, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n             BOOST_ERROR(err_5.value());\r\n         }\r\n-        it_parent_1 = submit5.m_tx_results.find(tx_parent_1->GetWitnessHash());\r\n-        it_child_1 = submit5.m_tx_results.find(tx_child_1->GetWitnessHash());\r\n-        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n-        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n-        LOCK(m_node.mempool->cs);\r\n-        BOOST_CHECK(m_node.mempool->GetIter(tx_parent_1->GetHash()).has_value());\r\n-        BOOST_CHECK(m_node.mempool->GetIter(tx_child_1->GetHash()).has_value());\r\n+        auto it_parent_5 = submit5.m_tx_results.find(tx_parent_1->GetWitnessHash());\r\n+        auto it_child_5 = submit5.m_tx_results.find(tx_child_1->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_parent_5->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        BOOST_CHECK_EQUAL(it_child_5->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        // Validated together.\r\n+        const auto expected_wtxids_5 = std::vector<Wtxid>({tx_parent_1->GetWitnessHash(), tx_child_1->GetWitnessHash()});\r\n+        BOOST_CHECK(it_parent_5->second.m_wtxids_fee_calculations.value() == expected_wtxids_5);\r\n+        BOOST_CHECK(it_child_5->second.m_wtxids_fee_calculations.value() == expected_wtxids_5);\r\n+        const CFeeRate feerate_parent_child_5(1363 + 200 + 200, GetVirtualTransactionSize(*tx_parent_1) + GetVirtualTransactionSize(*tx_child_1));\r\n+        BOOST_CHECK(it_parent_5->second.m_effective_feerate.value() == feerate_parent_child_5);\r\n+        BOOST_CHECK(it_child_5->second.m_effective_feerate.value() == feerate_parent_child_5);\r\n+        }\r\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n+\r\n+        // Check that the grouping for package RBF does not allow a parent to pay for a child below mempool minimum feerate.\r\n+        // This parent cannot pay for its own replacement, and can get assistance from the child, but the child should\r\n+        // not be eligible for submission at all.\r\n+        // 1 parent paying 1763sat, 1 child paying 60sat.\r\n+        Package package6{tx_parent_4, tx_child_4};\r\n+        {\r\n+        const auto submit6 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package6, false, std::nullopt);\r\n+        if (auto err_6{CheckPackageMempoolAcceptResult(package6, submit6, /*expect_valid=*/false, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_6.value());\r\n+        }\r\n+        auto it_parent_6 = submit6.m_tx_results.find(tx_parent_4->GetWitnessHash());\r\n+        auto it_child_6 = submit6.m_tx_results.find(tx_child_4->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_parent_6->second.m_result_type, MempoolAcceptResult::ResultType::INVALID);\r\n+        BOOST_CHECK_EQUAL(it_child_6->second.m_result_type, MempoolAcceptResult::ResultType::INVALID);\r\n+        // Parent does not meet rule 4\r\n+        BOOST_CHECK_EQUAL(it_parent_6->second.m_state.GetResult(), TxValidationResult::TX_RECONSIDERABLE);\r\n+        BOOST_CHECK_EQUAL(it_parent_6->second.m_state.GetRejectReason(), \"insufficient fee\");\r\n+        // Child needs parent's output\r\n+        BOOST_CHECK_EQUAL(it_child_6->second.m_state.GetResult(), TxValidationResult::TX_MISSING_INPUTS);\r\n+        BOOST_CHECK_EQUAL(it_child_6->second.m_state.GetRejectReason(), \"bad-txns-inputs-missingorspent\");\r\n+        }\r\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n+\r\n+        // It is ok if the child pays fewer fees but subsidizes the parent's replacement cost, as long as the child meets the mempool minimum feerate.\r\n+        // 1 parent paying 1763sat, 1 child paying 160sat.\r\n+        // Even though the parent has a higher feerate, this isn't \"parent pays for child\" because the child meets the mempool minimum feerate.\r\n+        Package package7{package6};\r\n+        m_node.mempool->PrioritiseTransaction(tx_child_4->GetHash(), 100);\r\n+        {\r\n+        const auto submit7 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package7, false, std::nullopt);\r\n+        if (auto err_7{CheckPackageMempoolAcceptResult(package7, submit7, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_7.value());\r\n+        }\r\n+        auto it_parent_7 = submit7.m_tx_results.find(tx_parent_4->GetWitnessHash());\r\n+        auto it_child_7 = submit7.m_tx_results.find(tx_child_4->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_parent_7->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        BOOST_CHECK_EQUAL(it_child_7->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        // The two transactions were validated together.\r\n+        BOOST_CHECK_EQUAL(it_parent_7->second.m_wtxids_fee_calculations.value().size(), 2);\r\n+        BOOST_CHECK_EQUAL(it_parent_7->second.m_wtxids_fee_calculations.value().front(), tx_parent_4->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_parent_7->second.m_wtxids_fee_calculations.value().back(), tx_child_4->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_child_7->second.m_wtxids_fee_calculations.value().size(), 2);\r\n+        BOOST_CHECK_EQUAL(it_child_7->second.m_wtxids_fee_calculations.value().front(), tx_parent_4->GetWitnessHash());\r\n+        BOOST_CHECK_EQUAL(it_child_7->second.m_wtxids_fee_calculations.value().back(), tx_child_4->GetWitnessHash());\r\n+        const CFeeRate feerate_parent_child_7(1763 + 160, GetVirtualTransactionSize(*tx_parent_4) + GetVirtualTransactionSize(*tx_child_4));\r\n+        BOOST_CHECK(it_parent_7->second.m_effective_feerate.value() == feerate_parent_child_7);\r\n+        BOOST_CHECK(it_child_7->second.m_effective_feerate.value() == feerate_parent_child_7);\r\n+        }\r\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n     }\r\n }\r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 1102f2bb051..508892faea2 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1048,8 +1048,23 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\r\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\r\n     }\r\n \r\n-    // If the package has in-mempool parents, we won't consider a package RBF\r\n-    // since it would result in a cluster larger than 2.\r\n+    // Use the child as the transaction for attributing errors because it is presumably sponsoring this package RBF.\r\n+    auto& child_ws = workspaces[1];\r\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\r\n+\r\n+    // Check if this child is eligible to be a sponsor. We allow a child with a lower feerate than that of its\r\n+    // parents (and thus only helping pay for the replacement). However, the child itself must meet the mempool minimum\r\n+    // feerate, otherwise it would sponsor this replacement, potentially using the parents' fees to pay for its entry,\r\n+    // but be immediately evicted next time we trim the mempool.\r\n+    if (!CheckFeeRate(child_ws.m_vsize, child_ws.m_modified_fees, child_ws.m_state)) {\r\n+        // Add the CheckFeeRate error as the debug string.\r\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\r\n+                                     \"package RBF failed: child cannot sponsor because it does not meet mempool minimum feerate\",\r\n+                                     child_ws.m_state.ToString());\r\n+    }\r\n+\r\n+\r\n+    // If the package has in-mempool parents, we won't consider a package RBF for now.\r\n     // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\r\n     // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\r\n     // Specifically we would need to check that the ancestors of the new\r\n@@ -1062,6 +1077,7 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\r\n         }\r\n     }\r\n \r\n+    // The remaining checks are similar to those for a single transaction's replacement(s).\r\n     // Aggregate all conflicts into one set.\r\n     CTxMemPool::setEntries direct_conflict_iters;\r\n     for (Workspace& ws : workspaces) {\r\n@@ -1069,9 +1085,6 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\r\n         direct_conflict_iters.merge(ws.m_iters_conflicting);\r\n     }\r\n \r\n-    const auto& parent_ws = workspaces[0];\r\n-    const auto& child_ws = workspaces[1];\r\n-\r\n     // Don't consider replacements that would cause us to remove a large number of mempool entries.\r\n     // This limit is not increased in a package RBF. Use the aggregate number of transactions.\r\n     CTxMemPool::setEntries all_conflicts;\r\n@@ -1087,8 +1100,6 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\r\n         m_subpackage.m_conflicting_size += it->GetTxSize();\r\n     }\r\n \r\n-    // Use the child as the transaction for attributing errors to.\r\n-    const Txid& child_hash = child_ws.m_ptx->GetHash();\r\n     if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\r\n                                          /*replacement_fees=*/m_subpackage.m_total_modified_fees,\r\n                                          /*replacement_vsize=*/m_subpackage.m_total_vsize,\r\n@@ -1097,16 +1108,6 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\r\n                                      \"package RBF failed: insufficient anti-DoS fees\", *err_string);\r\n     }\r\n \r\n-    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\r\n-    // to be only paying anti-DoS fees\r\n-    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\r\n-    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\r\n-    if (package_feerate <= parent_feerate) {\r\n-        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\r\n-                                     \"package RBF failed: package feerate is less than or equal to parent feerate\",\r\n-                                     strprintf(\"package feerate %s <= parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));\r\n-    }\r\n-\r\n     // Check if it's economically rational to mine this package rather than the ones it replaces.\r\n     // This takes the place of ReplacementChecks()'s PaysMoreThanConflicts() in the package RBF setting.\r\n     if (const auto err_tup{ImprovesFeerateDiagram(*m_subpackage.m_changeset)}) {\r\ndiff --git a/test/functional/mempool_package_rbf.py b/test/functional/mempool_package_rbf.py\r\nindex 759e3cb07d3..c1983cab57b 100755\r\n--- a/test/functional/mempool_package_rbf.py\r\n+++ b/test/functional/mempool_package_rbf.py\r\n@@ -178,14 +178,10 @@ class PackageRBFTest(BitcoinTestFramework):\r\n         package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\r\n         node.submitpackage(package_hex4)\r\n         self.assert_mempool_contents(expected=package_txns4)\r\n-        package_hex5, _package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_CHILD_FEE, child_fee=DEFAULT_CHILD_FEE)\r\n-        pkg_results5 = node.submitpackage(package_hex5)\r\n-        assert 'package RBF failed: package feerate is less than or equal to parent feerate' in pkg_results5[\"package_msg\"]\r\n-        self.assert_mempool_contents(expected=package_txns4)\r\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_CHILD_FEE + DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\r\n+        node.submitpackage(package_hex5)\r\n+        self.assert_mempool_contents(expected=package_txns5)\r\n \r\n-        package_hex5_1, package_txns5_1 = self.create_simple_package(coin, parent_fee=DEFAULT_CHILD_FEE, child_fee=DEFAULT_CHILD_FEE + Decimal(\"0.00000001\"))\r\n-        node.submitpackage(package_hex5_1)\r\n-        self.assert_mempool_contents(expected=package_txns5_1)\r\n         self.generate(node, 1)\r\n \r\n     def test_package_rbf_max_conflicts(self):\r\n\r\n```\r\n</details>",
      "created_at": "2025-10-17T20:17:57Z",
      "updated_at": "2025-10-17T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33629#discussion_r2441138984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2441138984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33629"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    }
  ]
}
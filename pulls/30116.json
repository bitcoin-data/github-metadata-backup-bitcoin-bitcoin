{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116",
    "id": 1871961574,
    "node_id": "PR_kwDOABII585vk93m",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30116",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30116.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30116.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
    "number": 30116,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "p2p: Fill reconciliation sets (Erlay) attempt 2",
    "user": {
      "login": "sr-gi",
      "id": 6665628,
      "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sr-gi",
      "html_url": "https://github.com/sr-gi",
      "followers_url": "https://api.github.com/users/sr-gi/followers",
      "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
      "organizations_url": "https://api.github.com/users/sr-gi/orgs",
      "repos_url": "https://api.github.com/users/sr-gi/repos",
      "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sr-gi/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a re-attempt of https://github.com/bitcoin/bitcoin/pull/28765\r\n\r\nThe new approach differs from the previous in how peers are selected for fanout:\r\n\r\nFor Erlay-enabled peers, fanout targets are chosen for each transaction individually. Once the fanout target is reached, the transaction is reconciled with the rest of our peers. Whether a peer is selected for fanout depends on factors like peer type (inbound or outbound), how the transaction was received (via fanout or reconciliation), and how many of our peers are already aware of it.\r\n\r\nFor outbound peers:\r\nIf the transaction was received through fanout (or we originated it), we set a fanout rate threshold `OUTBOUND_FANOUT_THRESHOLD{4}`. As long as the transaction has been announced to (or received from) fewer than this number of peers, we continue faning out based on the order in which peers' Poisson timers go off.\r\n\r\nIf the transaction was received via reconciliation, we simply reconcile it with the rest of our peers.\r\n\r\nFor inbound peers:\r\nWe select a subset of inbound peers as fanout targets and send all transactions to them within a set time interval. Once the interval ends, the selection is randomly rotated.\r\n\r\nThis approach helps scale the transaction fanout rate for outbound peers by approximating how widely a transaction has already been propagated. For inbound peers, we use a random selection strategy to prevent them from easily exploiting our heuristic.\r\n\r\nYou may notice 398078a8a92725f33ac28107f8fa045e02b2c5bd is not currently being used. It is likely to be dropped and brought back in a follow-up. Currently, we are picking Erlay fanout targets independently of whether we already have other non-erlay peers (which are always fanout). We may want to scale the selection based on non-Erlay connections, but I think that can be addressed on it's own PR.\r\n\r\nErlay Project Tracking: https://github.com/bitcoin/bitcoin/issues/30249",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2024-05-15T20:01:38Z",
    "updated_at": "2025-10-25T06:43:28Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "3786c36e5166fa56abb74f5482f4152053b2de41",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sr-gi:2023-11-erlay2.1",
      "ref": "2023-11-erlay2.1",
      "sha": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 217783888,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3ODM4ODg=",
        "name": "bitcoin",
        "full_name": "sr-gi/bitcoin",
        "owner": {
          "login": "sr-gi",
          "id": 6665628,
          "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sr-gi",
          "html_url": "https://github.com/sr-gi",
          "followers_url": "https://api.github.com/users/sr-gi/followers",
          "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
          "organizations_url": "https://api.github.com/users/sr-gi/orgs",
          "repos_url": "https://api.github.com/users/sr-gi/repos",
          "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sr-gi/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/sr-gi/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sr-gi/bitcoin",
        "archive_url": "https://api.github.com/repos/sr-gi/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sr-gi/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sr-gi/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sr-gi/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sr-gi/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sr-gi/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sr-gi/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sr-gi/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sr-gi/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sr-gi/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sr-gi/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sr-gi/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sr-gi/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sr-gi/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sr-gi/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sr-gi/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sr-gi/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sr-gi/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sr-gi/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sr-gi/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sr-gi/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sr-gi/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sr-gi/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sr-gi/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sr-gi/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sr-gi/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sr-gi/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sr-gi/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sr-gi/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sr-gi/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sr-gi/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sr-gi/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sr-gi/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sr-gi/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sr-gi/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sr-gi/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sr-gi/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sr-gi/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sr-gi/bitcoin/hooks",
        "svn_url": "https://github.com/sr-gi/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 272455,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-14T19:33:59Z",
        "created_at": "2019-10-27T00:01:30Z",
        "updated_at": "2025-07-05T04:35:29Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8405fdb06e8ff3220590bfac84e98547067ec6b7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38071,
        "stargazers_count": 86393,
        "watchers_count": 86393,
        "size": 295240,
        "default_branch": "master",
        "open_issues_count": 741,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-24T20:25:13Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-25T06:40:04Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 905,
    "deletions": 288,
    "changed_files": 8,
    "commits": 11,
    "review_comments": 198,
    "comments": 21
  },
  "events": [
    {
      "event": "commented",
      "id": 2113359903,
      "node_id": "IC_kwDOABII585991Af",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113359903",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:01:40Z",
      "updated_at": "2025-10-25T06:43:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30116.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#28690](https://github.com/bitcoin/bitcoin/pull/28690) (build: Introduce internal kernel library by TheCharlatan)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- “Returns a error if the registering proccess fails for any reason, nullopt otherwise.”  \n  -> “Returns an error if the registering process fails for any reason, nullopt otherwise.” [“a error” should be “an error”; “proccess” is a typo]\n\n- “Skip. We do no reconcile by txid”  \n  -> “Skip. We do not reconcile by txid” [wrong negation word]\n\n- “Non-registered of simply pre-registered peers not count a registered.”  \n  -> “Non-registered or simply pre-registered peers do not count as registered.” [incorrect conjunction and grammar makes the sentence unintelligible]\n\n<sup>drahtbot_id_4_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2113359903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "labeled",
      "id": 12823068376,
      "node_id": "LE_lADOABII586JBASVzwAAAAL8UH7Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823068376",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:01:42Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 2113365602,
      "node_id": "IC_kwDOABII585992Zi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113365602",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:05:34Z",
      "updated_at": "2024-05-15T20:05:34Z",
      "author_association": "MEMBER",
      "body": "I've talked to @naumenkogs about picking this up and he was happy about it. I'm happy to close this if he changes his mind.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2113365602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 12823105634,
      "node_id": "MEE_lADOABII586JBASVzwAAAAL8URBi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823105634",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:05:35Z"
    },
    {
      "event": "subscribed",
      "id": 12823105651,
      "node_id": "SE_lADOABII586JBASVzwAAAAL8URBz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823105651",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:05:35Z"
    },
    {
      "event": "renamed",
      "id": 12823155636,
      "node_id": "RTE_lADOABII586JBASVzwAAAAL8UdO0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823155636",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:10:39Z",
      "rename": {
        "from": "p2p: Fill reconciliation sets (Erlay) attempt: 2",
        "to": "p2p: Fill reconciliation sets (Erlay) attempt 2"
      }
    },
    {
      "event": "reviewed",
      "id": 2059094027,
      "node_id": "PRR_kwDOABII5856u0gL",
      "url": null,
      "actor": null,
      "commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-15T22:03:28Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2059094027",
      "submitted_at": "2024-05-15T22:03:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2059097014,
      "node_id": "PRR_kwDOABII5856u1O2",
      "url": null,
      "actor": null,
      "commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-15T22:06:36Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2059097014",
      "submitted_at": "2024-05-15T22:06:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2060684244,
      "node_id": "PRR_kwDOABII585604vU",
      "url": null,
      "actor": null,
      "commit_id": "3f59bf83a41b7787f9c43c277b5e62f327a72c3e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-16T13:02:43Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2060684244",
      "submitted_at": "2024-05-16T13:02:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12835250927,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAL9CmLv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835250927",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2bb185c7937e8206f48745b9291f18598ed9cf1",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/b2bb185c7937e8206f48745b9291f18598ed9cf1",
      "created_at": "2024-05-16T14:45:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12835330239,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAL9C5i_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835330239",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "047f61c0d4b746510be3e2d1c8a366838ee4d096",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/047f61c0d4b746510be3e2d1c8a366838ee4d096",
      "created_at": "2024-05-16T14:49:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12835446695,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAL9DV-n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835446695",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bc8e7d76a62bf2e4d8a43f47b86d4195f91c8636",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/bc8e7d76a62bf2e4d8a43f47b86d4195f91c8636",
      "created_at": "2024-05-16T14:57:26Z"
    },
    {
      "event": "reviewed",
      "id": 2071518907,
      "node_id": "PRR_kwDOABII5857eN67",
      "url": null,
      "actor": null,
      "commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-05-22T14:51:49Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2071518907",
      "submitted_at": "2024-05-22T14:51:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12987634269,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMGH5Jd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12987634269",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d4b9fc669d5a9d659a96c6437833b30a62f558e0",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/d4b9fc669d5a9d659a96c6437833b30a62f558e0",
      "created_at": "2024-05-30T15:08:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13003134824,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMHDBdo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13003134824",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "935fc826a39ce01f28c6f2710425b32e766027df",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/935fc826a39ce01f28c6f2710425b32e766027df",
      "created_at": "2024-05-31T16:26:41Z"
    },
    {
      "event": "commented",
      "id": 2142608188,
      "node_id": "IC_kwDOABII585_tZs8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2142608188",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:29:34Z",
      "updated_at": "2024-05-31T16:29:34Z",
      "author_association": "MEMBER",
      "body": "I've slightly extended the approach adding 3 commits to deal with short id collisions, which were not taken into account. Some of this may be squashable, I've added them separately for now so they are easy to diff/review.\r\n\r\nThis would be missing an additional commit/amend to deal with https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401014445, which I overlooked when addressing the outstanding comments",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2142608188",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13003204753,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMHDSiR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13003204753",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1a769e511955b4e1d2ee12eb6c15eb81217be3ef",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/1a769e511955b4e1d2ee12eb6c15eb81217be3ef",
      "created_at": "2024-05-31T16:32:45Z"
    },
    {
      "event": "labeled",
      "id": 13003205680,
      "node_id": "LE_lADOABII586JBASVzwAAAAMHDSww",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13003205680",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:32:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2142612746,
      "node_id": "IC_kwDOABII585_ta0K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2142612746",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:32:50Z",
      "updated_at": "2024-05-31T16:32:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25659971810</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2142612746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13022605803,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMINTHr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13022605803",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d821453e2b4cf168979df8b650f33a711e381e14",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/d821453e2b4cf168979df8b650f33a711e381e14",
      "created_at": "2024-06-03T14:50:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13023750405,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIRqkF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13023750405",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5c2e1b9c2f49eca588129d6cf05dce472ec5fc39",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/5c2e1b9c2f49eca588129d6cf05dce472ec5fc39",
      "created_at": "2024-06-03T16:09:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13024748224,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIVeLA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13024748224",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bb62f3cdc59774dcf7315ca615c5ff0ac2efb442",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/bb62f3cdc59774dcf7315ca615c5ff0ac2efb442",
      "created_at": "2024-06-03T17:35:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13024766610,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIViqS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13024766610",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e3b59882e98062c4b213a66376e7da65cb6134d7",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/e3b59882e98062c4b213a66376e7da65cb6134d7",
      "created_at": "2024-06-03T17:37:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13026060825,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIaeoZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13026060825",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7c94dae67a2c8b30087d1555bd4d3544a10e8247",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/7c94dae67a2c8b30087d1555bd4d3544a10e8247",
      "created_at": "2024-06-03T19:41:32Z"
    },
    {
      "event": "unlabeled",
      "id": 13027532810,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMIgGAK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13027532810",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T22:08:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13084081040,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAML3zuQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13084081040",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5bd1a958d264910799fcfd985b12d41ab5f4ee91",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/5bd1a958d264910799fcfd985b12d41ab5f4ee91",
      "created_at": "2024-06-07T18:10:18Z"
    },
    {
      "event": "convert_to_draft",
      "id": 13084155278,
      "node_id": "CTDE_lADOABII586JBASVzwAAAAML4F2O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13084155278",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T18:19:12Z"
    },
    {
      "event": "commented",
      "id": 2155312276,
      "node_id": "IC_kwDOABII586Ad3SU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2155312276",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T18:21:05Z",
      "updated_at": "2024-06-07T18:21:05Z",
      "author_association": "MEMBER",
      "body": "I added two more commits, moving the fanout/reconciling logic to `RelayTransaction` instead of send message, plus dealing with ancestors in mempool, instead of descendants (which seemed to be the wrong approach).\r\n\r\nI'm moving this to draft for now until I clean it a bit, plus get some feedback on the approach",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2155312276",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "labeled",
      "id": 13087363305,
      "node_id": "LE_lADOABII586JBASVzwAAAAMMEVDp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13087363305",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-08T05:17:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2155814489,
      "node_id": "IC_kwDOABII586Afx5Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2155814489",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-08T05:17:04Z",
      "updated_at": "2024-06-08T05:17:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25955152377</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2155814489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13106290356,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMNMh60",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13106290356",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fa5df885c4e6c8fbd2d6a7e73fbe09166fa8fe82",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/fa5df885c4e6c8fbd2d6a7e73fbe09166fa8fe82",
      "created_at": "2024-06-10T19:08:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13106325951,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMNMqm_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13106325951",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "edb007255bb01526e63637f6d5fe5a6b413d1607",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/edb007255bb01526e63637f6d5fe5a6b413d1607",
      "created_at": "2024-06-10T19:12:09Z"
    },
    {
      "event": "reviewed",
      "id": 2110226626,
      "node_id": "PRR_kwDOABII5859x4DC",
      "url": null,
      "actor": null,
      "commit_id": "edb007255bb01526e63637f6d5fe5a6b413d1607",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-06-11T12:09:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2110226626",
      "submitted_at": "2024-06-11T12:09:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13121277143,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMOFszX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13121277143",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "72340852a7682cbcb204d891ea501e0b8f7d05a2",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/72340852a7682cbcb204d891ea501e0b8f7d05a2",
      "created_at": "2024-06-11T18:34:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13122274271,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMOJgPf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13122274271",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "20743e183f271ee910e2662deac5262aa12f14a4",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/20743e183f271ee910e2662deac5262aa12f14a4",
      "created_at": "2024-06-11T20:10:28Z"
    },
    {
      "event": "unlabeled",
      "id": 13125496881,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMOVzAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13125496881",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T03:52:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13151080419,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMP3Y_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13151080419",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f773960eaaa8ebd79b64692b0112ebe9be6f1540",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/f773960eaaa8ebd79b64692b0112ebe9be6f1540",
      "created_at": "2024-06-13T18:14:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13151661694,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMP5m5-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13151661694",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0db9886aacc93f4b40432c86095bd97059df4fcf",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/0db9886aacc93f4b40432c86095bd97059df4fcf",
      "created_at": "2024-06-13T19:07:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13151963458,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMP6wlC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13151963458",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "created_at": "2024-06-13T19:39:09Z"
    },
    {
      "event": "ready_for_review",
      "id": 13152164843,
      "node_id": "RFRE_lADOABII586JBASVzwAAAAMP7hvr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13152164843",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T20:00:25Z"
    },
    {
      "event": "commented",
      "id": 2166667309,
      "node_id": "IC_kwDOABII586BJLgt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2166667309",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T20:01:47Z",
      "updated_at": "2024-06-13T20:01:47Z",
      "author_association": "MEMBER",
      "body": "This should be ready for review now.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2166667309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "reviewed",
      "id": 2116801594,
      "node_id": "PRR_kwDOABII585-K9Q6",
      "url": null,
      "actor": null,
      "commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-06-13T20:02:50Z",
      "author_association": "MEMBER",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2116801594",
      "submitted_at": "2024-06-13T20:02:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13163667629,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMQnaCt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13163667629",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "27d54b950d91123526813d9e072dfebddf478f63",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/27d54b950d91123526813d9e072dfebddf478f63",
      "created_at": "2024-06-14T17:09:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13163687257,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMQne1Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13163687257",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e20e0f314f779905590c4c1df8c032f35c2bec54",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/e20e0f314f779905590c4c1df8c032f35c2bec54",
      "created_at": "2024-06-14T17:12:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13205630580,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMTHe50",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13205630580",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "16e3efd5bbb3bc3fb248a99707cd9cdbe5fecdfc",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/16e3efd5bbb3bc3fb248a99707cd9cdbe5fecdfc",
      "created_at": "2024-06-18T19:30:54Z"
    },
    {
      "event": "labeled",
      "id": 13208301312,
      "node_id": "LE_lADOABII586JBASVzwAAAAMTRq8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13208301312",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T00:42:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13213873919,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMTm7b_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13213873919",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T10:06:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 13232750661,
      "node_id": "LE_lADOABII586JBASVzwAAAAMUu8BF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13232750661",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T18:04:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13233226272,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMUwwIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13233226272",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "created_at": "2024-06-20T18:49:49Z"
    },
    {
      "event": "unlabeled",
      "id": 13233996642,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMUzsNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13233996642",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T20:08:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2208699739,
      "node_id": "IC_kwDOABII586DphVb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2208699739",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:03:59Z",
      "updated_at": "2024-07-04T11:07:18Z",
      "author_association": "MEMBER",
      "body": "Needs rebase (for #29625)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2208699739",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "labeled",
      "id": 13393420581,
      "node_id": "LE_lADOABII586JBASVzwAAAAMeT2El",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13393420581",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:16:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2161914223,
      "node_id": "PRR_kwDOABII586A3DFv",
      "url": null,
      "actor": null,
      "commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-07T19:52:13Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2161914223",
      "submitted_at": "2024-07-07T19:52:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "commented",
      "id": 2214110228,
      "node_id": "IC_kwDOABII586D-KQU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2214110228",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T13:40:47Z",
      "updated_at": "2024-07-08T13:40:47Z",
      "author_association": "MEMBER",
      "body": "> Needs rebase (for #29625)\r\n\r\nCurrently working on some simulations, will rebase soon",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2214110228",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14253630400,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANRlSPA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253630400",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fafeae935ec9b7b951a00cb152078081cab5338a",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/fafeae935ec9b7b951a00cb152078081cab5338a",
      "created_at": "2024-09-13T19:45:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14253779453,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANRl2n9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253779453",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1cfecc324024dbf31a618d6bcefe66145be8062e",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/1cfecc324024dbf31a618d6bcefe66145be8062e",
      "created_at": "2024-09-13T19:59:42Z"
    },
    {
      "event": "labeled",
      "id": 14253780141,
      "node_id": "LE_lADOABII586JBASVzwAAAANRl2yt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253780141",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T19:59:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2350062970,
      "node_id": "IC_kwDOABII586MEx16",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2350062970",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T19:59:47Z",
      "updated_at": "2024-09-13T19:59:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/30127266270</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2350062970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "unlabeled",
      "id": 14253885408,
      "node_id": "UNLE_lADOABII586JBASVzwAAAANRmQfg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253885408",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T20:09:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14254269463,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANRnuQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14254269463",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3879f550d3c513c83ab34df7bc390e33c89e7e72",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/3879f550d3c513c83ab34df7bc390e33c89e7e72",
      "created_at": "2024-09-13T20:43:36Z"
    },
    {
      "event": "unlabeled",
      "id": 14254871836,
      "node_id": "UNLE_lADOABII586JBASVzwAAAANRqBUc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14254871836",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T21:56:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2319731127,
      "node_id": "PRR_kwDOABII586KREm3",
      "url": null,
      "actor": null,
      "commit_id": "3879f550d3c513c83ab34df7bc390e33c89e7e72",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-21T12:47:14Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2319731127",
      "submitted_at": "2024-09-21T12:47:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14490723464,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANftuSI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14490723464",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "912246906f1cbd02f1816b2a1e27fe4f929685ef",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/912246906f1cbd02f1816b2a1e27fe4f929685ef",
      "created_at": "2024-10-02T15:18:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14490804720,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANfuCHw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14490804720",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e6dc728aa2846ff46b39499806fba389617edd5",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/2e6dc728aa2846ff46b39499806fba389617edd5",
      "created_at": "2024-10-02T15:23:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14490857764,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANfuPEk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14490857764",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e5287b65e53002545cb0dcf5a11dbf43093fefe1",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/e5287b65e53002545cb0dcf5a11dbf43093fefe1",
      "created_at": "2024-10-02T15:26:08Z"
    },
    {
      "event": "commented",
      "id": 2388991602,
      "node_id": "IC_kwDOABII586OZR5y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2388991602",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:35:48Z",
      "updated_at": "2024-10-02T15:35:48Z",
      "author_association": "MEMBER",
      "body": "I've added a commit introducing a delayed set to store transactions that are being reconciled, but won't be added to the sketch should it be constructed at this time. This is to mimic the fanout trickling logic where transactions are only made available to peers if they would have been INVed to them. This was already part of @naumenkogs approach, but was scrapped out when reworking when data is added to the reconciliation set in a22b2364f5942266596c78ad306b1e32aa89aa0f",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2388991602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 14491040573,
      "node_id": "MEE_lADOABII586JBASVzwAAAANfu7s9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14491040573",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:35:50Z"
    },
    {
      "event": "subscribed",
      "id": 14491040599,
      "node_id": "SE_lADOABII586JBASVzwAAAANfu7tX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14491040599",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:35:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14494613798,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANf8kEm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14494613798",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9f069ec8ce74068ca7036033e06588f0ddccea8c",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/9f069ec8ce74068ca7036033e06588f0ddccea8c",
      "created_at": "2024-10-02T20:01:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14508130816,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANgwIIA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14508130816",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ad44b831ec741fe52bc46133588f46d6436e2176",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/ad44b831ec741fe52bc46133588f46d6436e2176",
      "created_at": "2024-10-03T17:45:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14509510880,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANg1ZDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14509510880",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d0460f87893f20be1a6d6af0c7cbbc7e68dee3e2",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/d0460f87893f20be1a6d6af0c7cbbc7e68dee3e2",
      "created_at": "2024-10-03T19:38:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14509608301,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANg1w1t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14509608301",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ec869ff9d220f55ea93dba3852a42630d120bb04",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/ec869ff9d220f55ea93dba3852a42630d120bb04",
      "created_at": "2024-10-03T19:48:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14509715522,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANg2LBC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14509715522",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "created_at": "2024-10-03T19:58:34Z"
    },
    {
      "event": "reviewed",
      "id": 2363929991,
      "node_id": "PRR_kwDOABII586M5rWH",
      "url": null,
      "actor": null,
      "commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-12T16:19:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "I fuzzed the `txreconciliation` class with `-DSANITIZERS=fuzzer,undefined,integer` and two related runtime errors occurred:\r\n\r\n<details>\r\n<summary>errors</summary>\r\n\r\n```bash\r\n../../src/node/txreconciliation.cpp:457:46: runtime error: unsigned integer overflow: 1 - 3 cannot be represented in type 'size_t' (aka 'unsigned long')\r\n    #0 0x55ddab3b7d99 in TxReconciliationTracker::Impl::ShouldFanoutTo(transaction_identifier<true> const&, long, unsigned long, unsigned long) erlayfuzzbuild/src/../../src/node/txreconciliation.cpp:457:46\r\n    #1 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7::operator()() const erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:118:46\r\n    #2 0x55ddaa5521c7 in unsigned long CallOneOf<txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8>(FuzzedDataProvider&, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/util.h:42:27\r\n    #3 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:68:9\r\n    #4 0x55ddaa6bf726 in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:591:9\r\n    #5 0x55ddaa6bf726 in LLVMFuzzerTestOneInput erlayfuzzbuild/src/test/fuzz/util/../../../../../src/test/fuzz/fuzz.cpp:209:5\r\n    #6 0x55ddaa04a840 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e6840) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #7 0x55ddaa049f75 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e5f75) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #8 0x55ddaa04b705 in fuzzer::Fuzzer::MutateAndTestOne() (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e7705) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #9 0x55ddaa04c305 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e8305) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #10 0x55ddaa03a52f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19d652f) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #11 0x55ddaa0638e2 in main (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19ff8e2) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #12 0x7fcd32ab6249  (/lib/x86_64-linux-gnu/libc.so.6+0x27249) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #13 0x7fcd32ab6304 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x27304) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #14 0x55ddaa02f920 in _start (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19cb920) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\nSUMMARY: UndefinedBehaviorSanitizer: unsigned-integer-overflow ../../src/node/txreconciliation.cpp:457:46 \r\n\r\n../../src/node/txreconciliation.cpp:401:100: runtime error: 7.92282e+28 is outside the range of representable values of type 'unsigned long'\r\n    #0 0x55ddab3c704a in TxReconciliationTracker::Impl::IsFanoutTarget(transaction_identifier<true> const&, long, bool, double) erlayfuzzbuild/src/../../src/node/txreconciliation.cpp:401:100\r\n    #1 0x55ddab3b7b83 in TxReconciliationTracker::Impl::ShouldFanoutTo(transaction_identifier<true> const&, long, unsigned long, unsigned long) erlayfuzzbuild/src/../../src/node/txreconciliation.cpp:471:16\r\n    #2 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7::operator()() const erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:118:46\r\n    #3 0x55ddaa5521c7 in unsigned long CallOneOf<txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8>(FuzzedDataProvider&, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/util.h:42:27\r\n    #4 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:68:9\r\n    #5 0x55ddaa6bf726 in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:591:9\r\n    #6 0x55ddaa6bf726 in LLVMFuzzerTestOneInput erlayfuzzbuild/src/test/fuzz/util/../../../../../src/test/fuzz/fuzz.cpp:209:5\r\n    #7 0x55ddaa04a840 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e6840) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #8 0x55ddaa049f75 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e5f75) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #9 0x55ddaa04b705 in fuzzer::Fuzzer::MutateAndTestOne() (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e7705) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #10 0x55ddaa04c305 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e8305) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #11 0x55ddaa03a52f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19d652f) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #12 0x55ddaa0638e2 in main (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19ff8e2) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #13 0x7fcd32ab6249  (/lib/x86_64-linux-gnu/libc.so.6+0x27249) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #14 0x7fcd32ab6304 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x27304) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #15 0x55ddaa02f920 in _start (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19cb920) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\nSUMMARY: UndefinedBehaviorSanitizer: float-cast-overflow ../../src/node/txreconciliation.cpp:401:100 \r\n==222068== ERROR: libFuzzer: out-of-memory (used: 4046Mb; limit: 2048Mb)\r\n   To change the out-of-memory limit use -rss_limit_mb=<N>\r\n\r\nMS: 4 ChangeBinInt-ChangeBit-CrossOver-CrossOver-; base unit: 0cbe4c9fe667ead352437139e9ea437783de5c0c\r\n0xad,0xad,0xad,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x37,0xff,0xff,0xff,0xff,0xd2,0xff,0xff,0xff,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0x3b,0xd2,0xd2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xff,0x0,0xff,0xff,0x9,0x0,0x0,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x75,0xff,0xff,0xff,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0xbf,0xff,0x0,0x0,0x0,0x52,0xad,0xad,0xbf,0x6a,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xad,0x1,0x0,0x0,\r\n\\255\\255\\255`\\000\\000\\000\\000\\000\\0007\\377\\377\\377\\377\\322\\377\\377\\377\\322\\322\\322\\322\\322\\322\\322\\322;\\322\\322\\377\\377\\377\\377\\377\\377\\377\\377\\337\\377\\000\\377\\377\\011\\000\\000\\000\\000\\000\\377\\000\\000\\000\\000\\000\\000\\000u\\377\\377\\377\\322\\322\\322\\322\\322\\322\\277\\377\\000\\000\\000R\\255\\255\\277j\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\255\\001\\000\\000\r\nartifact_prefix='./'; Test unit written to ./oom-b217ee9df2670caf13a47abe1623c2f80e6d1f02\r\nBase64: ra2tYAAAAAAAADf/////0v///9LS0tLS0tLSO9LS///////////f/wD//wkAAAAAAP8AAAAAAAAAdf///9LS0tLS0r//AAAAUq2tv2qgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgrQEAAA==\r\nSUMMARY: libFuzzer: out-of-memory\r\n```\r\n\r\n</details>\r\n\r\n[oom-b217ee9df2670caf13a47abe1623c2f80e6d1f02.txt](https://github.com/user-attachments/files/17350703/oom-b217ee9df2670caf13a47abe1623c2f80e6d1f02.txt)\r\n\r\n\r\nLeft a question about it below.\r\n\r\n",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2363929991",
      "submitted_at": "2024-10-12T16:19:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2398229655,
      "node_id": "PRR_kwDOABII586O8hSX",
      "url": null,
      "actor": null,
      "commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-28T09:31:25Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2398229655",
      "submitted_at": "2024-10-28T09:31:25Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14968630280,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN8MywI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968630280",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "010280b771f6767bcb1c7e55c27d843fddf937b6",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/010280b771f6767bcb1c7e55c27d843fddf937b6",
      "created_at": "2024-10-28T19:47:07Z"
    },
    {
      "event": "commented",
      "id": 2442487595,
      "node_id": "IC_kwDOABII586RlWcr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2442487595",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:36Z",
      "updated_at": "2024-10-28T19:50:36Z",
      "author_association": "MEMBER",
      "body": "Squashed @naumenkogs fix on @marcofleon comment in ad95b2c0e21f1e865f967aa9463ef99bc252550a, plus added a commit replacing `IsFanoutTarget` with `GetFanoutTargets` so the cache for fanout can be dropped. After this, the fanout targets are computed just once per transaction",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2442487595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 14968671489,
      "node_id": "MEE_lADOABII586JBASVzwAAAAN8M80B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671489",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "subscribed",
      "id": 14968671507,
      "node_id": "SE_lADOABII586JBASVzwAAAAN8M80T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671507",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "mentioned",
      "id": 14968671528,
      "node_id": "MEE_lADOABII586JBASVzwAAAAN8M80o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671528",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "subscribed",
      "id": 14968671536,
      "node_id": "SE_lADOABII586JBASVzwAAAAN8M80w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671536",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14968804933,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN8NdZF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968804933",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ec8fad1d49e4598ad7c54b7761aad666ddb98f7b",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/ec8fad1d49e4598ad7c54b7761aad666ddb98f7b",
      "created_at": "2024-10-28T20:02:15Z"
    },
    {
      "event": "labeled",
      "id": 14968806001,
      "node_id": "LE_lADOABII586JBASVzwAAAAN8Ndpx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968806001",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T20:02:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2442509003,
      "node_id": "IC_kwDOABII586RlbrL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2442509003",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T20:02:21Z",
      "updated_at": "2024-10-28T20:02:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32180649974</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2442509003",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14969644398,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN8QqVu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14969644398",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "created_at": "2024-10-28T21:16:29Z"
    },
    {
      "event": "unlabeled",
      "id": 14970502830,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAN8T76u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14970502830",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T22:42:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2401362483,
      "node_id": "PRR_kwDOABII586PIeIz",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-29T10:06:19Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401362483",
      "submitted_at": "2024-10-29T10:06:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2401412734,
      "node_id": "PRR_kwDOABII586PIqZ-",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-29T10:17:24Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401412734",
      "submitted_at": "2024-10-29T10:17:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2401436632,
      "node_id": "PRR_kwDOABII586PIwPY",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-29T10:27:47Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401436632",
      "submitted_at": "2024-10-29T10:27:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2401450441,
      "node_id": "PRR_kwDOABII586PIznJ",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-29T10:33:34Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401450441",
      "submitted_at": "2024-10-29T10:33:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "labeled",
      "id": 14990685668,
      "node_id": "LE_lADOABII586JBASVzwAAAAN9g7Xk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14990685668",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T20:05:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14991341560,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN9jbf4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14991341560",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "38e80ffabb9bc74caa52aa2e578cd382595b0548",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/38e80ffabb9bc74caa52aa2e578cd382595b0548",
      "created_at": "2024-10-29T21:06:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15009203941,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN-nkbl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15009203941",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "created_at": "2024-10-30T14:59:04Z"
    },
    {
      "event": "commented",
      "id": 2447434066,
      "node_id": "IC_kwDOABII586R4OFS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2447434066",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T14:59:22Z",
      "updated_at": "2024-10-30T14:59:22Z",
      "author_association": "MEMBER",
      "body": "Rebasing to deal with merge conflicts",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2447434066",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "unlabeled",
      "id": 15012329940,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAN-zfnU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15012329940",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T16:47:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2407676322,
      "node_id": "PRR_kwDOABII586Pgjmi",
      "url": null,
      "actor": null,
      "commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-31T11:17:52Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2407676322",
      "submitted_at": "2024-10-31T11:17:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2409798591,
      "node_id": "PRR_kwDOABII586Popu_",
      "url": null,
      "actor": null,
      "commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-01T09:49:22Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2409798591",
      "submitted_at": "2024-11-01T09:49:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2409819446,
      "node_id": "PRR_kwDOABII586Pou02",
      "url": null,
      "actor": null,
      "commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-01T10:06:24Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2409819446",
      "submitted_at": "2024-11-01T10:06:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15074678099,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOChVVT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15074678099",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3f04ce3539ed52c76e4b46045d6831007c7ce29",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/b3f04ce3539ed52c76e4b46045d6831007c7ce29",
      "created_at": "2024-11-01T20:43:44Z"
    },
    {
      "event": "commented",
      "id": 2452563866,
      "node_id": "IC_kwDOABII586SLyea",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2452563866",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-01T20:44:24Z",
      "updated_at": "2024-11-01T20:44:24Z",
      "author_association": "MEMBER",
      "body": "Rebased to make CI green, plus covered (and masked as resolved) some outstanding comments:\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818553463\r\nhttps://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818555798\r\nhttps://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818577080\r\nhttps://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818641775\r\nhttps://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818703437\r\nhttps://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818706047",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2452563866",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15075296357,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOCjsRl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15075296357",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0babe18ce05f1a49be16c8c228c4c59d5344ef44",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/0babe18ce05f1a49be16c8c228c4c59d5344ef44",
      "created_at": "2024-11-01T22:15:25Z"
    },
    {
      "event": "labeled",
      "id": 15075296929,
      "node_id": "LE_lADOABII586JBASVzwAAAAOCjsah",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15075296929",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-01T22:15:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15075323008,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOCjyyA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15075323008",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fecb8c2cb35425e0959d3680a28dfa61fa17819a",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/fecb8c2cb35425e0959d3680a28dfa61fa17819a",
      "created_at": "2024-11-01T22:21:00Z"
    },
    {
      "event": "unlabeled",
      "id": 15075765947,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAOCle67",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15075765947",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-02T00:04:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2412537999,
      "node_id": "PRR_kwDOABII586PzGiP",
      "url": null,
      "actor": null,
      "commit_id": "fecb8c2cb35425e0959d3680a28dfa61fa17819a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-04T10:21:57Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2412537999",
      "submitted_at": "2024-11-04T10:21:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "mentioned",
      "id": 15103123282,
      "node_id": "MEE_lADOABII586JBASVzwAAAAOEN19S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15103123282",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T12:30:14Z"
    },
    {
      "event": "subscribed",
      "id": 15103123301,
      "node_id": "SE_lADOABII586JBASVzwAAAAOEN19l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15103123301",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T12:30:14Z"
    },
    {
      "event": "comment_deleted",
      "id": 15103139469,
      "node_id": "CDE_lADOABII586JBASVzwAAAAOEN56N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15103139469",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T12:31:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15289964921,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOPWll5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15289964921",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4f8ee9bd19f5bff35df344280a20a058a76f3310",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/4f8ee9bd19f5bff35df344280a20a058a76f3310",
      "created_at": "2024-11-13T22:01:24Z"
    },
    {
      "event": "reviewed",
      "id": 2435223379,
      "node_id": "PRR_kwDOABII586RJo9T",
      "url": null,
      "actor": null,
      "commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-14T07:16:04Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2435223379",
      "submitted_at": "2024-11-14T07:16:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15304065846,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOQMYM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15304065846",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "483edab5e01e7b788771d9ee4c21377a22e1d1ab",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/483edab5e01e7b788771d9ee4c21377a22e1d1ab",
      "created_at": "2024-11-14T20:30:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15304556829,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOQOQEd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15304556829",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "created_at": "2024-11-14T21:22:54Z"
    },
    {
      "event": "reviewed",
      "id": 2460468786,
      "node_id": "PRR_kwDOABII586Sp8Yy",
      "url": null,
      "actor": null,
      "commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-26T11:42:14Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2460468786",
      "submitted_at": "2024-11-26T11:42:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15442361481,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOYb7yJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15442361481",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b69673e281f8b8017537644bff24e0ddfa71baad",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/b69673e281f8b8017537644bff24e0ddfa71baad",
      "created_at": "2024-11-26T21:28:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15442363582,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOYb8S-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15442363582",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "created_at": "2024-11-26T21:28:32Z"
    },
    {
      "event": "reviewed",
      "id": 2464088658,
      "node_id": "PRR_kwDOABII586S3wJS",
      "url": null,
      "actor": null,
      "commit_id": "4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-27T08:00:55Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2464088658",
      "submitted_at": "2024-11-27T08:00:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "labeled",
      "id": 15503867251,
      "node_id": "LE_lADOABII586JBASVzwAAAAOcGj1z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15503867251",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T05:55:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15516446267,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOc2i47",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15516446267",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6b58299b3984d09adf978184764d9d0d5a76c310",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/6b58299b3984d09adf978184764d9d0d5a76c310",
      "created_at": "2024-12-03T21:45:51Z"
    },
    {
      "event": "unlabeled",
      "id": 15516962577,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAOc4g8R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15516962577",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T22:43:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15529306928,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOdnmsw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15529306928",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80967fa532495394cbefe25a0468ce9cb5b59325",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/80967fa532495394cbefe25a0468ce9cb5b59325",
      "created_at": "2024-12-04T16:29:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15548637056,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOexV-A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15548637056",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fb17d8731a5f296e74274aa8d8c6ed4e5989ac0",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/7fb17d8731a5f296e74274aa8d8c6ed4e5989ac0",
      "created_at": "2024-12-05T18:37:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15548970301,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOeynU9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15548970301",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "created_at": "2024-12-05T19:04:28Z"
    },
    {
      "event": "labeled",
      "id": 15548974133,
      "node_id": "LE_lADOABII586JBASVzwAAAAOeyoQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15548974133",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-05T19:04:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2521189980,
      "node_id": "IC_kwDOABII586WRk5c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2521189980",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-05T19:04:49Z",
      "updated_at": "2024-12-05T19:04:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33993403729</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2521189980",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "unlabeled",
      "id": 15549709591,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAOe1b0X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15549709591",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-05T20:14:41Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2492934888,
      "node_id": "PRR_kwDOABII586Ulyro",
      "url": null,
      "actor": null,
      "commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-10T17:32:13Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2492934888",
      "submitted_at": "2024-12-10T17:32:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2519443536,
      "node_id": "PRR_kwDOABII586WK6hQ",
      "url": null,
      "actor": null,
      "commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-12-22T01:05:46Z",
      "author_association": "NONE",
      "body": "Reviewed up to commit 478137aa (“p2p: Add PeerManager method to count…”).\r\nJust minor comments so far and I still have to answer back comments on #28765.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2519443536",
      "submitted_at": "2024-12-22T01:05:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2526935458,
      "node_id": "PRR_kwDOABII586Wnfmi",
      "url": null,
      "actor": null,
      "commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-01-01T22:58:40Z",
      "author_association": "NONE",
      "body": "Reviewed up to commit feb8c98db (“p2p: Add transactions to reconciliation sets…”).",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2526935458",
      "submitted_at": "2025-01-01T22:58:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15801676316,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOt2nIc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15801676316",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "18a9e749c5213f6d559f9f29a30a15926c114c9a",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/18a9e749c5213f6d559f9f29a30a15926c114c9a",
      "created_at": "2025-01-02T19:29:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15802184916,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAOt4jTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15802184916",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b1b85105be6a7df6bd44b745981a5743ec4149be",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/b1b85105be6a7df6bd44b745981a5743ec4149be",
      "created_at": "2025-01-02T20:44:32Z"
    },
    {
      "event": "reviewed",
      "id": 2528318804,
      "node_id": "PRR_kwDOABII586WsxVU",
      "url": null,
      "actor": null,
      "commit_id": "b1b85105be6a7df6bd44b745981a5743ec4149be",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-01-02T22:56:41Z",
      "author_association": "NONE",
      "body": "Reviewed up to 4b9f83a (“p2p: Makes transactions available…”), all the code changes.\r\nI’ll check the test coverage.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2528318804",
      "submitted_at": "2025-01-02T22:56:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16980385277,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP0HB39",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16980385277",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0237a4917f78274a4f49e7a5dd73faf708cbdd70",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/0237a4917f78274a4f49e7a5dd73faf708cbdd70",
      "created_at": "2025-03-25T18:55:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16981413459,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP0K85T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16981413459",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "113c9181c0adbf207318f521b40e4ef04c7cb7bd",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/113c9181c0adbf207318f521b40e4ef04c7cb7bd",
      "created_at": "2025-03-25T20:20:04Z"
    },
    {
      "event": "commented",
      "id": 2752457523,
      "node_id": "IC_kwDOABII586kDysz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2752457523",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T20:36:46Z",
      "updated_at": "2025-03-25T20:36:46Z",
      "author_association": "MEMBER",
      "body": "Updated the approach based on the results from the simulations @naumenkogs and I have been running.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2752457523",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 16981604381,
      "node_id": "MEE_lADOABII586JBASVzwAAAAP0Lrgd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16981604381",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T20:36:47Z"
    },
    {
      "event": "subscribed",
      "id": 16981604398,
      "node_id": "SE_lADOABII586JBASVzwAAAAP0Lrgu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16981604398",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T20:36:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17077907148,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP57C7M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17077907148",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "caf171f9b3ceffb88c3c56030d76d3ab28589077",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/caf171f9b3ceffb88c3c56030d76d3ab28589077",
      "created_at": "2025-04-01T15:40:49Z"
    },
    {
      "event": "labeled",
      "id": 17080051456,
      "node_id": "LE_lADOABII586JBASVzwAAAAP6DOcA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17080051456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T17:54:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17101073423,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP7TawP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17101073423",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d4ed41d76b48e9bc73d262eb9052abfbf9cc2291",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/d4ed41d76b48e9bc73d262eb9052abfbf9cc2291",
      "created_at": "2025-04-02T21:07:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17101119470,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP7Tl_u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17101119470",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "64c32bb454ae8e4a89b61bd237ad4f6a81308622",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/64c32bb454ae8e4a89b61bd237ad4f6a81308622",
      "created_at": "2025-04-02T21:11:28Z"
    },
    {
      "event": "unlabeled",
      "id": 17102424178,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAP7Ykhy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17102424178",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-02T23:43:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17120366839,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP8dBD3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17120366839",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b78b4dc2321f7b1be06a7c87f65969983d44bb97",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/b78b4dc2321f7b1be06a7c87f65969983d44bb97",
      "created_at": "2025-04-03T20:46:06Z"
    },
    {
      "event": "labeled",
      "id": 17121560460,
      "node_id": "LE_lADOABII586JBASVzwAAAAP8hkeM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17121560460",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T22:50:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17172632619,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAP_kZQr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17172632619",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6093d9f3795558e589e096ce31437bd896fade70",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/6093d9f3795558e589e096ce31437bd896fade70",
      "created_at": "2025-04-08T14:49:13Z"
    },
    {
      "event": "unlabeled",
      "id": 17174559608,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAP_rvt4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17174559608",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-08T16:43:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17272133212,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAQFf9Zc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17272133212",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "08f6d4514a36a45ef63ae366ccfc63160c34b1a3",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/08f6d4514a36a45ef63ae366ccfc63160c34b1a3",
      "created_at": "2025-04-15T15:47:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18218107285,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAQ94kGV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18218107285",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "96f72e0772a2bbbdbb75b4e1d07d9b9f42d7476f",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/96f72e0772a2bbbdbb75b4e1d07d9b9f42d7476f",
      "created_at": "2025-06-18T21:01:39Z"
    },
    {
      "event": "labeled",
      "id": 18592802914,
      "node_id": "LE_lADOABII586JBASVzwAAAARUN6hi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18592802914",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-11T19:23:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18667747227,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARYrzeb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18667747227",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67d580a2395098a6cafbc44446a1e04668dc93d8",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/67d580a2395098a6cafbc44446a1e04668dc93d8",
      "created_at": "2025-07-16T21:08:45Z"
    },
    {
      "event": "unlabeled",
      "id": 18668534012,
      "node_id": "UNLE_lADOABII586JBASVzwAAAARYuzj8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18668534012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-16T22:22:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18782461723,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARfhZ8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18782461723",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d4d2467b07438b550c97ccd073929f42fc92cfde",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/d4d2467b07438b550c97ccd073929f42fc92cfde",
      "created_at": "2025-07-23T20:48:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18782741580,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARfieRM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18782741580",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e76fd7066ae8f6eb73de993ab950a6b59cd65cf7",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/e76fd7066ae8f6eb73de993ab950a6b59cd65cf7",
      "created_at": "2025-07-23T21:08:50Z"
    },
    {
      "event": "labeled",
      "id": 18782748927,
      "node_id": "LE_lADOABII586JBASVzwAAAARfigD_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18782748927",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T21:09:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3110180922,
      "node_id": "IC_kwDOABII5865YZg6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3110180922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T21:09:25Z",
      "updated_at": "2025-07-23T21:09:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `CentOS, depends, gui`: https://github.com/bitcoin/bitcoin/runs/46596699781</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by an assertion failure in txreconciliation.cpp during the \"AddToSetTest\" case, leading to test subprocess abortion.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-3110180922",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18796408121,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARgWm05",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18796408121",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0e9bd619761e6615dc4616c4f34aea7e8cec83db",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/0e9bd619761e6615dc4616c4f34aea7e8cec83db",
      "created_at": "2025-07-24T14:16:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18797244056,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARgZy6Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18797244056",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b85d216559428c00624fe03e875e822b826001ac",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/b85d216559428c00624fe03e875e822b826001ac",
      "created_at": "2025-07-24T14:57:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18798417949,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARgeRgd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18798417949",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c063b87e7b7a53799f5fac94c1c89cfd419adda2",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/c063b87e7b7a53799f5fac94c1c89cfd419adda2",
      "created_at": "2025-07-24T15:55:14Z"
    },
    {
      "event": "unlabeled",
      "id": 18805385483,
      "node_id": "UNLE_lADOABII586JBASVzwAAAARg42kL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18805385483",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T00:01:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18858250552,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkChE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18858250552",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "af17291b9733c26aab50adf53446e7c0ba9742e9",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/af17291b9733c26aab50adf53446e7c0ba9742e9",
      "created_at": "2025-07-28T14:54:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18858323439,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkCy3v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18858323439",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5c5d165ef8f1dfdcf87f9026e610f425ed1fe598",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/5c5d165ef8f1dfdcf87f9026e610f425ed1fe598",
      "created_at": "2025-07-28T14:58:16Z"
    },
    {
      "event": "labeled",
      "id": 18858326103,
      "node_id": "LE_lADOABII586JBASVzwAAAARkCzhX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18858326103",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T14:58:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3127631647,
      "node_id": "IC_kwDOABII5866a98f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3127631647",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T14:58:26Z",
      "updated_at": "2025-07-28T14:58:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `ARM, unit tests, no functional tests`: https://github.com/bitcoin/bitcoin/runs/46868137690</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by unresolved version control conflict markers remaining in the source code file.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-3127631647",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18862165576,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkRc5I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862165576",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3d6daffa55e2483b37cacd005feb5c747dd4b9f5",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/3d6daffa55e2483b37cacd005feb5c747dd4b9f5",
      "created_at": "2025-07-28T18:15:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18862186592,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkRiBg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862186592",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2cf0ea2df3a9887129e610b09fe51196db3edd88",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/2cf0ea2df3a9887129e610b09fe51196db3edd88",
      "created_at": "2025-07-28T18:17:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18862528703,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkS1i_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862528703",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d650d67951f266a9e9aa76f167e80352411d2999",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/d650d67951f266a9e9aa76f167e80352411d2999",
      "created_at": "2025-07-28T18:40:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18862559843,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkS9Jj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862559843",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "31c575c5a6570764a71ddb4ca7f06de30b0a7f31",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/31c575c5a6570764a71ddb4ca7f06de30b0a7f31",
      "created_at": "2025-07-28T18:42:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18863368967,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkWCsH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18863368967",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1a58a43b9eb6aa88a90242a78d1ef4b36f287528",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/1a58a43b9eb6aa88a90242a78d1ef4b36f287528",
      "created_at": "2025-07-28T19:34:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18863573406,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARkW0me",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18863573406",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e7d426a83455e592d855f7f5039f8b38ac4f7eb0",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/e7d426a83455e592d855f7f5039f8b38ac4f7eb0",
      "created_at": "2025-07-28T19:48:19Z"
    },
    {
      "event": "unlabeled",
      "id": 18866412225,
      "node_id": "UNLE_lADOABII586JBASVzwAAAARkhprB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18866412225",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-29T00:52:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18905741998,
      "node_id": "LE_lADOABII586JBASVzwAAAARm3rqu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18905741998",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T18:49:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18946981709,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAARpU_9N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18946981709",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3eab0e84b600397b98c1f214daabe5c8d004c4bb",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/3eab0e84b600397b98c1f214daabe5c8d004c4bb",
      "created_at": "2025-08-01T21:09:54Z"
    },
    {
      "event": "commented",
      "id": 3145843454,
      "node_id": "IC_kwDOABII5867gcL-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3145843454",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T21:40:44Z",
      "updated_at": "2025-08-01T21:40:44Z",
      "author_association": "MEMBER",
      "body": "I've rebased to account for the recent `GenTxid` changes by @marcofleon.\r\n\r\nI've also decided to clean the design while I was at it, to make things easier to follow and test. As part of this, the file structure has been changed from two files (`txreconciliation.h` and `txreconciliation.cpp`) to three (`txreconciliation.h`, `txreconciliation_impl.h` and `txreconciliation_impl.cpp`), following a similar approach as `txdownloadman`.\r\n\r\nThe code is split as follows:\r\n\r\n- `txreconciliation.h` contains the general reconciliation stuff, and everything that is not implementation dependent (coming from BIP 330). This also includes the `TxReconciliationState`, which was previously defined in `txreconciliation.cpp` and was therefore not exposed, nor tested.\r\n- `txreconciliation_impl.h` defined the `TransactionReconciliationTracker` using PIMPL\r\n- `txreconciliation_impl.cpp` has the actual implementation of the tracker",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-3145843454",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 18947337903,
      "node_id": "MEE_lADOABII586JBASVzwAAAARpWW6v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18947337903",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T21:40:46Z"
    },
    {
      "event": "subscribed",
      "id": 18947337946,
      "node_id": "SE_lADOABII586JBASVzwAAAARpWW7a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18947337946",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T21:40:46Z"
    },
    {
      "event": "unlabeled",
      "id": 18947982689,
      "node_id": "UNLE_lADOABII586JBASVzwAAAARpY0Vh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18947982689",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T23:05:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19143250236,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAR1BtE8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19143250236",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e4c66facbe696258592d9c537d38d3df96d85f3",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/7e4c66facbe696258592d9c537d38d3df96d85f3",
      "created_at": "2025-08-13T18:32:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19164216307,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAR2Rrvz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19164216307",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ac0a2a07c31a854d9a9d4a1baf61358522fcaa87",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/ac0a2a07c31a854d9a9d4a1baf61358522fcaa87",
      "created_at": "2025-08-14T17:47:53Z"
    },
    {
      "event": "labeled",
      "id": 19164280357,
      "node_id": "LE_lADOABII586JBASVzwAAAAR2R7Yl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19164280357",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T17:51:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3189373615,
      "node_id": "IC_kwDOABII586-Gfqv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3189373615",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T17:51:27Z",
      "updated_at": "2025-08-14T17:51:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `CentOS, depends, gui`: https://github.com/bitcoin/bitcoin/runs/48113343987</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by compilation errors due to incompatible usage of transaction identifier types and constructor calls.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-3189373615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQxMzg4YzBmOWFhYmJmZDM2OGExMTZlODg3OTcyMjJmMGE3N2ZkMDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1388c0f9aabbfd368a116e88797222f0a77fd01",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d1388c0f9aabbfd368a116e88797222f0a77fd01",
      "tree": {
        "sha": "b5ddafdf1e9abda8d0d4a4eaaa81bb853c13aeb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5ddafdf1e9abda8d0d4a4eaaa81bb853c13aeb2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b1a7c3e8dd78d97fbf47c2d056d043b05969176",
          "sha": "9b1a7c3e8dd78d97fbf47c2d056d043b05969176",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1a7c3e8dd78d97fbf47c2d056d043b05969176"
        }
      ],
      "message": "refactor: redesigns txreconciliation file split and namespace\n\nSplits the txreconciliation logic in three files instead of two, allowing the\nTxreconciliationState to be properly tested, instead of being internal to\ntxreconciliation.cpp.\n\nAlso defines includes everything in the node namespace, instead of being part\nof an anonymous one.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T17:56:10Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-07-30T21:51:56Z"
      },
      "sha": "d1388c0f9aabbfd368a116e88797222f0a77fd01"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE1YWQwNTQ4NDI2ODRlZDNlOThhODc3ZjM5NTg1YjRmMjIxM2IxY2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5ad054842684ed3e98a877f39585b4f2213b1ce",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a5ad054842684ed3e98a877f39585b4f2213b1ce",
      "tree": {
        "sha": "db6afecbaccc07c44ca30f2971b4bb3c118921c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db6afecbaccc07c44ca30f2971b4bb3c118921c7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1388c0f9aabbfd368a116e88797222f0a77fd01",
          "sha": "d1388c0f9aabbfd368a116e88797222f0a77fd01",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d1388c0f9aabbfd368a116e88797222f0a77fd01"
        }
      ],
      "message": "refactor: remove legacy comments\n\nThese comments became irrelevant in one of the previous code changes.\nThey simply don't make sense anymore.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T17:56:10Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2023-12-05T08:20:48Z"
      },
      "sha": "a5ad054842684ed3e98a877f39585b4f2213b1ce"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIxOGU4ZmQyZWFhMDVkNzg3MzNiOTRkNDY3MjkyNjU0ZWNhY2Y3N2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/218e8fd2eaa05d78733b94d467292654ecacf77b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/218e8fd2eaa05d78733b94d467292654ecacf77b",
      "tree": {
        "sha": "8bd2a4a24e6d141609bb58b264fcbd6138e400a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bd2a4a24e6d141609bb58b264fcbd6138e400a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5ad054842684ed3e98a877f39585b4f2213b1ce",
          "sha": "a5ad054842684ed3e98a877f39585b4f2213b1ce",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a5ad054842684ed3e98a877f39585b4f2213b1ce"
        }
      ],
      "message": "refactor: Defines generic error to be used in several reconciliation methods",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T17:56:10Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-07T16:34:20Z"
      },
      "sha": "218e8fd2eaa05d78733b94d467292654ecacf77b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA5MzE1OTE2ZjlkMjY2ZWE3ZDY1N2JhZTBiOWE0MjEzM2JiM2JjNjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09315916f9d266ea7d657bae0b9a42133bb3bc66",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/09315916f9d266ea7d657bae0b9a42133bb3bc66",
      "tree": {
        "sha": "4ef91f7694e4bec005a7932873cb57d8e962bc87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ef91f7694e4bec005a7932873cb57d8e962bc87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/218e8fd2eaa05d78733b94d467292654ecacf77b",
          "sha": "218e8fd2eaa05d78733b94d467292654ecacf77b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/218e8fd2eaa05d78733b94d467292654ecacf77b"
        }
      ],
      "message": "refactor: use LogDebug instead of LogPrintLevel in txreconciliation",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T17:56:10Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-07-28T14:51:57Z"
      },
      "sha": "09315916f9d266ea7d657bae0b9a42133bb3bc66"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI2MmUyMWZmYzRiZmQ4OGViMmEzZmZiZWIwYzRiNzMzMzgzMWQwNjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/262e21ffc4bfd88eb2a3ffbeb0c4b7333831d060",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/262e21ffc4bfd88eb2a3ffbeb0c4b7333831d060",
      "tree": {
        "sha": "542c750ce12239ee35b4db8ecdf14df0e09ccb5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/542c750ce12239ee35b4db8ecdf14df0e09ccb5d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09315916f9d266ea7d657bae0b9a42133bb3bc66",
          "sha": "09315916f9d266ea7d657bae0b9a42133bb3bc66",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/09315916f9d266ea7d657bae0b9a42133bb3bc66"
        }
      ],
      "message": "p2p: Functions to add/remove wtxids to tx reconciliation sets\n\nThey will be used later on.\n\nCo-authored-by: Gleb Naumenko <naumenko.gs@gmail.com>",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:36:11Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2022-10-08T06:25:01Z"
      },
      "sha": "262e21ffc4bfd88eb2a3ffbeb0c4b7333831d060"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI4Y2E1MGMyM2QwZmJhMzU0NGNhYmViZDQ5MzVmNWVkM2RkNGZhZGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8ca50c23d0fba3544cabebd4935f5ed3dd4fade",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ca50c23d0fba3544cabebd4935f5ed3dd4fade",
      "tree": {
        "sha": "d661af2ce3587f5b8d9e32987faada53b22a2e28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d661af2ce3587f5b8d9e32987faada53b22a2e28"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/262e21ffc4bfd88eb2a3ffbeb0c4b7333831d060",
          "sha": "262e21ffc4bfd88eb2a3ffbeb0c4b7333831d060",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/262e21ffc4bfd88eb2a3ffbeb0c4b7333831d060"
        }
      ],
      "message": "p2p: Add PeerManager method to count the amount of inbound/outbounds fanout peers",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:36:13Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-06-07T17:54:52Z"
      },
      "sha": "b8ca50c23d0fba3544cabebd4935f5ed3dd4fade"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBhODA2OTdmZDFlYzBlNzA2YjJjMDFiMmMwOWQ4NWFmNjFmNmY1MWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a80697fd1ec0e706b2c01b2c09d85af61f6f51b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a80697fd1ec0e706b2c01b2c09d85af61f6f51b",
      "tree": {
        "sha": "a0da03ad29deff0bd01c3f86ffd5a62ee31c8253",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0da03ad29deff0bd01c3f86ffd5a62ee31c8253"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8ca50c23d0fba3544cabebd4935f5ed3dd4fade",
          "sha": "b8ca50c23d0fba3544cabebd4935f5ed3dd4fade",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ca50c23d0fba3544cabebd4935f5ed3dd4fade"
        }
      ],
      "message": "p2p: Cache inbound reconciling peers count\n\nIt helps to avoid recomputing every time we consider\na transaction for fanout/reconciliation.\n\nCo-authored-by: Gleb Naumenko <naumenko.gs@gmail.com>",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:36:13Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-01-17T09:28:02Z"
      },
      "sha": "0a80697fd1ec0e706b2c01b2c09d85af61f6f51b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk4NGYxYzUxMDBlMDZmYjEzYTZlOWM2OWFkZWVhOTRmZDU2ODE3YjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/984f1c5100e06fb13a6e9c69adeea94fd56817b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/984f1c5100e06fb13a6e9c69adeea94fd56817b5",
      "tree": {
        "sha": "c1c48296c5315c4bd2f305cb37f86f697603712d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1c48296c5315c4bd2f305cb37f86f697603712d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a80697fd1ec0e706b2c01b2c09d85af61f6f51b",
          "sha": "0a80697fd1ec0e706b2c01b2c09d85af61f6f51b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a80697fd1ec0e706b2c01b2c09d85af61f6f51b"
        }
      ],
      "message": "p2p: Add method to decided whether to fanout or reconcile a transactions\n\nFanout or reconciliation is decided on a transaction basis, based on the following criteria:\n\nIf the peer is inbound, we fanout to a pre-defined subset of peers (which is rotated periodically).\nIf the peer is outbound, we will reconcile the transaction if we received it via reconciliation, or\ndefer the decision to relay time otherwise. At relay time, we will fanout to outbounds until a threshold is met\n(selecting peers in the order their timers go off) and reconcile with the rest.\n\nWith this approach we try to fanout when we estimate to be early in the propagation of the transaction,\nand reconcile otherwise. Notice these heuristics don't apply to inbound peers, since they would be easily\nexploitable. For inbounds we just aim for a target subset picked at random.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:36:13Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-03-25T15:56:27Z"
      },
      "sha": "984f1c5100e06fb13a6e9c69adeea94fd56817b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4ZWY3MDE3MzNiMDIzOTk1MTg2ZTg3YTE3MWFhMmZkOTY5OGIyMmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18ef701733b023995186e87a171aa2fd9698b22e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18ef701733b023995186e87a171aa2fd9698b22e",
      "tree": {
        "sha": "6b61a4d23e8470caba3ee172727ba067e41cffab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b61a4d23e8470caba3ee172727ba067e41cffab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/984f1c5100e06fb13a6e9c69adeea94fd56817b5",
          "sha": "984f1c5100e06fb13a6e9c69adeea94fd56817b5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/984f1c5100e06fb13a6e9c69adeea94fd56817b5"
        }
      ],
      "message": "p2p: Add transactions to reconciliation sets\n\nTransactions eligible for reconciliation are added to the reconciliation sets. For the remaining txs, low-fanout is used.\n\nCo-authored-by: Gleb Naumenko <naumenko.gs@gmail.com>",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:42:24Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-03-14T19:40:53Z"
      },
      "sha": "18ef701733b023995186e87a171aa2fd9698b22e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ0ZWRmNzRkZDFlMTViMjFkMWRiYWNmYmVkMTY5NjRlNWExM2RmODQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44edf74dd1e15b21d1dbacfbed16964e5a13df84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/44edf74dd1e15b21d1dbacfbed16964e5a13df84",
      "tree": {
        "sha": "5c977f23cff480785b72597fd502f49addf90f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c977f23cff480785b72597fd502f49addf90f3d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18ef701733b023995186e87a171aa2fd9698b22e",
          "sha": "18ef701733b023995186e87a171aa2fd9698b22e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18ef701733b023995186e87a171aa2fd9698b22e"
        }
      ],
      "message": "p2p: Add helper to compute reconciliation tx short ids and a cache of short ids to wtxids",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:42:25Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-05-30T16:03:58Z"
      },
      "sha": "44edf74dd1e15b21d1dbacfbed16964e5a13df84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU1ZjEyNDRkNjg5NDNiMmYwZDU2YTAzZmUzZjM2MGJhZjhhMTYwMmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "tree": {
        "sha": "8b43ff81483130b4bae86b688d51ac6235c95ca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b43ff81483130b4bae86b688d51ac6235c95ca3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44edf74dd1e15b21d1dbacfbed16964e5a13df84",
          "sha": "44edf74dd1e15b21d1dbacfbed16964e5a13df84",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/44edf74dd1e15b21d1dbacfbed16964e5a13df84"
        }
      ],
      "message": "p2p: Deal with shortid collisions for reconciliation sets\n\nIf a transaction to be added to a peer's recon set has a shot id collisions (a previously\nadded wtxid maps to the same short id), both transaction should be fanout, given\nour peer may have added the opposite transaction to our recon set, and these two\ntransaction won't be reconciled.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-08-14T18:42:25Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2025-03-14T20:11:42Z"
      },
      "sha": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19165388702,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAR2WJ-e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19165388702",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "created_at": "2025-08-14T19:06:29Z"
    },
    {
      "event": "unlabeled",
      "id": 19168607412,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAR2iby0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19168607412",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T23:43:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602301949",
      "pull_request_review_id": 2059094027,
      "id": 1602301949,
      "node_id": "PRRC_kwDOABII585fgS_9",
      "diff_hunk": "@@ -74,6 +74,20 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether the transaction appears in the set.\n+     */\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid);\n+\n+    /**\n+     * Before Step 2, we might want to remove a wtxid from the reconciliation set, for example if",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 12,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"p2p: Functions to add/remove wtxids to tx reconciliation sets\" 7c047d30cb0eadc8a424cb01de2fcd0978e22206: What is the step 2? This comment seems a little confuse because I couldn't find it as I see for Step 1.",
      "created_at": "2024-05-15T22:03:28Z",
      "updated_at": "2024-05-15T22:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1602301949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602301949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602304001",
      "pull_request_review_id": 2059097014,
      "id": 1602304001,
      "node_id": "PRRC_kwDOABII585fgTgB",
      "diff_hunk": "@@ -115,10 +138,55 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        // The caller currently keeps track of the per-peer transaction announcements, so it\n+        // should not attempt to add same tx to the set twice. However, if that happens, we will\n+        // simply ignore it.\n+        if (peer_state->m_local_set.insert(wtxid).second) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                        \"Now the set contains %i transactions.\\n\",\n+                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+        }\n+        return true;\n+    }\n+\n+    bool TryRemovingFromSet(NodeId peer_id, const Wtxid& wtxid_to_remove) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 95,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"p2p: Functions to add/remove wtxids to tx reconciliation sets\" https://github.com/bitcoin/bitcoin/commit/7c047d30cb0eadc8a424cb01de2fcd0978e22206: Perhaps adding a log when removing from set?",
      "created_at": "2024-05-15T22:06:35Z",
      "updated_at": "2024-05-15T22:06:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1602304001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602304001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603304486",
      "pull_request_review_id": 2060684244,
      "id": 1603304486,
      "node_id": "PRRC_kwDOABII585fkHwm",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>",
      "path": "src/bench/txreconciliation.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "3f59bf83a41b7787f9c43c277b5e62f327a72c3e",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"add bench for ShouldFanoutTo\" 3f59bf83a41b7787f9c43c277b5e62f327a72c3e: `net.h` include seems unnecessary.",
      "created_at": "2024-05-16T13:02:43Z",
      "updated_at": "2024-05-16T13:02:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603304486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603304486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603383480",
      "pull_request_review_id": 2060823307,
      "id": 1603383480,
      "node_id": "PRRC_kwDOABII585fkbC4",
      "diff_hunk": "@@ -74,6 +74,20 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether the transaction appears in the set.\n+     */\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid);\n+\n+    /**\n+     * Before Step 2, we might want to remove a wtxid from the reconciliation set, for example if",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 12,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": 1602301949,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this refers to the steps listed at the beginning of the file. Not all of them are covered yet. This PR leaves this right before 2 AFAICT",
      "created_at": "2024-05-16T13:44:15Z",
      "updated_at": "2024-05-16T14:57:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603383480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603383480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603525767",
      "pull_request_review_id": 2060823307,
      "id": 1603525767,
      "node_id": "PRRC_kwDOABII585fk9yH",
      "diff_hunk": "@@ -115,10 +138,55 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        // The caller currently keeps track of the per-peer transaction announcements, so it\n+        // should not attempt to add same tx to the set twice. However, if that happens, we will\n+        // simply ignore it.\n+        if (peer_state->m_local_set.insert(wtxid).second) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                        \"Now the set contains %i transactions.\\n\",\n+                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+        }\n+        return true;\n+    }\n+\n+    bool TryRemovingFromSet(NodeId peer_id, const Wtxid& wtxid_to_remove) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 95,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": 1602304001,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated to track both successful and unsuccessful deletions (in debug log, to prevent unnecessarily spamming the logs)",
      "created_at": "2024-05-16T14:51:59Z",
      "updated_at": "2024-05-16T15:04:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603525767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603525767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603536079",
      "pull_request_review_id": 2060823307,
      "id": 1603536079,
      "node_id": "PRRC_kwDOABII585flATP",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>",
      "path": "src/bench/txreconciliation.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "3f59bf83a41b7787f9c43c277b5e62f327a72c3e",
      "in_reply_to_id": 1603304486,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed",
      "created_at": "2024-05-16T14:57:37Z",
      "updated_at": "2024-05-16T14:57:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603536079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603536079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603548036",
      "pull_request_review_id": 2061100687,
      "id": 1603548036,
      "node_id": "PRRC_kwDOABII585flDOE",
      "diff_hunk": "@@ -74,6 +74,20 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether the transaction appears in the set.\n+     */\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid);\n+\n+    /**\n+     * Before Step 2, we might want to remove a wtxid from the reconciliation set, for example if",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 12,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": 1602301949,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My bad, missed that. Thanks.",
      "created_at": "2024-05-16T15:02:42Z",
      "updated_at": "2024-05-16T15:02:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603548036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603548036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610144238",
      "pull_request_review_id": 2071518907,
      "id": 1610144238,
      "node_id": "PRRC_kwDOABII585f-Nnu",
      "diff_hunk": "@@ -81,4 +81,60 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid2));\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    for (size_t i = 0; i < 3000; ++i)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"p2p: Functions to add/remove wtxids to tx reconciliation sets\" 2e29e9beeebcadfc7afc56a28791456d40551bed: I think `MAX_SET_SIZE` could be in `txreconciliation.h` then we can use it in the tests.\r\n\r\n```diff\r\n-/**\r\n- * Maximum number of wtxids stored in a peer local set, bounded to protect the memory use of\r\n- * reconciliation sets and short ids mappings, and CPU used for sketch computation.\r\n- */\r\n-constexpr size_t MAX_SET_SIZE = 3000;\r\n \r\n /**\r\n  * Maximum number of transactions for which we store assigned fanout targets.\r\ndiff --git a/src/node/txreconciliation.h b/src/node/txreconciliation.h\r\nindex c2cdf9875f..648b6369c0 100644\r\n--- a/src/node/txreconciliation.h\r\n+++ b/src/node/txreconciliation.h\r\n@@ -14,6 +14,12 @@\r\n /** Supported transaction reconciliation protocol version */\r\n static constexpr uint32_t TXRECONCILIATION_VERSION{1};\r\n \r\n+/**\r\n+ * Maximum number of wtxids stored in a peer local set, bounded to protect the memory use of\r\n+ * reconciliation sets and short ids mappings, and CPU used for sketch computation.\r\n+ */\r\n+constexpr size_t MAX_SET_SIZE = 3000;\r\n+\r\n enum class ReconciliationRegisterResult {\r\n     NOT_FOUND,\r\n     SUCCESS,\r\ndiff --git a/src/test/txreconciliation_tests.cpp b/src/test/txreconciliation_tests.cpp\r\nindex a0071e4388..8befe0d36e 100644\r\n--- a/src/test/txreconciliation_tests.cpp\r\n+++ b/src/test/txreconciliation_tests.cpp\r\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(AddToSetTest)\r\n     BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\r\n     BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\r\n \r\n-    for (size_t i = 0; i < 3000; ++i)\r\n+    for (size_t i = 0; i < MAX_SET_SIZE; ++i)\r\n         BOOST_REQUIRE(tracker.AddToSet(peer_id1, Wtxid::FromUint256(frc.rand256())));\r\n     BOOST_REQUIRE(!tracker.AddToSet(peer_id1, Wtxid::FromUint256(frc.rand256())));\r\n```",
      "created_at": "2024-05-22T14:51:48Z",
      "updated_at": "2024-05-22T14:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1610144238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610144238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610159034",
      "pull_request_review_id": 2071544864,
      "id": 1610159034,
      "node_id": "PRRC_kwDOABII585f-RO6",
      "diff_hunk": "@@ -81,4 +81,60 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid2));\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    for (size_t i = 0; i < 3000; ++i)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "in_reply_to_id": 1610144238,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've been talking to @sipa about this recently and I think the limit may not be necessary if the approach for when to compute the reconciliation sets is changed. I'm may get rid of it, but if not, I'll take this",
      "created_at": "2024-05-22T14:59:17Z",
      "updated_at": "2024-05-22T14:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1610159034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610159034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620894922",
      "pull_request_review_id": 2088540718,
      "id": 1620894922,
      "node_id": "PRRC_kwDOABII585gnOTK",
      "diff_hunk": "@@ -81,4 +81,60 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid2));\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    for (size_t i = 0; i < 3000; ++i)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "in_reply_to_id": 1610144238,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ended up taking this, since the limit will be kept in the end.\r\n\r\nThanks!",
      "created_at": "2024-05-30T15:05:35Z",
      "updated_at": "2024-05-30T15:05:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1620894922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620894922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634736227",
      "pull_request_review_id": 2110226626,
      "id": 1634736227,
      "node_id": "PRRC_kwDOABII585hcBhj",
      "diff_hunk": "@@ -390,7 +425,13 @@ TxReconciliationTracker::~TxReconciliationTracker() = default;\n \n uint64_t TxReconciliationTracker::PreRegisterPeer(NodeId peer_id)\n {\n-    return m_impl->PreRegisterPeer(peer_id);\n+    const uint64_t local_salt{GetRand(UINT64_MAX)};\n+    return m_impl->PreRegisterPeer(peer_id, local_salt);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 85,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "f71575cf4321443219ffede00ad598600f558994",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is the intention behind moving salt calculation out of PreRegisterPeer ? Now if PreRegisterPeer is not executed due to lock being held we are doing meaningless computation .",
      "created_at": "2024-06-11T11:58:34Z",
      "updated_at": "2024-06-11T12:09:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1634736227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634736227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": 393,
      "start_side": "LEFT",
      "line": null,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635224220",
      "pull_request_review_id": 2111021554,
      "id": 1635224220,
      "node_id": "PRRC_kwDOABII585hd4qc",
      "diff_hunk": "@@ -390,7 +425,13 @@ TxReconciliationTracker::~TxReconciliationTracker() = default;\n \n uint64_t TxReconciliationTracker::PreRegisterPeer(NodeId peer_id)\n {\n-    return m_impl->PreRegisterPeer(peer_id);\n+    const uint64_t local_salt{GetRand(UINT64_MAX)};\n+    return m_impl->PreRegisterPeer(peer_id, local_salt);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 85,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "f71575cf4321443219ffede00ad598600f558994",
      "in_reply_to_id": 1634736227,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The purpose is for `PreRegisterPeer` to be callable with a fixed salt (via `PreRegisterPeerWithSalt`), so collisions can be tested. This is just moving it out of the `PImpl`, the effects on the external caller should be the same",
      "created_at": "2024-06-11T17:09:10Z",
      "updated_at": "2024-06-11T17:09:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1635224220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635224220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": 393,
      "start_side": "LEFT",
      "line": null,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638809793",
      "pull_request_review_id": 2116801594,
      "id": 1638809793,
      "node_id": "PRRC_kwDOABII585hrkDB",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is pending. Happy get get feedback on how many to pick (either hardcoded or based on what)",
      "created_at": "2024-06-13T20:02:50Z",
      "updated_at": "2024-06-13T20:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1638809793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638809793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641905080",
      "pull_request_review_id": 2121497666,
      "id": 1641905080,
      "node_id": "PRRC_kwDOABII585h3Xu4",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The number of parents per peer should mostly be in the range of (0-2/3) , This should include a significant numbers of peers to reconcile with . A constant number might not be ideal considering if the array returned is smaller than that constant number , we might be reconciling with non-existent peers .",
      "created_at": "2024-06-16T15:26:10Z",
      "updated_at": "2024-06-16T15:26:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1641905080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641905080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1644607912",
      "pull_request_review_id": 2125758247,
      "id": 1644607912,
      "node_id": "PRRC_kwDOABII585iBrmo",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm curious to know where do you get that parent count range from 🤔 ",
      "created_at": "2024-06-18T14:53:39Z",
      "updated_at": "2024-06-18T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1644607912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1644607912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1646641952",
      "pull_request_review_id": 2128966341,
      "id": 1646641952,
      "node_id": "PRRC_kwDOABII585iJcMg",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I got some data for about 4100+ transactions from a source (cant be sure of the credibility) for bitcoin transactions in a mempool and i ran a script to count the avg. parents which came to approx. 1.6 . Another way I thought of this is I got the avg. number of [inputs per transaction](https://transactionfee.info/charts/inputs-per-transaction/) . For 2023-2024 the average is somewhat between 2-3 . If we make a tree like dependency structure for transaction considering the transactions which had their inputs as utxo's , the probability of having higher ancestories diminishes rapidly since any  transaction missing will eliminate the ancestory above it . Considering the mempool are in general highly updated , ancestories beyond grandparent transactions are not very likely to be there . So if I consider this , there are supposed to be 6 ancestors for a transactions on an average and we can expect 2-3 range to have a significant number of transactions.    ",
      "created_at": "2024-06-19T19:57:20Z",
      "updated_at": "2024-06-19T19:57:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1646641952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1646641952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1647708122",
      "pull_request_review_id": 2130655678,
      "id": 1647708122,
      "node_id": "PRRC_kwDOABII585iNgfa",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Notice this does not apply to all transactions though. The exception here applies to transactions that have some ancestors **in the mempool**. In that case, we need to be consistent with the way we share this set of transactions, otherwise, it could be the case that the parents are reconciled at time T and the children are fanout at T-n, potentially making the children orphan.\r\n\r\nUnder these conditions, we are checking how many peers have the ancestors in their reconciliation sets, and selecting a subset of the ones with fewer of them, so the amount of transactions to be fanout is the smallest possible.",
      "created_at": "2024-06-20T14:46:06Z",
      "updated_at": "2024-06-20T14:46:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1647708122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1647708122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1667753973",
      "pull_request_review_id": 2161914223,
      "id": 1667753973,
      "node_id": "PRRC_kwDOABII585jZ-f1",
      "diff_hunk": "@@ -81,4 +87,193 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    // If the peer is not registered, adding to the set fails\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    auto r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // As long as the peer is registered, adding a new wtxid to the set should work\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // If the peer is dropped, adding wtxids to its set should fail\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    r = tracker.AddToSet(peer_id0, wtxid2);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    // As long as the peer is registered and the transaction is not in the set, and there is no short id\n+    // collision, adding should work\n+    for (size_t i = 0; i < MAX_RECONSET_SIZE; ++i) {\n+        wtxid = Wtxid::FromUint256(frc.rand256());\n+        Wtxid collision;\n+        uint32_t short_id;\n+\n+        if (!tracker.HasCollision(peer_id1, wtxid, collision, short_id)) {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(r.m_succeeded);\n+            BOOST_REQUIRE(!r.m_conflict.has_value());\n+        } else {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(!r.m_succeeded);\n+            BOOST_REQUIRE_EQUAL(r.m_conflict.value(), collision);\n+        }\n+    }\n+\n+    // Trying to add the same item twice will just bypass\n+    r = tracker.AddToSet(peer_id1, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(AddToSetCollisionTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // Register the peer with a predefined salt so we can force the collision\n+    tracker.PreRegisterPeerWithSalt(peer_id0, 2);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    // Precompute collision\n+    Wtxid wtxid{Wtxid::FromUint256(uint256S(\"c70d778bccef36a81aed8da0b819d2bd28bd8653e56a5d40903df1a0ade0b876\"))};\n+    Wtxid collision{Wtxid::FromUint256(uint256S(\"ae52a6ecb8733fba1f7af6022a8b9dd327d7825054229fafcad7e03c38ae2a50\"))};\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    auto r = tracker.AddToSet(peer_id0, collision);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE_EQUAL(r.m_conflict.value(), wtxid);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TryRemovingFromSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    BOOST_REQUIRE(tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    tracker.ForgetPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                            /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    // Initialize a new instance with a new hasher to be used later on.\n+    CSipHasher hasher2(0x0706050403020100ULL, 0x4F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker2(TXRECONCILIATION_VERSION, hasher2);\n+    int inbound_peers = 36;\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        tracker2.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+        BOOST_REQUIRE_EQUAL(tracker2.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    // For 35 peers we will choose 3.5 flooding targets, which means that it's either 3 or 4 with\n+    // 50% chance. Make sure the randomness actually works by checking against a different hasher.\n+    size_t total_fanouted1 = 0;\n+    size_t total_fanouted2 = 0;\n+    auto wtxid = Wtxid::FromUint256(uint256(1)); // determinism is required.\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        total_fanouted1 += tracker.ShouldFanoutTo(wtxid, i,\n+                                                  /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+        total_fanouted2 += tracker2.ShouldFanoutTo(wtxid, i,\n+                                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+    }\n+    BOOST_CHECK_EQUAL(total_fanouted1, 3);\n+    BOOST_CHECK_EQUAL(total_fanouted2, 4);\n+",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 1,
      "original_position": 216,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nfor (int i = 1; i < inbound_peers; ++i) {\r\n        // create 4000 random wtxids so that FANOUT_TARGETS_PER_TX_CACHE_SIZE is breached\r\n        for (int j = 0; j < 4000; ++j) {\r\n            tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), i,\r\n                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\r\n        }\r\n    }\r\n```\r\n\r\nincreases coverage of the units tests to check the cache_size check in ```IsFanoutTarget``` . ",
      "created_at": "2024-07-07T19:52:13Z",
      "updated_at": "2024-07-07T19:52:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1667753973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1667753973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759454074",
      "pull_request_review_id": 2304056408,
      "id": 1759454074,
      "node_id": "PRRC_kwDOABII585o3yN6",
      "diff_hunk": "@@ -81,4 +87,193 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    // If the peer is not registered, adding to the set fails\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    auto r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // As long as the peer is registered, adding a new wtxid to the set should work\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // If the peer is dropped, adding wtxids to its set should fail\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    r = tracker.AddToSet(peer_id0, wtxid2);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    // As long as the peer is registered and the transaction is not in the set, and there is no short id\n+    // collision, adding should work\n+    for (size_t i = 0; i < MAX_RECONSET_SIZE; ++i) {\n+        wtxid = Wtxid::FromUint256(frc.rand256());\n+        Wtxid collision;\n+        uint32_t short_id;\n+\n+        if (!tracker.HasCollision(peer_id1, wtxid, collision, short_id)) {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(r.m_succeeded);\n+            BOOST_REQUIRE(!r.m_conflict.has_value());\n+        } else {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(!r.m_succeeded);\n+            BOOST_REQUIRE_EQUAL(r.m_conflict.value(), collision);\n+        }\n+    }\n+\n+    // Trying to add the same item twice will just bypass\n+    r = tracker.AddToSet(peer_id1, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(AddToSetCollisionTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // Register the peer with a predefined salt so we can force the collision\n+    tracker.PreRegisterPeerWithSalt(peer_id0, 2);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    // Precompute collision\n+    Wtxid wtxid{Wtxid::FromUint256(uint256S(\"c70d778bccef36a81aed8da0b819d2bd28bd8653e56a5d40903df1a0ade0b876\"))};\n+    Wtxid collision{Wtxid::FromUint256(uint256S(\"ae52a6ecb8733fba1f7af6022a8b9dd327d7825054229fafcad7e03c38ae2a50\"))};\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    auto r = tracker.AddToSet(peer_id0, collision);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE_EQUAL(r.m_conflict.value(), wtxid);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TryRemovingFromSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    BOOST_REQUIRE(tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    tracker.ForgetPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                            /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    // Initialize a new instance with a new hasher to be used later on.\n+    CSipHasher hasher2(0x0706050403020100ULL, 0x4F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker2(TXRECONCILIATION_VERSION, hasher2);\n+    int inbound_peers = 36;\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        tracker2.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+        BOOST_REQUIRE_EQUAL(tracker2.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    // For 35 peers we will choose 3.5 flooding targets, which means that it's either 3 or 4 with\n+    // 50% chance. Make sure the randomness actually works by checking against a different hasher.\n+    size_t total_fanouted1 = 0;\n+    size_t total_fanouted2 = 0;\n+    auto wtxid = Wtxid::FromUint256(uint256(1)); // determinism is required.\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        total_fanouted1 += tracker.ShouldFanoutTo(wtxid, i,\n+                                                  /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+        total_fanouted2 += tracker2.ShouldFanoutTo(wtxid, i,\n+                                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+    }\n+    BOOST_CHECK_EQUAL(total_fanouted1, 3);\n+    BOOST_CHECK_EQUAL(total_fanouted2, 4);\n+",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 1,
      "original_position": 216,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "in_reply_to_id": 1667753973,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't taken this yet, given I'm working on a last commit reworking part of how the fanout selection works. I may consider it after that. In any case, looks like this is only filling the cache but not testing anything after it",
      "created_at": "2024-09-13T20:22:15Z",
      "updated_at": "2024-09-13T20:22:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1759454074",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759454074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769550928",
      "pull_request_review_id": 2319731127,
      "id": 1769550928,
      "node_id": "PRRC_kwDOABII585peTRQ",
      "diff_hunk": "@@ -2374,10 +2419,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (peer_can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n+        }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant\n+            // set. Otherwise it could be the case that the children were fanout before the parent\n+            // got reconciled.\n+            Assume(peer->m_wtxid_relay);\n+            const auto result = m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid));\n+            if (!result.m_succeeded) {\n+                // If the transactions fails to get into the set, we fanout\n+                invs_to_send.push_back(wtxid);\n+                // If the transaction fails because it collides with an existing one,\n+                // we also remove and fanout the conflict and all its descendants.\n+                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 134,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "3879f550d3c513c83ab34df7bc390e33c89e7e72",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n                // This is because our peer may have added the conflicting transaction\r\n```",
      "created_at": "2024-09-21T12:47:14Z",
      "updated_at": "2024-09-21T12:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1769550928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769550928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775342441",
      "pull_request_review_id": 2328451689,
      "id": 1775342441,
      "node_id": "PRRC_kwDOABII585p0ZNp",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't we decrease the number of `inbounds_fanout_tx_relay`/`outbounds_fanout_tx_relay` by the number of peers we're going to fanout with ancestors?",
      "created_at": "2024-09-25T14:28:26Z",
      "updated_at": "2024-09-25T14:29:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1775342441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775342441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776775938",
      "pull_request_review_id": 2330757791,
      "id": 1776775938,
      "node_id": "PRRC_kwDOABII585p53MC",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could. I left it as for simplicity, given this case should not be too frequent, so having a higher fanout under these conditions shouldn't be too bad. \r\n\r\nI'll consider adding it if it does not make the code much harder to read, or if there is a clear counterargument in favor of it.",
      "created_at": "2024-09-26T10:11:57Z",
      "updated_at": "2024-09-26T10:11:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1776775938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776775938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1797721753",
      "pull_request_review_id": 2363929991,
      "id": 1797721753,
      "node_id": "PRRC_kwDOABII585rJw6Z",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": null,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can `outbounds_fanout_tx_relay` ever be greater than 1 here? I think if we have two (or more) unregistered outbound peers and at least one registered peer, then this results in an unsigned integer overflow. Which then overflows `targets_size` in `IsFanoutTarget`.",
      "created_at": "2024-10-12T15:46:04Z",
      "updated_at": "2024-10-12T16:19:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1797721753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1797721753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812987095",
      "pull_request_review_id": 2389107187,
      "id": 1812987095,
      "node_id": "PRRC_kwDOABII585sD_zX",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "working on a test and fix for this.",
      "created_at": "2024-10-23T15:03:12Z",
      "updated_at": "2024-10-23T15:03:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1812987095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812987095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813071345",
      "pull_request_review_id": 2389257068,
      "id": 1813071345,
      "node_id": "PRRC_kwDOABII585sEUXx",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh sorry, I forgot to reply to this. We discussed this in person last week and this is indeed an issue. Happy to take your fix @naumenkogs",
      "created_at": "2024-10-23T15:44:23Z",
      "updated_at": "2024-10-23T15:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1813071345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813071345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1814685980",
      "pull_request_review_id": 2391985630,
      "id": 1814685980,
      "node_id": "PRRC_kwDOABII585sKekc",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay,  see the last two commits [here](https://github.com/naumenkogs/bitcoin/commits/2024-10-30116-fix-underflow/).\r\n\r\nI also dropped the `<0.001` check, it's kinda pointless anyway...",
      "created_at": "2024-10-24T10:06:07Z",
      "updated_at": "2024-10-24T10:06:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1814685980",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1814685980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818548647",
      "pull_request_review_id": 2398229655,
      "id": 1818548647,
      "node_id": "PRRC_kwDOABII585sZNmn",
      "diff_hunk": "@@ -197,15 +195,52 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool HasCollisionInternal(TxReconciliationState *peer_state, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+\n+        short_id = peer_state->ComputeShortID(wtxid);\n+        const auto iter = peer_state->m_short_id_mapping.find(short_id);\n+\n+        if (iter != peer_state->m_short_id_mapping.end()) {\n+            collision = iter->second;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool HasCollision(NodeId peer_id, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\nNot sure it's worth exposing this external method if the only reason to have it is testing.",
      "created_at": "2024-10-28T08:16:31Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818548647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818548647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818553463",
      "pull_request_review_id": 2398229655,
      "id": 1818553463,
      "node_id": "PRRC_kwDOABII585sZOx3",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\n\r\nworth adding a comment on what would happen if there are 3 colliding transactions (probably fine but some text would be helpful) :)",
      "created_at": "2024-10-28T08:20:30Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818553463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818553463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818555798",
      "pull_request_review_id": 2398229655,
      "id": 1818555798,
      "node_id": "PRRC_kwDOABII585sZPWW",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);\n+                                        vInv.emplace_back(MSG_WTX, wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\nwhat would happen if a descendant was already flooded?",
      "created_at": "2024-10-28T08:22:22Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818555798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818555798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818568903",
      "pull_request_review_id": 2398229655,
      "id": 1818568903,
      "node_id": "PRRC_kwDOABII585sZSjH",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\ncould *this* be used to game collisions (for *wtxid* you have here)?",
      "created_at": "2024-10-28T08:32:21Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818568903",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818568903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818570491",
      "pull_request_review_id": 2398229655,
      "id": 1818570491,
      "node_id": "PRRC_kwDOABII585sZS77",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818568903,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "say a descendant was never considered for reconciliation (somehow), but now is used to removefromset some other transaction (it collides with)\r\n\r\nor maybe it was considered, but then was dropped in favor of something else (that's not how we currently handle collisions, but that would be a hard assumption)",
      "created_at": "2024-10-28T08:33:42Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818570491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818570491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818575030",
      "pull_request_review_id": 2398229655,
      "id": 1818575030,
      "node_id": "PRRC_kwDOABII585sZUC2",
      "diff_hunk": "@@ -523,7 +523,7 @@ class PeerManagerImpl final : public PeerManager\n     PeerManagerInfo GetInfo() const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     std::pair<size_t, size_t> GetFanoutPeersCount() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhy do you think force relay should influence whether we reconcile or flood? The transaction is relayed in either case (the original meaning of force relay)",
      "created_at": "2024-10-28T08:37:21Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818575030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818575030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818577080",
      "pull_request_review_id": 2398229655,
      "id": 1818577080,
      "node_id": "PRRC_kwDOABII585sZUi4",
      "diff_hunk": "@@ -2370,8 +2370,8 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount()\n     if (m_txreconciliation) {\n         LOCK(m_peer_mutex);\n         for(const auto& [peer_id, peer] : m_peer_map) {\n-            if (auto tx_relay = peer->GetTxRelay()) {\n-                bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+            if (const auto tx_relay = peer->GetTxRelay()) {",
      "path": "src/net_processing.cpp",
      "position": 72,
      "original_position": 24,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\n these kind of refactors we better apply where the code was introduced, in the older commits of this PR",
      "created_at": "2024-10-28T08:38:59Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818577080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818577080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2141,
      "original_line": 2141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818583090",
      "pull_request_review_id": 2398229655,
      "id": 1818583090,
      "node_id": "PRRC_kwDOABII585sZWAy",
      "diff_hunk": "@@ -139,6 +139,12 @@ class TxReconciliationTracker\n      */\n     bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n                         size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay);\n+\n+    /**\n+     * Returns a collections of node ids sorted by how many parents the peer has in its reconciliation set",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nyou can technically feed it arbitrary transactions. I think the comment should say it, and then later say \"we normally pass a list of parents to determine whether [... ... ...]\".",
      "created_at": "2024-10-28T08:43:20Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818583090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818583090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818584774",
      "pull_request_review_id": 2398229655,
      "id": 1818584774,
      "node_id": "PRRC_kwDOABII585sZWbG",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhy not modifying the former commit that introduces this code?",
      "created_at": "2024-10-28T08:44:41Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818584774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818584774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818598067",
      "pull_request_review_id": 2398229655,
      "id": 1818598067,
      "node_id": "PRRC_kwDOABII585sZZqz",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 82,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhat about the order of the parents here? Deserves a comment at least. With the current non-cluster mempool it might break something?\r\n\r\nUPD:\r\n\r\nSay the following happens:\r\nA -> B - > C\r\n\r\n- A arrives, we add it to some sets.\r\n- B arrives, triggers a flood from half the sets, but the other half has A+B now.\r\n- C arrives, triggers a flood from A+B. But then, can we guarantee A is flooded before B?\r\n\r\nUPD2: topo sort should work. Have a common place where the INV vector is handled?",
      "created_at": "2024-10-28T08:54:18Z",
      "updated_at": "2024-11-04T09:52:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818598067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818598067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818641775",
      "pull_request_review_id": 2398229655,
      "id": 1818641775,
      "node_id": "PRRC_kwDOABII585sZkVv",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 95,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhere do you do this (consider in-mempool descendants and decide to fanout everything)? I only see you do it for the collision",
      "created_at": "2024-10-28T09:11:44Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818641775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818641775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818670032",
      "pull_request_review_id": 2398229655,
      "id": 1818670032,
      "node_id": "PRRC_kwDOABII585sZrPQ",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "20772c077832592265bd6a2876aa6b4cb7dbde7d\r\n\r\nwith this code, and especially the 5/2 trickle delay (very long), previous performance measurements become outdated.\r\n\r\nMy idea was to [delay the responses](https://github.com/bitcoin/bitcoin/pull/21515/commits/f99fa469115856aefa9799b3fc62ba09985933ad). And by this time, the hope was flooding does enough job so that scanning the sets through many connections does not work.\r\n\r\nAlso, adding to a set already happens on a trickle... so that's another level of protection",
      "created_at": "2024-10-28T09:19:43Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818670032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818670032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818702420",
      "pull_request_review_id": 2398229655,
      "id": 1818702420,
      "node_id": "PRRC_kwDOABII585sZzJU",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "d2f260507279b1edd6c0f55d02c7ae2e598b3585",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d2f260507279b1edd6c0f55d02c7ae2e598b3585\r\nnit: `Assume(m_states.emplace(peer_id, std::move(new_state)).second);`",
      "created_at": "2024-10-28T09:28:52Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818702420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818702420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818703437",
      "pull_request_review_id": 2398229655,
      "id": 1818703437,
      "node_id": "PRRC_kwDOABII585sZzZN",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return false;\n+\n+        // The caller currently keeps track of the per-peer transaction announcements, so it\n+        // should not attempt to add same tx to the set twice. However, if that happens, we will\n+        // simply ignore it.\n+        if (peer_state->m_local_set.insert(wtxid).second) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                        \"Now the set contains %i transactions.\\n\",\n+                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+        }\n+        return true;\n+    }\n+\n+    bool TryRemovingFromSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        auto removed = peer_state->m_local_set.erase(wtxid) > 0;\n+        if (removed) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Removed %s from the reconciliation set for peer=%d. \" /* Continued */",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 92,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "d2f260507279b1edd6c0f55d02c7ae2e598b3585",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/d2f260507279b1edd6c0f55d02c7ae2e598b3585\r\n\r\nnit: in three places in this commit `/* Continued */` should be dropped, it's no longer necessary (been a linter thing)",
      "created_at": "2024-10-28T09:29:36Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818703437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818703437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818706047",
      "pull_request_review_id": 2398229655,
      "id": 1818706047,
      "node_id": "PRRC_kwDOABII585sZ0B_",
      "diff_hunk": "@@ -6184,6 +6194,27 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n+\n+                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+                    const bool reconciles_txs = m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId());\n+                    if (reconciles_txs) {\n+                        for (const auto& [cur_peer_id, cur_peer] : m_peer_map) {\n+                            // Skip the source of the transaction.\n+                            if (cur_peer_id == pto->GetId()) continue;\n+                            if (auto peer_tx_relay = cur_peer->GetTxRelay()) {\n+                                LOCK(peer_tx_relay->m_bloom_filter_mutex);\n+                                // When we consider to which (and how many) Erlay peers\n+                                // we should fanout a tx, we must know to how\n+                                // many peers we would certainly announce this tx\n+                                // (non-Erlay peers).\n+                                if (peer_tx_relay->m_relay_txs && !m_txreconciliation->IsPeerRegistered(cur_peer_id)) {\n+                                    inbounds_fanout_tx_relay += cur_peer->m_is_inbound;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 65,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "873e8dd60b93f740330e9b0fbae4b3200204653a",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "873e8dd60b93f740330e9b0fbae4b3200204653a\r\n\r\nnit: cur_peer->m_is_inbound ? ++inbounds_fanout_tx_relay : ++outbounds_fanout_tx_relay",
      "created_at": "2024-10-28T09:31:16Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818706047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818706047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819654430",
      "pull_request_review_id": 2400051633,
      "id": 1819654430,
      "node_id": "PRRC_kwDOABII585sdbke",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The commit with the casting works, but the test one is actually not a good way of testing this; it would pass both with and without the change.\r\n\r\nTurns out that passing a huge value to `IsFanoutTarget` would result in `targets_size` being `0`, which results in the method returning `false`. I don't think there is really a good way of testing this.\r\n\r\nI'll take the code commit but skip the addition to the test.",
      "created_at": "2024-10-28T19:42:46Z",
      "updated_at": "2024-10-28T19:42:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1819654430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819654430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819663339",
      "pull_request_review_id": 2400066625,
      "id": 1819663339,
      "node_id": "PRRC_kwDOABII585sddvr",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I squashed the change in here: ad95b2c0e21f1e865f967aa9463ef99bc252550a",
      "created_at": "2024-10-28T19:48:08Z",
      "updated_at": "2024-10-28T19:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1819663339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819663339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820474026",
      "pull_request_review_id": 2401341173,
      "id": 1820474026,
      "node_id": "PRRC_kwDOABII585sgjqq",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Interesting. So, for me, the first commit (with a new test) takes forever to execute.\r\n\r\nMore specifically, the execution hangs on `best_peers.resize(targets_size);`, with `targets_size` being a huge number.\r\n\r\nI guess your system handles this gracefully instead?\r\n\r\nA clear failure could be triggered by e.g. `Assume(targets_size <= m_states.size());`",
      "created_at": "2024-10-29T09:57:31Z",
      "updated_at": "2024-10-29T09:57:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820474026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820474026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820487554",
      "pull_request_review_id": 2401362483,
      "id": 1820487554,
      "node_id": "PRRC_kwDOABII585sgm-C",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "4234f5ebe133b949080aaa56da8cbdd18b650ff2\r\n\r\nOriginally, the code forced me to make this call for every peer, that's why i needed it to be deterministic. It's not the case anymore. Do we still need determinism then?",
      "created_at": "2024-10-29T10:06:19Z",
      "updated_at": "2024-10-29T10:06:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820487554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820487554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820490053",
      "pull_request_review_id": 2401366605,
      "id": 1820490053,
      "node_id": "PRRC_kwDOABII585sgnlF",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Otherwise we can drop `m_deterministic_randomizer` altogether and use some cheap `FastRandomContext` instead.",
      "created_at": "2024-10-29T10:08:05Z",
      "updated_at": "2024-10-29T10:08:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820490053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820490053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820518288",
      "pull_request_review_id": 2401412734,
      "id": 1820518288,
      "node_id": "PRRC_kwDOABII585sgueQ",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There is no need to cast it to double anymore. \r\n\r\nWhat we should do is something like\r\n```\r\n        size_t outbounds_target_size = 0;\r\n        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\r\n```\r\n\r\nPerhaps there is a less ugly way to do this. But casting to double seems worse.",
      "created_at": "2024-10-29T10:17:24Z",
      "updated_at": "2024-10-29T10:17:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820518288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820518288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820521627",
      "pull_request_review_id": 2401417792,
      "id": 1820521627,
      "node_id": "PRRC_kwDOABII585sgvSb",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 409,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "feel free to resolve this and let's talk in the new commit.",
      "created_at": "2024-10-29T10:19:35Z",
      "updated_at": "2024-10-29T10:19:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820521627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820521627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820533885",
      "pull_request_review_id": 2401436632,
      "id": 1820533885,
      "node_id": "PRRC_kwDOABII585sgyR9",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The following test would break the code if we forget the double cast (discussion [here](https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820474026)). I suggest adding it to the tests.\r\n\r\n```\r\n        std::tie(in_fanout_targets, out_fanout_targets) = tracker.GetFanoutTargets(Wtxid::FromUint256(frc.rand256()), /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/100);\r\n        BOOST_CHECK(!tracker.ShouldFanoutTo(peer_id0, in_fanout_targets, out_fanout_targets));\r\n\r\n```",
      "created_at": "2024-10-29T10:27:47Z",
      "updated_at": "2024-10-29T10:27:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820533885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820533885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820538647",
      "pull_request_review_id": 2401443934,
      "id": 1820538647,
      "node_id": "PRRC_kwDOABII585sgzcX",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820518288,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(technically the code you have is correct, it's just confusing for no reason i think)",
      "created_at": "2024-10-29T10:30:45Z",
      "updated_at": "2024-10-29T10:30:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820538647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820538647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820542894",
      "pull_request_review_id": 2401450441,
      "id": 1820542894,
      "node_id": "PRRC_kwDOABII585sg0eu",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        return std::make_tuple(in_fanout_targets, out_fanout_targets);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 83,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "4234f5ebe133b949080aaa56da8cbdd18b650ff2\r\n\r\nWe can just merge the two vectors, no? There is no use for this separation.",
      "created_at": "2024-10-29T10:33:33Z",
      "updated_at": "2024-10-29T10:33:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820542894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820542894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821427081",
      "pull_request_review_id": 2402910776,
      "id": 1821427081,
      "node_id": "PRRC_kwDOABII585skMWJ",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Well, this really depends. `GetFanoutTargets` is called by `RelayTransaction`, which, in turn, may be called by `ProcessMessage` for a peer that has `NetPermissionFlags::ForceRelay`. So if force relay is used for both fanout and set reconciliation, as suggested in https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818575030, then this could be called twice leading to two different sorting if we don't do so deterministically",
      "created_at": "2024-10-29T19:34:17Z",
      "updated_at": "2024-10-29T19:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1821427081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821427081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821431430",
      "pull_request_review_id": 2402917895,
      "id": 1821431430,
      "node_id": "PRRC_kwDOABII585skNaG",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        return std::make_tuple(in_fanout_targets, out_fanout_targets);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 83,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820542894,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, you're right. Given how small the two vectors are, calling `ShouldFanoutTo` with a merged vector should not incur any major overhead, so merging will make it easier to read",
      "created_at": "2024-10-29T19:38:19Z",
      "updated_at": "2024-10-29T19:38:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1821431430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821431430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821533301",
      "pull_request_review_id": 2403082616,
      "id": 1821533301,
      "node_id": "PRRC_kwDOABII585skmR1",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820533885,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added it to the initial commit and reworked it on the last one",
      "created_at": "2024-10-29T21:06:47Z",
      "updated_at": "2024-10-29T21:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1821533301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821533301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822182678",
      "pull_request_review_id": 2404101797,
      "id": 1822182678,
      "node_id": "PRRC_kwDOABII585snE0W",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This could be `ReattemptInitialBroadcast`, `BroadcastTransaction` (rpc/wallet), `ProcessValidTx`, or earlier upon handling `NetMsgType::TX`.\r\n\r\n~~I think it's odd we have two calls to `RelayTransaction` in the two latter cases. I'd rather change this code, e.g.  pass `already_relayed` (duplicating force) to `RelayTransaction`. Perhaps too much for this PR and we should do it elsewhere (especially now that the package stuff happens in-between). I understand why it was ok when `RelayTransaction` was simple.~~\r\n\r\n~~And while we're stuck with these two calls~~, let's say we drop the determinism.\r\n\r\nWhy `RelayTransaction` doesn't look at `m_tx_inventory_to_send` very early (and maybe `m_tx_inventory_known_filter` too)? That would catch the transactions we already set for flooding, and just pass on them.\r\n\r\nNow, the transactions in the sets. If we add them to the set again, nothing is done. If we try to flood them by a different choice, nothing is done still because we hit `m_tx_inventory_to_send` already having it.\r\n \r\nThus, for now, i think we should repeat the `m_tx_inventory_to_send` check above, rather than having the determinism. It kinda makes sense anyway, no?",
      "created_at": "2024-10-30T09:15:53Z",
      "updated_at": "2024-10-30T09:52:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1822182678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822182678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822431933",
      "pull_request_review_id": 2404538684,
      "id": 1822431933,
      "node_id": "PRRC_kwDOABII585soBq9",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just talked to Bruno a bit more about this.\r\n\r\nI think it's fair to compare this delayed set mechanism to what i have in the code there.\r\nI like my solution more because:\r\n- its synced across peers (handles better spying across multiple conns i think?)\r\n- simpler code\r\n- more flexibility (doesn't have to be same trickling as adding to sets or fanouting)\r\n\r\nInterested in what other people think though.\r\n\r\n",
      "created_at": "2024-10-30T11:35:09Z",
      "updated_at": "2024-10-30T11:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1822431933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822431933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822834821",
      "pull_request_review_id": 2405261931,
      "id": 1822834821,
      "node_id": "PRRC_kwDOABII585spkCF",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the current approach mimics what you were doing with your old one. I haven't picked up the trickle reduction commit not the delayed response, but I was planning to in the next PR.\r\n\r\nYour approach used to add transactions to the reconciliation set during INV building, which happens on trickle intervals. So data was added to `to_be_announced` (delayed) on `RelayTransaction` and then made available on trickle. The current approach adds data to the delayed set on `RelayTransaction` and makes it available on trickle too.\r\n\r\nSo I don't think the previous performance measurements become outdated, building the whole Erlay PR on this should yield similar results. ",
      "created_at": "2024-10-30T15:07:46Z",
      "updated_at": "2024-10-30T15:07:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1822834821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822834821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823207236",
      "pull_request_review_id": 2405970195,
      "id": 1823207236,
      "node_id": "PRRC_kwDOABII585sq-9E",
      "diff_hunk": "@@ -2370,8 +2370,8 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount()\n     if (m_txreconciliation) {\n         LOCK(m_peer_mutex);\n         for(const auto& [peer_id, peer] : m_peer_map) {\n-            if (auto tx_relay = peer->GetTxRelay()) {\n-                bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+            if (const auto tx_relay = peer->GetTxRelay()) {",
      "path": "src/net_processing.cpp",
      "position": 72,
      "original_position": 24,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818577080,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're right, should have been added to the previous commit. Will fix",
      "created_at": "2024-10-30T18:45:43Z",
      "updated_at": "2024-10-30T18:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1823207236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823207236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2141,
      "original_line": 2141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823223107",
      "pull_request_review_id": 2406001681,
      "id": 1823223107,
      "node_id": "PRRC_kwDOABII585srC1D",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Being this part of `RelayTransaction`, which processed transactions one at a time, and given that if a collision happens the existing transaction is removed from the set, there cannot be a three-way collision. If a third transaction that happens to have the same short id as the two previous ones is added to the set later, it would be added normally since there won't be a transaction to collide with.\r\n\r\nI could add a comment for three, but someone may then mention what happens if there are four 😅 ",
      "created_at": "2024-10-30T18:58:41Z",
      "updated_at": "2024-10-30T18:58:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1823223107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823223107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823263917",
      "pull_request_review_id": 2406089347,
      "id": 1823263917,
      "node_id": "PRRC_kwDOABII585srMyt",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do you mean squashing these changes instead of having a \"move\" commit?",
      "created_at": "2024-10-30T19:31:39Z",
      "updated_at": "2024-10-30T19:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1823263917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823263917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824060041",
      "pull_request_review_id": 2407335911,
      "id": 1824060041,
      "node_id": "PRRC_kwDOABII585suPKJ",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was looking for something like \"As a general rule, we keep the transaction that appeared first\".\r\n\r\nCurrently, the `AddToSet` documentation seems outdated—it basically claims that the only way to fail is to reach a set limit.\r\n\r\nHow about the following replacement:\r\n\r\n```\r\n    /**\r\n     * Step 1. Add a to-be-announced transaction to the local reconciliation set of the target peer.\r\n     * Returns false if the set is at capacity, or if the set contains a colliding transaction.\r\n     * Returns true if the transaction appears in the set (whether it was already there or just was added).\r\n     */\r\n```",
      "created_at": "2024-10-31T08:22:33Z",
      "updated_at": "2024-10-31T08:22:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824060041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824060041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824208275",
      "pull_request_review_id": 2407562196,
      "id": 1824208275,
      "node_id": "PRRC_kwDOABII585suzWT",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree now, it's equivalent. Still wrapping my head around `RelayTransaction` refactoring :)\r\n\r\n---------------------------\r\n\r\nA difference could be in handling dependencies: during the trickle window after the first transaction arrives.\r\n\r\nSay, a parent arrives, and then a child arrives in a second. In my approach we may notice the child when handling (announcement-wise) the parent (because handling the parent is postponed via trickle).\r\nIn your approach, you handle the parent independently.\r\n\r\nIs there any use of knowing about the child while handling (announcement-wise) the parent? I don't think so. You probably could save some efforts of adding the parent to reconset, and then removing it, but that should be cheap anyway.\r\n\r\n-------------------------\r\n\r\n(the child-before-parent case is entirely different, as the child-to-arrive-early doesn't normally hit the announcement step while in orphanage)\r\n\r\n",
      "created_at": "2024-10-31T10:14:01Z",
      "updated_at": "2024-10-31T10:14:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824208275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824208275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824212857",
      "pull_request_review_id": 2407569080,
      "id": 1824212857,
      "node_id": "PRRC_kwDOABII585su0d5",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 82,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818598067,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "another question: say a child arrives a few minutes after a parent (parent still in the mempool, but it's been announced to peers a while ago). Why bother with this inv? Perhaps we should do it only if `TryRemovingFromSet` actually have removed it?\r\n\r\n(same applies to handling a collision below)\r\n\r\ni know `m_tx_inventory_known_filter` will probably catch it, but i think it's better to do it here.",
      "created_at": "2024-10-31T10:17:55Z",
      "updated_at": "2024-10-31T10:18:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824212857",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824212857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824219529",
      "pull_request_review_id": 2407578851,
      "id": 1824219529,
      "node_id": "PRRC_kwDOABII585su2GJ",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Apparently I was wrong.\r\n\r\n```\r\n                // If the transaction fails because it collides with an existing one,\r\n                // we also remove and fanout the conflict and all its descendants.\r\n                // This is because our peer may have added the conflicting transaction\r\n                // to its set, in which reconciliation of these two would fail\r\n```\r\n\r\nSay A, B, C arrive.\r\n- First A added to the set.\r\n- then B doesn't make it to the set, but also drops A from it.\r\n- then C takes a place in the set.",
      "created_at": "2024-10-31T10:23:21Z",
      "updated_at": "2024-10-31T10:23:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824219529",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824219529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824221603",
      "pull_request_review_id": 2407581905,
      "id": 1824221603,
      "node_id": "PRRC_kwDOABII585su2mj",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes",
      "created_at": "2024-10-31T10:25:06Z",
      "updated_at": "2024-10-31T10:25:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824221603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824221603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824285323",
      "pull_request_review_id": 2407676322,
      "id": 1824285323,
      "node_id": "PRRC_kwDOABII585svGKL",
      "diff_hunk": "@@ -75,7 +81,37 @@ class TxReconciliationState\n      */\n     std::map<uint32_t, Wtxid> m_short_id_mapping;\n \n-    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1), m_delayed_local_set(), m_local_set(0, m_delayed_local_set.hash_function()) {}\n+\n+    /**\n+    * Checks whether a transaction is already in the set. If `include_delayed` is set, the delayed set is also\n+    * checked. Otherwise, transactions are only looked up in the regular set.\n+    */\n+    bool ContainsTx(const Wtxid& wtxid, bool include_delayed)\n+    {\n+        bool found = m_local_set.find(wtxid) != m_local_set.end();\n+        if (include_delayed) {\n+            found |= m_delayed_local_set.find(wtxid) != m_delayed_local_set.end();\n+        }\n+\n+        return found;\n+    }\n+\n+    /**\n+     * Computes the size of the reconciliation set (including both available and delayed transactions)\n+     */\n+    size_t ReconSetSize()\n+    {\n+        return m_local_set.size() + m_delayed_local_set.size();\n+    }\n+\n+    bool RemoveFromSet(const Wtxid& wtxid)\n+    {\n+        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 53,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit\r\n\r\n```\r\n        const size_t removed = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);\r\n        // Data must be in one of the sets at most\r\n        Assume(removed <= 1);\r\n        return removed == 1;\r\n```",
      "created_at": "2024-10-31T11:17:52Z",
      "updated_at": "2024-10-31T11:17:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824285323",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824285323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825645357",
      "pull_request_review_id": 2409798591,
      "id": 1825645357,
      "node_id": "PRRC_kwDOABII585s0SMt",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fd7c35a22669d440afe182a153bed28fd326b51f\r\n\r\nOften, there will be no parents (e.g., a parent is in the mempool but has already been flooded/reconciled). In that case, it would be nice to give a random order. And then comment it please.\r\n\r\n(currently it's ordered by `m_states` i think).",
      "created_at": "2024-11-01T09:49:21Z",
      "updated_at": "2024-11-01T09:50:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825645357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825645357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825649181",
      "pull_request_review_id": 2409804609,
      "id": 1825649181,
      "node_id": "PRRC_kwDOABII585s0TId",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This function could easily return two numbers: how many of these peers are inbound and outbound. And then just pass this pair along to `ShouldFanoutTo`. Should be not that complex code. A cheap cost to preserve the efficiency model.\r\n\r\nI might try if you don't get to it earlier.",
      "created_at": "2024-11-01T09:54:10Z",
      "updated_at": "2024-11-01T09:54:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825649181",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825649181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825659145",
      "pull_request_review_id": 2409819446,
      "id": 1825659145,
      "node_id": "PRRC_kwDOABII585s0VkJ",
      "diff_hunk": "@@ -2155,10 +2176,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant\n+            // set. Otherwise it could be the case that the children were fanout before the parent\n+            // got reconciled.\n+            Assume(peer->m_wtxid_relay);\n+            const auto result = m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid));\n+            if (!result.m_succeeded) {\n+                // If the transactions fails to get into the set, we fanout\n+                invs_to_send.push_back(wtxid);\n+                // If the transaction fails because it collides with an existing one,\n+                // we also remove and fanout the conflict and all its descendants.\n+                // This is because our peer may have added the conflicting transaction\n+                // to its set, in which reconciliation of these two would fail\n+                if (const auto collision = result.m_conflict; collision.has_value()) {\n+                    CTxMemPool::setEntries descendants;\n+                    WITH_LOCK(m_mempool.cs, m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants));",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why having a collision means we should fanout the children? They may get reconciled in their own time.",
      "created_at": "2024-11-01T10:06:23Z",
      "updated_at": "2024-11-01T10:06:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825659145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825659145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825760358",
      "pull_request_review_id": 2409973125,
      "id": 1825760358,
      "node_id": "PRRC_kwDOABII585s0uRm",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Found another relevant thing! ([here](https://gist.github.com/naumenkogs/514ff3901960161a7b7ee08449840768)) \r\n\r\n```\r\n09:42:53<@gmaxwell> Existing relay logic checks that transactions are still in the mempool before relaying them. I think the issue there would go away if instead of keeping around some erlay datastructure you just keep growing the queue of the peers transactions to relay until its time to reconcile, enh?  then the existing logic to check if things are still in the mempool is sufficient.\r\n```\r\n\r\n\"Existing\" refers to the legacy code in my branch.",
      "created_at": "2024-11-01T12:22:31Z",
      "updated_at": "2024-11-01T12:24:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825760358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825760358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825876761",
      "pull_request_review_id": 2410166282,
      "id": 1825876761,
      "node_id": "PRRC_kwDOABII585s1KsZ",
      "diff_hunk": "@@ -2155,10 +2176,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant\n+            // set. Otherwise it could be the case that the children were fanout before the parent\n+            // got reconciled.\n+            Assume(peer->m_wtxid_relay);\n+            const auto result = m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid));\n+            if (!result.m_succeeded) {\n+                // If the transactions fails to get into the set, we fanout\n+                invs_to_send.push_back(wtxid);\n+                // If the transaction fails because it collides with an existing one,\n+                // we also remove and fanout the conflict and all its descendants.\n+                // This is because our peer may have added the conflicting transaction\n+                // to its set, in which reconciliation of these two would fail\n+                if (const auto collision = result.m_conflict; collision.has_value()) {\n+                    CTxMemPool::setEntries descendants;\n+                    WITH_LOCK(m_mempool.cs, m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants));",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825659145,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because if you remove the parent from the reconciliation set but not the children, it could be the case that you reconcile with that peer before fanning out the parent, and all those children will be orphan",
      "created_at": "2024-11-01T14:20:31Z",
      "updated_at": "2024-11-01T14:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825876761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825876761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825888636",
      "pull_request_review_id": 2410185606,
      "id": 1825888636,
      "node_id": "PRRC_kwDOABII585s1Nl8",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because it is doing more than just moving the code around, so I thought it may be easier for reviewers already familiar with the original approach to understand the changes. I wouldn't mind squashing it once all the discussion around `RelayTranaction` is resolved",
      "created_at": "2024-11-01T14:30:47Z",
      "updated_at": "2024-11-01T14:30:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825888636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825888636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825893170",
      "pull_request_review_id": 2410193100,
      "id": 1825893170,
      "node_id": "PRRC_kwDOABII585s1Osy",
      "diff_hunk": "@@ -197,15 +195,52 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool HasCollisionInternal(TxReconciliationState *peer_state, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+\n+        short_id = peer_state->ComputeShortID(wtxid);\n+        const auto iter = peer_state->m_short_id_mapping.find(short_id);\n+\n+        if (iter != peer_state->m_short_id_mapping.end()) {\n+            collision = iter->second;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool HasCollision(NodeId peer_id, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818548647,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Happy to consider an alternative approach that allows us to check there are no collisions without having to expose a public method if you have something in mind",
      "created_at": "2024-11-01T14:34:45Z",
      "updated_at": "2024-11-01T14:34:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825893170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825893170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825913918",
      "pull_request_review_id": 2410227806,
      "id": 1825913918,
      "node_id": "PRRC_kwDOABII585s1Tw-",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 95,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818641775,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this comment is accurate since this can never be the case. A transaction considered for relay cannot have in-mempool descendants by definition, since they would have been orphans at the time of considering them.\r\n\r\nI cannot recall if this is a re-word of the previous approach, which tried to consider descendants, or I tried to refer to the collisions and it didn't make much sense. \r\n\r\nI'll remove the comment",
      "created_at": "2024-11-01T14:52:19Z",
      "updated_at": "2024-11-01T14:53:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825913918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825913918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825939865",
      "pull_request_review_id": 2410269874,
      "id": 1825939865,
      "node_id": "PRRC_kwDOABII585s1aGZ",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);\n+                                        vInv.emplace_back(MSG_WTX, wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818555798,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a good point. It may be the case that the selected peer has a parent -> child dependency but was not picked as one of the `fanout_with_ancestors` peers, the parent and the child may have ended up in different sets.\r\n\r\nWe should check the return of `TryRemovingFromSet` before adding it to `vInv` ",
      "created_at": "2024-11-01T15:14:16Z",
      "updated_at": "2024-11-01T15:14:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825939865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825939865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825957496",
      "pull_request_review_id": 2410301259,
      "id": 1825957496,
      "node_id": "PRRC_kwDOABII585s1eZ4",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818568903,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Collisions of this kind *could* happen in theory, but I don't think they can be really gamed:\r\n\r\nshort ids are peer specific, they are generated using `SipHashUint256` which are salted using `m_k0` and  `m_k1`. Therefore, while a collision of this kind is theoretically possible, an adversarial peer should not be able to exploit them",
      "created_at": "2024-11-01T15:28:31Z",
      "updated_at": "2024-11-01T20:14:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1825957496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825957496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826245538",
      "pull_request_review_id": 2410801267,
      "id": 1826245538,
      "node_id": "PRRC_kwDOABII585s2kui",
      "diff_hunk": "@@ -81,4 +87,193 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    // If the peer is not registered, adding to the set fails\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    auto r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // As long as the peer is registered, adding a new wtxid to the set should work\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // If the peer is dropped, adding wtxids to its set should fail\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    r = tracker.AddToSet(peer_id0, wtxid2);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    // As long as the peer is registered and the transaction is not in the set, and there is no short id\n+    // collision, adding should work\n+    for (size_t i = 0; i < MAX_RECONSET_SIZE; ++i) {\n+        wtxid = Wtxid::FromUint256(frc.rand256());\n+        Wtxid collision;\n+        uint32_t short_id;\n+\n+        if (!tracker.HasCollision(peer_id1, wtxid, collision, short_id)) {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(r.m_succeeded);\n+            BOOST_REQUIRE(!r.m_conflict.has_value());\n+        } else {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(!r.m_succeeded);\n+            BOOST_REQUIRE_EQUAL(r.m_conflict.value(), collision);\n+        }\n+    }\n+\n+    // Trying to add the same item twice will just bypass\n+    r = tracker.AddToSet(peer_id1, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(AddToSetCollisionTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // Register the peer with a predefined salt so we can force the collision\n+    tracker.PreRegisterPeerWithSalt(peer_id0, 2);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    // Precompute collision\n+    Wtxid wtxid{Wtxid::FromUint256(uint256S(\"c70d778bccef36a81aed8da0b819d2bd28bd8653e56a5d40903df1a0ade0b876\"))};\n+    Wtxid collision{Wtxid::FromUint256(uint256S(\"ae52a6ecb8733fba1f7af6022a8b9dd327d7825054229fafcad7e03c38ae2a50\"))};\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    auto r = tracker.AddToSet(peer_id0, collision);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE_EQUAL(r.m_conflict.value(), wtxid);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TryRemovingFromSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    BOOST_REQUIRE(tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    tracker.ForgetPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                            /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    // Initialize a new instance with a new hasher to be used later on.\n+    CSipHasher hasher2(0x0706050403020100ULL, 0x4F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker2(TXRECONCILIATION_VERSION, hasher2);\n+    int inbound_peers = 36;\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        tracker2.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+        BOOST_REQUIRE_EQUAL(tracker2.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    // For 35 peers we will choose 3.5 flooding targets, which means that it's either 3 or 4 with\n+    // 50% chance. Make sure the randomness actually works by checking against a different hasher.\n+    size_t total_fanouted1 = 0;\n+    size_t total_fanouted2 = 0;\n+    auto wtxid = Wtxid::FromUint256(uint256(1)); // determinism is required.\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        total_fanouted1 += tracker.ShouldFanoutTo(wtxid, i,\n+                                                  /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+        total_fanouted2 += tracker2.ShouldFanoutTo(wtxid, i,\n+                                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+    }\n+    BOOST_CHECK_EQUAL(total_fanouted1, 3);\n+    BOOST_CHECK_EQUAL(total_fanouted2, 4);\n+",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 1,
      "original_position": 216,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "in_reply_to_id": 1667753973,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolving since we don't have a cache anymore",
      "created_at": "2024-11-01T20:00:29Z",
      "updated_at": "2024-11-01T20:00:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1826245538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826245538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826249448",
      "pull_request_review_id": 2410807726,
      "id": 1826249448,
      "node_id": "PRRC_kwDOABII585s2lro",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed the docs for `TxReconciliationTracker::AddToSet` could be improved. I'll update it with a version of your suggestion",
      "created_at": "2024-11-01T20:05:22Z",
      "updated_at": "2024-11-01T20:05:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1826249448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826249448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826266792",
      "pull_request_review_id": 2410835421,
      "id": 1826266792,
      "node_id": "PRRC_kwDOABII585s2p6o",
      "diff_hunk": "@@ -75,7 +81,37 @@ class TxReconciliationState\n      */\n     std::map<uint32_t, Wtxid> m_short_id_mapping;\n \n-    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1), m_delayed_local_set(), m_local_set(0, m_delayed_local_set.hash_function()) {}\n+\n+    /**\n+    * Checks whether a transaction is already in the set. If `include_delayed` is set, the delayed set is also\n+    * checked. Otherwise, transactions are only looked up in the regular set.\n+    */\n+    bool ContainsTx(const Wtxid& wtxid, bool include_delayed)\n+    {\n+        bool found = m_local_set.find(wtxid) != m_local_set.end();\n+        if (include_delayed) {\n+            found |= m_delayed_local_set.find(wtxid) != m_delayed_local_set.end();\n+        }\n+\n+        return found;\n+    }\n+\n+    /**\n+     * Computes the size of the reconciliation set (including both available and delayed transactions)\n+     */\n+    size_t ReconSetSize()\n+    {\n+        return m_local_set.size() + m_delayed_local_set.size();\n+    }\n+\n+    bool RemoveFromSet(const Wtxid& wtxid)\n+    {\n+        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 53,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "in_reply_to_id": 1824285323,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not too sure about the `return removed == 1`\r\n\r\nThe assume is there to make sure that if the code happens to be wrong, it is catched on testing. In the current approach, if the code moving data from `delayed_set` to `m_local_set` was broken somehow, this method will return that data was actually removed. If were to return `removed == 1` in the aforementioned case, it would return false, and the caller's logic may break.\r\n\r\nI don't think any of these cases is likely to happen given the assume will catch it before getting merged, but the proposed change makes me anxious.\r\n\r\nPS: I agree on doing the variable renaming if you feel that makes the code more readable though",
      "created_at": "2024-11-01T20:27:14Z",
      "updated_at": "2024-11-01T20:27:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1826266792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826266792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826275867",
      "pull_request_review_id": 2410850307,
      "id": 1826275867,
      "node_id": "PRRC_kwDOABII585s2sIb",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);\n+                                        vInv.emplace_back(MSG_WTX, wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818555798,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just realized this is also the case for the ancestors. When relaying with ancestors, we should also check that the ancestor we are trying to relay is part of the reconciliation set (i.e. that it has not been previously flooded) ",
      "created_at": "2024-11-01T20:39:05Z",
      "updated_at": "2024-11-01T20:39:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1826275867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826275867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826278558",
      "pull_request_review_id": 2410854337,
      "id": 1826278558,
      "node_id": "PRRC_kwDOABII585s2sye",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825645357,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is only called if there are in mempol parents though, the ordering doesn't matter much otherwise",
      "created_at": "2024-11-01T20:42:19Z",
      "updated_at": "2024-11-01T20:42:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1826278558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826278558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827403107",
      "pull_request_review_id": 2412519551,
      "id": 1827403107,
      "node_id": "PRRC_kwDOABII585s6_Vj",
      "diff_hunk": "@@ -197,15 +195,52 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool HasCollisionInternal(TxReconciliationState *peer_state, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+\n+        short_id = peer_state->ComputeShortID(wtxid);\n+        const auto iter = peer_state->m_short_id_mapping.find(short_id);\n+\n+        if (iter != peer_state->m_short_id_mapping.end()) {\n+            collision = iter->second;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool HasCollision(NodeId peer_id, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818548647,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah just dropping `HasCollision`, keeping `HasCollisionInternal`. The former is used only in tests. And since its implementation is trivial, i think testing for collisions through `AddToSet` is sufficient.",
      "created_at": "2024-11-04T09:07:07Z",
      "updated_at": "2024-11-04T09:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827403107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827403107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827404289",
      "pull_request_review_id": 2412521640,
      "id": 1827404289,
      "node_id": "PRRC_kwDOABII585s6_oB",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818568903,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, please resolve this issue.",
      "created_at": "2024-11-04T09:08:10Z",
      "updated_at": "2024-11-04T09:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827404289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827404289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827406620",
      "pull_request_review_id": 2412525620,
      "id": 1827406620,
      "node_id": "PRRC_kwDOABII585s7AMc",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My impression was that there are very-very few `reviewers already familiar with the original approach` at the moment, so it's an extra burden for most to understand that former code you drop anyway.\r\nBut yeah it's ok. Perhaps a commit message saying it will be dropped will work.",
      "created_at": "2024-11-04T09:10:09Z",
      "updated_at": "2024-11-04T09:10:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827406620",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827406620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827414092",
      "pull_request_review_id": 2412537999,
      "id": 1827414092,
      "node_id": "PRRC_kwDOABII585s7CBM",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "e942f3a7493908988eea08640d87b2ae420c5eef",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e942f3a7493908988eea08640d87b2ae420c5eef\r\n\r\nThis entire paragraph currently seems to me more confusing than useful. I suggest dropping it altogether.",
      "created_at": "2024-11-04T09:16:03Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827414092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827414092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827416829",
      "pull_request_review_id": 2412537999,
      "id": 1827416829,
      "node_id": "PRRC_kwDOABII585s7Cr9",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 59,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "e942f3a7493908988eea08640d87b2ae420c5eef",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e942f3a7493908988eea08640d87b2ae420c5eef\r\n\r\nDuplicates the comment around `MAX_RECONSET_SIZE`. One of them we better dop.",
      "created_at": "2024-11-04T09:18:19Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827416829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827416829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827450458",
      "pull_request_review_id": 2412537999,
      "id": 1827450458,
      "node_id": "PRRC_kwDOABII585s7K5a",
      "diff_hunk": "@@ -5815,8 +5815,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "90059530379cf99cf4b82d664ad35c1ddefc3d07",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "90059530379cf99cf4b82d664ad35c1ddefc3d07\r\n\r\n\"Would fail\" is very confusing. \"Failed reconciliation\" will have a technical meaning in the latter commits. Here, i'd rather be more explicit \"two transactions mapped to the same short-id won't be announced between these two peers\".",
      "created_at": "2024-11-04T09:44:13Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827450458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827450458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5827,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827451812",
      "pull_request_review_id": 2412537999,
      "id": 1827451812,
      "node_id": "PRRC_kwDOABII585s7LOk",
      "diff_hunk": "@@ -5815,8 +5815,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "90059530379cf99cf4b82d664ad35c1ddefc3d07",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let's provide a hint why fanouting the descendants (or at least send a reader to where the dependency issue is explained better — we should have a one place explaining it)",
      "created_at": "2024-11-04T09:45:18Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827451812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827451812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827454877",
      "pull_request_review_id": 2412537999,
      "id": 1827454877,
      "node_id": "PRRC_kwDOABII585s7L-d",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);\n+                                        vInv.emplace_back(MSG_WTX, wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818555798,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The fix should be done in ` p2p: Deal with shortid collisions for reconciliation sets `, please move it if you retouch.",
      "created_at": "2024-11-04T09:47:41Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827454877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827454877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827463923",
      "pull_request_review_id": 2412537999,
      "id": 1827463923,
      "node_id": "PRRC_kwDOABII585s7OLz",
      "diff_hunk": "@@ -2155,10 +2176,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant\n+            // set. Otherwise it could be the case that the children were fanout before the parent\n+            // got reconciled.\n+            Assume(peer->m_wtxid_relay);\n+            const auto result = m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid));\n+            if (!result.m_succeeded) {\n+                // If the transactions fails to get into the set, we fanout\n+                invs_to_send.push_back(wtxid);\n+                // If the transaction fails because it collides with an existing one,\n+                // we also remove and fanout the conflict and all its descendants.\n+                // This is because our peer may have added the conflicting transaction\n+                // to its set, in which reconciliation of these two would fail\n+                if (const auto collision = result.m_conflict; collision.has_value()) {\n+                    CTxMemPool::setEntries descendants;\n+                    WITH_LOCK(m_mempool.cs, m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants));",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825659145,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Something worth documenting too :) Again, at least one place where we talk about handling dependencies.",
      "created_at": "2024-11-04T09:54:41Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827463923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827463923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827467881",
      "pull_request_review_id": 2412537999,
      "id": 1827467881,
      "node_id": "PRRC_kwDOABII585s7PJp",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825645357,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There could be mempool parents, but none are in reconciliation sets (say, they were already reconciled). For all these cases, it would be nice to not choose the peer sitting first in `m_states`?",
      "created_at": "2024-11-04T09:57:34Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827467881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827467881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827477226",
      "pull_request_review_id": 2412537999,
      "id": 1827477226,
      "node_id": "PRRC_kwDOABII585s7Rbq",
      "diff_hunk": "@@ -56,6 +56,13 @@ class TxReconciliationState\n      */\n     uint64_t m_k0, m_k1;\n \n+    /**\n+    * Set of transactions to be added to the reconciliation set on the next trickle. These are still unrequestable for\n+    * privacy reasons (to prevent transaction probing), transactions became available (moved to m_local_set) once they\n+    * would have been announced via fanout.",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943\r\n\r\nI think \"upon trickle\" or \"see `m_next_inv_send_time`\" is much less confusing.",
      "created_at": "2024-11-04T10:04:57Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827477226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827477226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827481810",
      "pull_request_review_id": 2412537999,
      "id": 1827481810,
      "node_id": "PRRC_kwDOABII585s7SjS",
      "diff_hunk": "@@ -75,7 +81,37 @@ class TxReconciliationState\n      */\n     std::map<uint32_t, Wtxid> m_short_id_mapping;\n \n-    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1), m_delayed_local_set(), m_local_set(0, m_delayed_local_set.hash_function()) {}\n+\n+    /**\n+    * Checks whether a transaction is already in the set. If `include_delayed` is set, the delayed set is also\n+    * checked. Otherwise, transactions are only looked up in the regular set.\n+    */\n+    bool ContainsTx(const Wtxid& wtxid, bool include_delayed)\n+    {\n+        bool found = m_local_set.find(wtxid) != m_local_set.end();\n+        if (include_delayed) {\n+            found |= m_delayed_local_set.find(wtxid) != m_delayed_local_set.end();\n+        }\n+\n+        return found;\n+    }\n+\n+    /**\n+     * Computes the size of the reconciliation set (including both available and delayed transactions)\n+     */\n+    size_t ReconSetSize()\n+    {\n+        return m_local_set.size() + m_delayed_local_set.size();\n+    }\n+\n+    bool RemoveFromSet(const Wtxid& wtxid)\n+    {\n+        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 53,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "in_reply_to_id": 1824285323,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I thought `size_t 0` will be cast to `bool false` on return, and just suggested the exact same behavior (1==true, 0==false) but without forcing the reader to think about casting and cause this exact confusion between us.\r\nAm i wrong?\r\n\r\n-------\r\n\r\nAhhh, so you saying `2==true` is also important? Then I'll be fine with explicit `return removed >= 1`, and comment that `2` should not normally happen.",
      "created_at": "2024-11-04T10:08:33Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827481810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827481810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827487325",
      "pull_request_review_id": 2412537999,
      "id": 1827487325,
      "node_id": "PRRC_kwDOABII585s7T5d",
      "diff_hunk": "@@ -237,33 +274,57 @@ class TxReconciliationTracker::Impl\n         // However, exploiting (2) should not prevent us from relaying certain transactions.\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n-        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+        auto set_size = peer_state->ReconSetSize();\n+        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n         // simply ignore it.\n-        if (peer_state->m_local_set.insert(wtxid).second) {\n+        if (peer_state->m_delayed_local_set.insert(wtxid).second) {\n             peer_state->m_short_id_mapping.emplace(short_id, wtxid);\n             LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \"\n                                                                         \"Now the set contains %i transactions.\\n\",\n-                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+                          wtxid.ToString(), peer_id, set_size + 1);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943\r\nThis is probably the most important log in the entire file, and I think it's better to distinguish two set sizes here (preferably other places the size is logged too).",
      "created_at": "2024-11-04T10:12:40Z",
      "updated_at": "2024-11-04T10:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1827487325",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827487325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828421634",
      "pull_request_review_id": 2414170386,
      "id": 1828421634,
      "node_id": "PRRC_kwDOABII585s-4AC",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 151,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll squash in the next force push",
      "created_at": "2024-11-04T21:36:08Z",
      "updated_at": "2024-11-04T21:36:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1828421634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828421634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841026397",
      "pull_request_review_id": 2434198140,
      "id": 1841026397,
      "node_id": "PRRC_kwDOABII585tu9Vd",
      "diff_hunk": "@@ -197,15 +195,52 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool HasCollisionInternal(TxReconciliationState *peer_state, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+\n+        short_id = peer_state->ComputeShortID(wtxid);\n+        const auto iter = peer_state->m_short_id_mapping.find(short_id);\n+\n+        if (iter != peer_state->m_short_id_mapping.end()) {\n+            collision = iter->second;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool HasCollision(NodeId peer_id, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818548647,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, looks like tests can be rewritten for it not to be needed. Will address in the next push",
      "created_at": "2024-11-13T19:12:32Z",
      "updated_at": "2024-11-13T19:12:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841026397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841026397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841164936",
      "pull_request_review_id": 2434436843,
      "id": 1841164936,
      "node_id": "PRRC_kwDOABII585tvfKI",
      "diff_hunk": "@@ -75,7 +81,37 @@ class TxReconciliationState\n      */\n     std::map<uint32_t, Wtxid> m_short_id_mapping;\n \n-    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1), m_delayed_local_set(), m_local_set(0, m_delayed_local_set.hash_function()) {}\n+\n+    /**\n+    * Checks whether a transaction is already in the set. If `include_delayed` is set, the delayed set is also\n+    * checked. Otherwise, transactions are only looked up in the regular set.\n+    */\n+    bool ContainsTx(const Wtxid& wtxid, bool include_delayed)\n+    {\n+        bool found = m_local_set.find(wtxid) != m_local_set.end();\n+        if (include_delayed) {\n+            found |= m_delayed_local_set.find(wtxid) != m_delayed_local_set.end();\n+        }\n+\n+        return found;\n+    }\n+\n+    /**\n+     * Computes the size of the reconciliation set (including both available and delayed transactions)\n+     */\n+    size_t ReconSetSize()\n+    {\n+        return m_local_set.size() + m_delayed_local_set.size();\n+    }\n+\n+    bool RemoveFromSet(const Wtxid& wtxid)\n+    {\n+        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 53,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "in_reply_to_id": 1824285323,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`2==true` would mean that we had the transaction in both places, which should never happen (I'd mean that a transaction is both ready and delayed at the same time).\r\n\r\nIf that were to happen in production for whatever reason, this would return false with the suggested changes, which may break something?",
      "created_at": "2024-11-13T21:10:57Z",
      "updated_at": "2024-11-13T21:10:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841164936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841164936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841223757",
      "pull_request_review_id": 2434534203,
      "id": 1841223757,
      "node_id": "PRRC_kwDOABII585tvthN",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825645357,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In that case, no transaction would be moved from the reconciliation set to `invs_to_send`, given no transaction would be removed. Therefore, the order wouldn't matter:\r\n\r\n```cpp\r\nauto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\r\nif (it != fanout_with_ancestors.end()) {\r\n    for (const auto wtxid: parents) {\r\n        m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\r\n        invs_to_send.push_back(wtxid);\r\n    }\r\n} else {\r\n    // If the peer is registered for set reconciliation, maybe pick it as fanout\r\n    fanout = m_txreconciliation->ShouldFanoutTo(peer_id, fanout_targets);\r\n}\r\n```\r\n\r\nThis may be a bit counterintuitive. I'll give some though and potentially re-design so it clearer",
      "created_at": "2024-11-13T21:51:49Z",
      "updated_at": "2024-11-13T21:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841223757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841223757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841243963",
      "pull_request_review_id": 2434566736,
      "id": 1841243963,
      "node_id": "PRRC_kwDOABII585tvyc7",
      "diff_hunk": "@@ -2155,10 +2176,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant\n+            // set. Otherwise it could be the case that the children were fanout before the parent\n+            // got reconciled.\n+            Assume(peer->m_wtxid_relay);\n+            const auto result = m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid));\n+            if (!result.m_succeeded) {\n+                // If the transactions fails to get into the set, we fanout\n+                invs_to_send.push_back(wtxid);\n+                // If the transaction fails because it collides with an existing one,\n+                // we also remove and fanout the conflict and all its descendants.\n+                // This is because our peer may have added the conflicting transaction\n+                // to its set, in which reconciliation of these two would fail\n+                if (const auto collision = result.m_conflict; collision.has_value()) {\n+                    CTxMemPool::setEntries descendants;\n+                    WITH_LOCK(m_mempool.cs, m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants));",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825659145,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-11-13T22:01:31Z",
      "updated_at": "2024-11-13T22:01:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841243963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841243963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841245788",
      "pull_request_review_id": 2434570096,
      "id": 1841245788,
      "node_id": "PRRC_kwDOABII585tvy5c",
      "diff_hunk": "@@ -5815,8 +5815,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "90059530379cf99cf4b82d664ad35c1ddefc3d07",
      "in_reply_to_id": 1827450458,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-11-13T22:02:36Z",
      "updated_at": "2024-11-13T22:02:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841245788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841245788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5827,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841245945",
      "pull_request_review_id": 2434570332,
      "id": 1841245945,
      "node_id": "PRRC_kwDOABII585tvy75",
      "diff_hunk": "@@ -5815,8 +5815,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "90059530379cf99cf4b82d664ad35c1ddefc3d07",
      "in_reply_to_id": 1827451812,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-11-13T22:02:46Z",
      "updated_at": "2024-11-13T22:02:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841245945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841245945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841676251",
      "pull_request_review_id": 2435218222,
      "id": 1841676251,
      "node_id": "PRRC_kwDOABII585txb_b",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825645357,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Say there is an in-mempool parent announced earlier, so it's not in any of the sets.\r\n`SortPeersByFewestParents` will return the same order as `m_states` (since all `parent_count` are 0),\r\nand `fanout_with_ancestors` will take first two after resize.\r\n\r\nThen for two peers (specifically, the first two from `m_states`) this code is executed:\r\n```\r\n                for (const auto wtxid: parents) {\r\n                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\r\n                    invs_to_send.push_back(wtxid);\r\n                }\r\n```\r\n\r\n`TryRemovingFromSet` will do nothing. But then `invs_to_send.push_back(wtxid);` is executed anyway. And always for the same two first peers from `m_states`. In other words, the first two are guaranteed to take the fanout in this case.",
      "created_at": "2024-11-14T07:12:27Z",
      "updated_at": "2024-11-14T07:12:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841676251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841676251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841679464",
      "pull_request_review_id": 2435223379,
      "id": 1841679464,
      "node_id": "PRRC_kwDOABII585txcxo",
      "diff_hunk": "@@ -2151,10 +2175,32 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ee46e21a5c913175415a192661b406b328209800\r\n\r\nFirst I thought why don't `fanout=true` here and handle it below. We can't do it because txid/wtxid difference (although we could have a `txid_or_wtxid` variable above....). But then, you certainly want to at least set `fanout=false` here, otherwise it remains true and added to `invs_to_send` twice (it's not critical but a bug still).",
      "created_at": "2024-11-14T07:16:04Z",
      "updated_at": "2024-11-14T07:16:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841679464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841679464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841697846",
      "pull_request_review_id": 2435251953,
      "id": 1841697846,
      "node_id": "PRRC_kwDOABII585txhQ2",
      "diff_hunk": "@@ -75,7 +81,37 @@ class TxReconciliationState\n      */\n     std::map<uint32_t, Wtxid> m_short_id_mapping;\n \n-    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1), m_delayed_local_set(), m_local_set(0, m_delayed_local_set.hash_function()) {}\n+\n+    /**\n+    * Checks whether a transaction is already in the set. If `include_delayed` is set, the delayed set is also\n+    * checked. Otherwise, transactions are only looked up in the regular set.\n+    */\n+    bool ContainsTx(const Wtxid& wtxid, bool include_delayed)\n+    {\n+        bool found = m_local_set.find(wtxid) != m_local_set.end();\n+        if (include_delayed) {\n+            found |= m_delayed_local_set.find(wtxid) != m_delayed_local_set.end();\n+        }\n+\n+        return found;\n+    }\n+\n+    /**\n+     * Computes the size of the reconciliation set (including both available and delayed transactions)\n+     */\n+    size_t ReconSetSize()\n+    {\n+        return m_local_set.size() + m_delayed_local_set.size();\n+    }\n+\n+    bool RemoveFromSet(const Wtxid& wtxid)\n+    {\n+        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 53,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "in_reply_to_id": 1824285323,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Probably a taste thing. I think `auto` should be used only when it's obvious what type it is.\r\n\r\nHere there are two non-obvious occasions:\r\n- `auto x = bool + bool` resulting in x=2.\r\n- casting 2 to bool for the result.\r\n\r\nI won't insist but i think verbose types are better here. Feel free to close.",
      "created_at": "2024-11-14T07:33:55Z",
      "updated_at": "2024-11-14T07:33:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1841697846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841697846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842711569",
      "pull_request_review_id": 2436899798,
      "id": 1842711569,
      "node_id": "PRRC_kwDOABII585t1YwR",
      "diff_hunk": "@@ -139,6 +139,12 @@ class TxReconciliationTracker\n      */\n     bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n                         size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay);\n+\n+    /**\n+     * Returns a collections of node ids sorted by how many parents the peer has in its reconciliation set",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818583090,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've reworked the docs for this",
      "created_at": "2024-11-14T18:26:32Z",
      "updated_at": "2024-11-14T18:26:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842711569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842711569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842776153",
      "pull_request_review_id": 2437012100,
      "id": 1842776153,
      "node_id": "PRRC_kwDOABII585t1ohZ",
      "diff_hunk": "@@ -523,7 +523,7 @@ class PeerManagerImpl final : public PeerManager\n     PeerManagerInfo GetInfo() const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     std::pair<size_t, size_t> GetFanoutPeersCount() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818575030,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I misunderstood the use of ForceRelay here. Will amend it so it applied to both",
      "created_at": "2024-11-14T19:23:05Z",
      "updated_at": "2024-11-14T19:23:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842776153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842776153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842808065",
      "pull_request_review_id": 2437065982,
      "id": 1842808065,
      "node_id": "PRRC_kwDOABII585t1wUB",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825645357,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, you're right. I've been looking at this being conditional to `m_txreconciliation->TryRemovingFromSet(peer_id, wtxid)`, which is what happens with the descendants, but here it is unconditional.\r\n\r\nIt should be added only if `TryRemovingFromSet` succeeds, and therefore the ordering in case there are no ancestors won't matter. I'll also add some comments regarding that.\r\n\r\nNotice the point of this is not to add something to `invs_to_send` but rather to move it from `m_txreconciliation` to `invs_to_send`, otherwise things would be sent more than once (or potentially captured by the bloom filters before hand, but still not optimal)",
      "created_at": "2024-11-14T19:49:57Z",
      "updated_at": "2024-11-14T20:17:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842808065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842808065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842810444",
      "pull_request_review_id": 2437069698,
      "id": 1842810444,
      "node_id": "PRRC_kwDOABII585t1w5M",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 82,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818598067,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure I follow how the first comment is an issue, but I do agree with the second. This needs to be conditional to `TryRemovingFromSet` succeeding.",
      "created_at": "2024-11-14T19:52:00Z",
      "updated_at": "2024-11-14T19:52:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842810444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842810444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842841578",
      "pull_request_review_id": 2437121955,
      "id": 1842841578,
      "node_id": "PRRC_kwDOABII585t14fq",
      "diff_hunk": "@@ -75,7 +81,37 @@ class TxReconciliationState\n      */\n     std::map<uint32_t, Wtxid> m_short_id_mapping;\n \n-    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+    TxReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1), m_delayed_local_set(), m_local_set(0, m_delayed_local_set.hash_function()) {}\n+\n+    /**\n+    * Checks whether a transaction is already in the set. If `include_delayed` is set, the delayed set is also\n+    * checked. Otherwise, transactions are only looked up in the regular set.\n+    */\n+    bool ContainsTx(const Wtxid& wtxid, bool include_delayed)\n+    {\n+        bool found = m_local_set.find(wtxid) != m_local_set.end();\n+        if (include_delayed) {\n+            found |= m_delayed_local_set.find(wtxid) != m_delayed_local_set.end();\n+        }\n+\n+        return found;\n+    }\n+\n+    /**\n+     * Computes the size of the reconciliation set (including both available and delayed transactions)\n+     */\n+    size_t ReconSetSize()\n+    {\n+        return m_local_set.size() + m_delayed_local_set.size();\n+    }\n+\n+    bool RemoveFromSet(const Wtxid& wtxid)\n+    {\n+        auto r = m_local_set.erase(wtxid) + m_delayed_local_set.erase(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 53,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "in_reply_to_id": 1824285323,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is fair. I've updated it to make it more explicit (and readable)",
      "created_at": "2024-11-14T20:20:15Z",
      "updated_at": "2024-11-14T20:29:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842841578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842841578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842867828",
      "pull_request_review_id": 2437168215,
      "id": 1842867828,
      "node_id": "PRRC_kwDOABII585t1-50",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "d2f260507279b1edd6c0f55d02c7ae2e598b3585",
      "in_reply_to_id": 1818702420,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-11-14T20:46:34Z",
      "updated_at": "2024-11-14T20:46:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842867828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842867828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842870647",
      "pull_request_review_id": 2437172597,
      "id": 1842870647,
      "node_id": "PRRC_kwDOABII585t1_l3",
      "diff_hunk": "@@ -376,6 +377,38 @@ class TxReconciliationTracker::Impl\n \n         return IsFanoutTarget(wtxid, peer_id, peer_state->m_we_initiate, n);\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fd7c35a22669d440afe182a153bed28fd326b51f",
      "in_reply_to_id": 1825645357,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Made the move dependant on `TryRemovingFromSet`",
      "created_at": "2024-11-14T20:49:16Z",
      "updated_at": "2024-11-26T15:42:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842870647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842870647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842873615",
      "pull_request_review_id": 2437177209,
      "id": 1842873615,
      "node_id": "PRRC_kwDOABII585t2AUP",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "e942f3a7493908988eea08640d87b2ae420c5eef",
      "in_reply_to_id": 1827414092,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The whole thing from L151-L160?",
      "created_at": "2024-11-14T20:52:07Z",
      "updated_at": "2024-11-14T20:52:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842873615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842873615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842875471",
      "pull_request_review_id": 2437180153,
      "id": 1842875471,
      "node_id": "PRRC_kwDOABII585t2AxP",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 59,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "e942f3a7493908988eea08640d87b2ae420c5eef",
      "in_reply_to_id": 1827416829,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm guessing this is related to https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842873615, in which case I'll drop that",
      "created_at": "2024-11-14T20:53:58Z",
      "updated_at": "2024-11-14T20:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842875471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842875471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842897353",
      "pull_request_review_id": 2437215427,
      "id": 1842897353,
      "node_id": "PRRC_kwDOABII585t2GHJ",
      "diff_hunk": "@@ -237,33 +274,57 @@ class TxReconciliationTracker::Impl\n         // However, exploiting (2) should not prevent us from relaying certain transactions.\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n-        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+        auto set_size = peer_state->ReconSetSize();\n+        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n         // simply ignore it.\n-        if (peer_state->m_local_set.insert(wtxid).second) {\n+        if (peer_state->m_delayed_local_set.insert(wtxid).second) {\n             peer_state->m_short_id_mapping.emplace(short_id, wtxid);\n             LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \"\n                                                                         \"Now the set contains %i transactions.\\n\",\n-                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+                          wtxid.ToString(), peer_id, set_size + 1);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943",
      "in_reply_to_id": 1827487325,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I changed `ReconSetSize` to return a tuple, and updated this to read:\r\n\r\n```\r\n \"Now the set contains %i reconcilable transactions (plus %i delayed transactions).\\n\",\r\n```",
      "created_at": "2024-11-14T21:16:00Z",
      "updated_at": "2024-11-14T21:16:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842897353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842897353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842903990",
      "pull_request_review_id": 2437225964,
      "id": 1842903990,
      "node_id": "PRRC_kwDOABII585t2Hu2",
      "diff_hunk": "@@ -237,33 +274,57 @@ class TxReconciliationTracker::Impl\n         // However, exploiting (2) should not prevent us from relaying certain transactions.\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n-        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+        auto set_size = peer_state->ReconSetSize();\n+        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n         // simply ignore it.\n-        if (peer_state->m_local_set.insert(wtxid).second) {\n+        if (peer_state->m_delayed_local_set.insert(wtxid).second) {\n             peer_state->m_short_id_mapping.emplace(short_id, wtxid);\n             LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \"\n                                                                         \"Now the set contains %i transactions.\\n\",\n-                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+                          wtxid.ToString(), peer_id, set_size + 1);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943",
      "in_reply_to_id": 1827487325,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have also applied the same logic when removing",
      "created_at": "2024-11-14T21:22:21Z",
      "updated_at": "2024-11-14T21:22:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842903990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842903990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842913498",
      "pull_request_review_id": 2437241134,
      "id": 1842913498,
      "node_id": "PRRC_kwDOABII585t2KDa",
      "diff_hunk": "@@ -2151,10 +2175,32 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "in_reply_to_id": 1841679464,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure if this comment only applied before https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842870647. But I think this is not currently the case.\r\n\r\nHere we are only adding the parents. Leaving `fanout=true` triggers adding the actual transaction `RelayTransaction` was called with in the following `if (fanout)` block.\r\n\r\nWe could also add it here, but it would involve adding another boolean to skip the `if (fanout)` block, since we need to populate `m_tx_inventory_to_send` with data from `invs_to_send` which happens right after",
      "created_at": "2024-11-14T21:32:06Z",
      "updated_at": "2024-11-14T21:32:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1842913498",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842913498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857859302",
      "pull_request_review_id": 2460468786,
      "id": 1857859302,
      "node_id": "PRRC_kwDOABII585uvK7m",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "e942f3a7493908988eea08640d87b2ae420c5eef",
      "in_reply_to_id": 1827414092,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment is related to L156-160.\r\nL151-155 could be dropped for a different reason (redundancy with the `MAX_RECONSET_SIZE` comment)",
      "created_at": "2024-11-26T06:13:04Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857859302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857859302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857868518",
      "pull_request_review_id": 2460468786,
      "id": 1857868518,
      "node_id": "PRRC_kwDOABII585uvNLm",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1dce9aedc59eba2b623c7785f59430a586fbd833\r\n\r\nthe variable `found` could be dropped",
      "created_at": "2024-11-26T06:23:27Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857868518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857868518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857872449",
      "pull_request_review_id": 2460468786,
      "id": 1857872449,
      "node_id": "PRRC_kwDOABII585uvOJB",
      "diff_hunk": "@@ -523,7 +523,7 @@ class PeerManagerImpl final : public PeerManager\n     PeerManagerInfo GetInfo() const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     std::pair<size_t, size_t> GetFanoutPeersCount() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818575030,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's the plan? I still think `force_relay` is unnecessary here.",
      "created_at": "2024-11-26T06:27:12Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857872449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857872449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857883023",
      "pull_request_review_id": 2460468786,
      "id": 1857883023,
      "node_id": "PRRC_kwDOABII585uvQuP",
      "diff_hunk": "@@ -2151,10 +2175,33 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, wtxid)) {\n+                        invs_to_send.push_back(wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0092f70314b8d59b41ff4bd2bc15a71f954668d4\r\n\r\nConsider `fanout=false` because the peer has too many parents (cut the tail from `fanout_with_ancestors`).\r\nNow, we fail to add a transaction to the set (whatever reason, say set too full), and we're now going to flood a child while reconciling the parents again?\r\n\r\nPerhaps `AddToSet` result could be handled more carefully instead (or have a todo/comment, this is a corner case of a corner case of course). ",
      "created_at": "2024-11-26T06:37:52Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857883023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857883023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857884471",
      "pull_request_review_id": 2460468786,
      "id": 1857884471,
      "node_id": "PRRC_kwDOABII585uvRE3",
      "diff_hunk": "@@ -2151,10 +2175,33 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, wtxid)) {\n+                        invs_to_send.push_back(wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        }\n+\n+        for (const auto& hash : invs_to_send) {\n+            if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n+                tx_relay->m_tx_inventory_to_send.insert(hash);\n+            }\n+        }\n+        invs_to_send.clear();",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 108,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/0092f70314b8d59b41ff4bd2bc15a71f954668d4\r\n\r\nconsider defining this variable inside the loop rather than cleaning it after each iteration?",
      "created_at": "2024-11-26T06:39:18Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857884471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857884471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857898012",
      "pull_request_review_id": 2460468786,
      "id": 1857898012,
      "node_id": "PRRC_kwDOABII585uvUYc",
      "diff_hunk": "@@ -2151,10 +2175,33 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, wtxid)) {\n+                        invs_to_send.push_back(wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": 1857883023,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is slightly changed later in 5996d473434d364cff937ae89ffd95cd09c5d1a7. `AddToSetResult::Failed` still not handled though?",
      "created_at": "2024-11-26T06:51:38Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857898012",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857898012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857918168",
      "pull_request_review_id": 2460468786,
      "id": 1857918168,
      "node_id": "PRRC_kwDOABII585uvZTY",
      "diff_hunk": "@@ -381,9 +445,9 @@ class TxReconciliationTracker::Impl\n         }\n \n         for (auto &[parent_count, peer_id]: parents_by_peer) {\n-            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n             for (const auto& wtxid: parents) {\n-                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {\n+                if (state.ContainsTx(wtxid, /*include_delayed=*/true)) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 138,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "840a4e14f2d833717c87a54ec2707a92d5131ada",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "840a4e14f2d833717c87a54ec2707a92d5131ada\r\n\r\nbeen thinking about the use of a delayed set here.\r\n\r\nWe apply the delay only on addition, but not on fanouting parents (or counting them), neither on removing stuff from the sets (say at receiving a transaction).\r\n\r\nFor me the choice is pretty arbitrary (and probably fine to save the code complexity for this rare corner case), but perhaps we would benefit from better documentation around it.",
      "created_at": "2024-11-26T07:05:09Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857918168",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857918168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857927041",
      "pull_request_review_id": 2460468786,
      "id": 1857927041,
      "node_id": "PRRC_kwDOABII585uvbeB",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        // Merge both vectors and return\n+        in_fanout_targets.insert(in_fanout_targets.end(), out_fanout_targets.begin(), out_fanout_targets.end());\n+\n+        return in_fanout_targets;\n     }\n \n-    /*\n-     * TODO. This is currently not marked const, because it would require adding a const version\n-     * of GetRegisteredPeerState. However, this function becomes non-const in the next commit anyway\n-     * due to caching. Thus, we can save us adding that extra function for now.\n-     */\n-    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n-                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool ShouldFanoutTo(NodeId peer_id, std::vector<NodeId> &fanout_targets) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 103,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825\r\n\r\nthis wrapper is not needed anymore. The Registered check already happens at the caller site. Just drop it and expose `GetFanoutTargets`?",
      "created_at": "2024-11-26T07:10:01Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1857927041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857927041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 416,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858243236",
      "pull_request_review_id": 2460468786,
      "id": 1858243236,
      "node_id": "PRRC_kwDOABII585uwoqk",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\n        // TODO: now rename sorted_inbounds to weighted_inbounds\r\n        std::vector<NodeId> fanout_targets(inbounds_target_size + outbounds_target_size);\r\n        auto collect_fanout_targets = [&fanout_targets](std::vector<std::pair<uint64_t, NodeId>> weighted_peers, const size_t target_size) {\r\n            const size_t result_size = std::min(target_size, weighted_peers.size());\r\n            if (result_size == 0) return;\r\n            std::nth_element(weighted_peers.begin(), weighted_peers.begin() + result_size, weighted_peers.end());\r\n            for_each(weighted_peers.begin(), weighted_peers.begin() + result_size,\r\n                    [&fanout_targets](auto& keyed_peer) { fanout_targets.push_back(keyed_peer.second); });\r\n        };\r\n\r\n        collect_fanout_targets(sorted_inbounds, inbounds_target_size);\r\n        collect_fanout_targets(sorted_outbounds, outbounds_target_size);\r\n        return fanout_targets;\r\n```",
      "created_at": "2024-11-26T10:44:16Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858243236",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858243236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858312000",
      "pull_request_review_id": 2460468786,
      "id": 1858312000,
      "node_id": "PRRC_kwDOABII585uw5dA",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 57,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\n        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\r\n            uint64_t hash_key = randomizer.Write(node_id).Finalize();\r\n            weighted_peers.emplace_back(hash_key, node_id);\r\n        };\r\n\r\n        for (const auto& [node_id, op_peer_state]: m_states) {\r\n            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\r\n            if (peer_state) {\r\n                if (peer_state->m_we_initiate) {\r\n                    assign_key(*peer_state, node_id, deterministic_randomizer_out, sorted_outbounds);\r\n                } else {\r\n                    assign_key(*peer_state, node_id, deterministic_randomizer_in, sorted_inbounds);\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\nvery subjectively a little cleaner :)",
      "created_at": "2024-11-26T11:33:25Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858312000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858312000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858323811",
      "pull_request_review_id": 2460468786,
      "id": 1858323811,
      "node_id": "PRRC_kwDOABII585uw8Vj",
      "diff_hunk": "@@ -2135,12 +2138,33 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount()\n     return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 59,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Better check if the size is not 1 already? It's currently safe, but could cause bugs in the future.",
      "created_at": "2024-11-26T11:42:04Z",
      "updated_at": "2024-11-26T11:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858323811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858323811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858826260",
      "pull_request_review_id": 2462013889,
      "id": 1858826260,
      "node_id": "PRRC_kwDOABII585uy3AU",
      "diff_hunk": "@@ -523,7 +523,7 @@ class PeerManagerImpl final : public PeerManager\n     PeerManagerInfo GetInfo() const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     std::pair<size_t, size_t> GetFanoutPeersCount() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818575030,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yep, I'm planning to drop it",
      "created_at": "2024-11-26T16:07:11Z",
      "updated_at": "2024-11-26T16:07:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858826260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858826260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858826625",
      "pull_request_review_id": 2462014484,
      "id": 1858826625,
      "node_id": "PRRC_kwDOABII585uy3GB",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm planning to simulate both cases and report back",
      "created_at": "2024-11-26T16:07:26Z",
      "updated_at": "2024-11-26T16:07:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858826625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858826625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858828041",
      "pull_request_review_id": 2462016691,
      "id": 1858828041,
      "node_id": "PRRC_kwDOABII585uy3cJ",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 82,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818598067,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@naumenkogs can this be resolved?",
      "created_at": "2024-11-26T16:08:18Z",
      "updated_at": "2024-11-26T16:08:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858828041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858828041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858829100",
      "pull_request_review_id": 2462018504,
      "id": 1858829100,
      "node_id": "PRRC_kwDOABII585uy3ss",
      "diff_hunk": "@@ -237,33 +274,57 @@ class TxReconciliationTracker::Impl\n         // However, exploiting (2) should not prevent us from relaying certain transactions.\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n-        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+        auto set_size = peer_state->ReconSetSize();\n+        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n         // simply ignore it.\n-        if (peer_state->m_local_set.insert(wtxid).second) {\n+        if (peer_state->m_delayed_local_set.insert(wtxid).second) {\n             peer_state->m_short_id_mapping.emplace(short_id, wtxid);\n             LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \"\n                                                                         \"Now the set contains %i transactions.\\n\",\n-                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+                          wtxid.ToString(), peer_id, set_size + 1);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943",
      "in_reply_to_id": 1827487325,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can this be resolved?",
      "created_at": "2024-11-26T16:08:58Z",
      "updated_at": "2024-11-26T16:08:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858829100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858829100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858866659",
      "pull_request_review_id": 2462080832,
      "id": 1858866659,
      "node_id": "PRRC_kwDOABII585uzA3j",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That commit is from an old revision",
      "created_at": "2024-11-26T16:31:38Z",
      "updated_at": "2024-11-26T16:31:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1858866659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858866659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859111798",
      "pull_request_review_id": 2462493434,
      "id": 1859111798,
      "node_id": "PRRC_kwDOABII585uz8t2",
      "diff_hunk": "@@ -2151,10 +2175,33 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, wtxid)) {\n+                        invs_to_send.push_back(wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": 1857883023,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, that's right. In the current revision, if the set is full and the given transaction has some ancestors, the children will be flooded while the parents will be reconciled, which may cause orphans.\r\n\r\nI think we could handle this at the same level that we handled `fanout_with_ancestors`:\r\n\r\n- Fanout to peers that have ancestors and have a full set\r\n- Fanout to peers that have the least amount of ancestors\r\n\r\nHowever, this will still be an issue in some cases, given we only select a subset of peers to fanout to when these conditions hold (currently 2, but let's say `n`). If we do not fanout to all peers that fall under these conditions, there will always be some that will receive parents and children using different approaches, which may cause orphans. However, I think it is undesirable to fanout to all matches in this situation.\r\n\r\nThis raises the question, is it worth the added complexity, or should we add a comment acknowledging that this can be the case, but that we expect it to happen really infrequently? ",
      "created_at": "2024-11-26T19:19:56Z",
      "updated_at": "2024-11-26T19:19:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859111798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859111798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859182705",
      "pull_request_review_id": 2462607651,
      "id": 1859182705,
      "node_id": "PRRC_kwDOABII585u0OBx",
      "diff_hunk": "@@ -381,9 +445,9 @@ class TxReconciliationTracker::Impl\n         }\n \n         for (auto &[parent_count, peer_id]: parents_by_peer) {\n-            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n             for (const auto& wtxid: parents) {\n-                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {\n+                if (state.ContainsTx(wtxid, /*include_delayed=*/true)) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 138,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "840a4e14f2d833717c87a54ec2707a92d5131ada",
      "in_reply_to_id": 1857918168,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I'm not following here. We do apply the delayed set both on addition (`AddToSet`), deletion (`RemoveFromSet`), and when counting parents (this bit of code is part of the parent sorting).",
      "created_at": "2024-11-26T20:24:01Z",
      "updated_at": "2024-11-26T20:24:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859182705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859182705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859187630",
      "pull_request_review_id": 2462615266,
      "id": 1859187630,
      "node_id": "PRRC_kwDOABII585u0POu",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        // Merge both vectors and return\n+        in_fanout_targets.insert(in_fanout_targets.end(), out_fanout_targets.begin(), out_fanout_targets.end());\n+\n+        return in_fanout_targets;\n     }\n \n-    /*\n-     * TODO. This is currently not marked const, because it would require adding a const version\n-     * of GetRegisteredPeerState. However, this function becomes non-const in the next commit anyway\n-     * due to caching. Thus, we can save us adding that extra function for now.\n-     */\n-    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n-                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool ShouldFanoutTo(NodeId peer_id, std::vector<NodeId> &fanout_targets) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 103,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": 1857927041,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. This also implies dropping the bench for it, which honestly I do not think is as useful anymore now that we do not have a cache",
      "created_at": "2024-11-26T20:29:05Z",
      "updated_at": "2024-11-26T20:29:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859187630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859187630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 416,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859217858",
      "pull_request_review_id": 2462663830,
      "id": 1859217858,
      "node_id": "PRRC_kwDOABII585u0WnC",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": 1858243236,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is slightly harder to follow, but I like that the collections are only sorted up to some point, so I'll take it. Instead of using the `std::min`, I've added two `Assume` when defining `{outbounds, inbounds}_target_size` to ensure that the targets are never bigger than the sets the pull from, since this should never be the case",
      "created_at": "2024-11-26T21:00:36Z",
      "updated_at": "2024-11-26T21:00:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859217858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859217858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859251110",
      "pull_request_review_id": 2462711275,
      "id": 1859251110,
      "node_id": "PRRC_kwDOABII585u0eum",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 57,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": 1858312000,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it makes a huge difference, but I'll take it -> [4b4d99f](https://github.com/bitcoin/bitcoin/pull/30116/commits/4b4d99fb2df2c60a2214487cec627bc560f50f53)",
      "created_at": "2024-11-26T21:29:13Z",
      "updated_at": "2024-11-26T21:29:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859251110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859251110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859251614",
      "pull_request_review_id": 2462712150,
      "id": 1859251614,
      "node_id": "PRRC_kwDOABII585u0e2e",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": 1858243236,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Covered in [4b4d99f](https://github.com/bitcoin/bitcoin/pull/30116/commits/4b4d99fb2df2c60a2214487cec627bc560f50f53)",
      "created_at": "2024-11-26T21:29:48Z",
      "updated_at": "2024-11-26T21:29:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859251614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859251614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859252466",
      "pull_request_review_id": 2462713580,
      "id": 1859252466,
      "node_id": "PRRC_kwDOABII585u0fDy",
      "diff_hunk": "@@ -2151,10 +2175,32 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "in_reply_to_id": 1841679464,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this still an issue?",
      "created_at": "2024-11-26T21:30:43Z",
      "updated_at": "2024-11-26T21:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859252466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859252466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859253278",
      "pull_request_review_id": 2462714748,
      "id": 1859253278,
      "node_id": "PRRC_kwDOABII585u0fQe",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 63,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "e942f3a7493908988eea08640d87b2ae420c5eef",
      "in_reply_to_id": 1827414092,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Covered in the last push",
      "created_at": "2024-11-26T21:31:33Z",
      "updated_at": "2024-11-26T21:31:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859253278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859253278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859253662",
      "pull_request_review_id": 2462715431,
      "id": 1859253662,
      "node_id": "PRRC_kwDOABII585u0fWe",
      "diff_hunk": "@@ -523,7 +523,7 @@ class PeerManagerImpl final : public PeerManager\n     PeerManagerInfo GetInfo() const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     std::pair<size_t, size_t> GetFanoutPeersCount() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818575030,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Covered in the last push",
      "created_at": "2024-11-26T21:32:02Z",
      "updated_at": "2024-11-26T21:32:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859253662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859253662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859254738",
      "pull_request_review_id": 2462717111,
      "id": 1859254738,
      "node_id": "PRRC_kwDOABII585u0fnS",
      "diff_hunk": "@@ -2135,12 +2138,33 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount()\n     return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 59,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": 1858323811,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is just temporary. It should not be merged like this. I'll leave it open once we decide on a clear way to trim",
      "created_at": "2024-11-26T21:33:12Z",
      "updated_at": "2024-11-26T21:33:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1859254738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859254738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860025340",
      "pull_request_review_id": 2464032070,
      "id": 1860025340,
      "node_id": "PRRC_kwDOABII585u3bv8",
      "diff_hunk": "@@ -381,9 +445,9 @@ class TxReconciliationTracker::Impl\n         }\n \n         for (auto &[parent_count, peer_id]: parents_by_peer) {\n-            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n             for (const auto& wtxid: parents) {\n-                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {\n+                if (state.ContainsTx(wtxid, /*include_delayed=*/true)) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 138,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "840a4e14f2d833717c87a54ec2707a92d5131ada",
      "in_reply_to_id": 1857918168,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I mean the delay specifically, not the set. If we talk about an abstract \"reconciliation set\" (which is a combination of two), you apply the delay for an addition, but not for the removal action.",
      "created_at": "2024-11-27T06:45:23Z",
      "updated_at": "2024-11-27T06:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860025340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860025340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860061020",
      "pull_request_review_id": 2464088658,
      "id": 1860061020,
      "node_id": "PRRC_kwDOABII585u3kdc",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\n        std::multimap<uint16_t, NodeId> parents_by_peer;\r\n        for (const auto &[peer_id, state_or_salt]: m_states) {\r\n            if (const auto state = std::get_if<TxReconciliationState>(&state_or_salt)) {\r\n                const size_t parent_count = std::count_if(parents.begin(), parents.end(),\r\n                       [=](const auto& wtxid){return state->m_local_set.find(wtxid) != state->m_local_set.end();});\r\n                parents_by_peer.insert(std::make_pair(parent_count, peer_id));\r\n            }\r\n        }\r\n\r\n        std::vector<NodeId> sorted_peers;\r\n        sorted_peers.reserve(parents_by_peer.size());\r\n        for (const auto &[_, peer_id]: parents_by_peer) {\r\n            sorted_peers.emplace_back(peer_id);\r\n        }\r\n        return sorted_peers;\r\n```",
      "created_at": "2024-11-27T07:21:52Z",
      "updated_at": "2024-11-27T08:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860061020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860061020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860064472",
      "pull_request_review_id": 2464088658,
      "id": 1860064472,
      "node_id": "PRRC_kwDOABII585u3lTY",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Multimap is ordered by key, and for same-key (same `parent_count`) since c++11 the order is consistent ([documented here](https://stackoverflow.com/a/13337612)). Feel free to include this as a comment, although I'm not even sure we care about the same exact output of multiple `SortPeersByFewestParents` calls.\r\n\r\n(also it depends on the consistent ordering of `m_states` iterator too, which could be documented along the same lines, here and elsewhere it is iterated over)",
      "created_at": "2024-11-27T07:25:03Z",
      "updated_at": "2024-11-27T08:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860064472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860064472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860077605",
      "pull_request_review_id": 2464088658,
      "id": 1860077605,
      "node_id": "PRRC_kwDOABII585u3ogl",
      "diff_hunk": "@@ -201,9 +210,17 @@ class TxReconciliationTracker::Impl\n     {\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n-        if (m_states.erase(peer_id)) {\n-            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Forget txreconciliation state of peer=%d\\n\", peer_id);\n+        const auto peer = m_states.find(peer_id);\n+        if (peer == m_states.end()) return;\n+\n+        const auto registered = std::get_if<TxReconciliationState>(&peer->second);\n+        if (registered && !registered->m_we_initiate) {\n+            Assert(m_inbounds_count > 0);\n+            --m_inbounds_count;\n         }\n+\n+        m_states.erase(peer);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "8a73b1ca91b1ff47b56451ca4074f73ef71b9f79",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "8a73b1ca91b1ff47b56451ca4074f73ef71b9f79\r\n\r\nMind handling the result of erasure here? Either `Assert/Assume` or `if`",
      "created_at": "2024-11-27T07:35:15Z",
      "updated_at": "2024-11-27T08:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860077605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860077605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 334,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860106036",
      "pull_request_review_id": 2464088658,
      "id": 1860106036,
      "node_id": "PRRC_kwDOABII585u3vc0",
      "diff_hunk": "@@ -347,79 +347,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n-        }\n-        return false;\n+        // Make sure we never select more targets than we can\n+        Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "4b4d99fb2df2c60a2214487cec627bc560f50f53\r\n\r\nthis could be moved into the lambda :)",
      "created_at": "2024-11-27T07:48:27Z",
      "updated_at": "2024-11-27T08:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860106036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860106036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860131262",
      "pull_request_review_id": 2464088658,
      "id": 1860131262,
      "node_id": "PRRC_kwDOABII585u31m-",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(this could also be done in 4b4d99fb2df2c60a2214487cec627bc560f50f53 `GetFanoutTargets`, although it's not that much an improvement over there)",
      "created_at": "2024-11-27T07:58:30Z",
      "updated_at": "2024-11-27T08:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860131262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860131262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860143301",
      "pull_request_review_id": 2464088658,
      "id": 1860143301,
      "node_id": "PRRC_kwDOABII585u34jF",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        // Merge both vectors and return\n+        in_fanout_targets.insert(in_fanout_targets.end(), out_fanout_targets.begin(), out_fanout_targets.end());\n+\n+        return in_fanout_targets;\n     }\n \n-    /*\n-     * TODO. This is currently not marked const, because it would require adding a const version\n-     * of GetRegisteredPeerState. However, this function becomes non-const in the next commit anyway\n-     * due to caching. Thus, we can save us adding that extra function for now.\n-     */\n-    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n-                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool ShouldFanoutTo(NodeId peer_id, std::vector<NodeId> &fanout_targets) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 103,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": 1857927041,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, and perhaps good time to squash this into eb2b19d2c237f2cc7b4ff3e7cefec52a37eb24b3, it got much stale by now.",
      "created_at": "2024-11-27T08:00:48Z",
      "updated_at": "2024-11-27T08:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860143301",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860143301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 416,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860146357",
      "pull_request_review_id": 2464199716,
      "id": 1860146357,
      "node_id": "PRRC_kwDOABII585u35S1",
      "diff_hunk": "@@ -237,33 +274,57 @@ class TxReconciliationTracker::Impl\n         // However, exploiting (2) should not prevent us from relaying certain transactions.\n         //\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\n-        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n+        auto set_size = peer_state->ReconSetSize();\n+        if (set_size >= MAX_RECONSET_SIZE) return AddToSetResult::Failed();\n \n         // The caller currently keeps track of the per-peer transaction announcements, so it\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\n         // simply ignore it.\n-        if (peer_state->m_local_set.insert(wtxid).second) {\n+        if (peer_state->m_delayed_local_set.insert(wtxid).second) {\n             peer_state->m_short_id_mapping.emplace(short_id, wtxid);\n             LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \"\n                                                                         \"Now the set contains %i transactions.\\n\",\n-                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+                          wtxid.ToString(), peer_id, set_size + 1);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c790aa0e7ebfcf0b03b4d0ef5fcc0ddfa4199943",
      "in_reply_to_id": 1827487325,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes",
      "created_at": "2024-11-27T08:01:41Z",
      "updated_at": "2024-11-27T08:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860146357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860146357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860154761",
      "pull_request_review_id": 2464211795,
      "id": 1860154761,
      "node_id": "PRRC_kwDOABII585u37WJ",
      "diff_hunk": "@@ -2151,10 +2175,32 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "in_reply_to_id": 1841679464,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The issue is re-defining `wtxid` (for `parent_wtxid`) while it's already defined as a transaction-in-question :)\r\nThat was the source in my confusion originally",
      "created_at": "2024-11-27T08:04:27Z",
      "updated_at": "2024-11-27T08:04:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1860154761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1860154761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1861056105",
      "pull_request_review_id": 2465659656,
      "id": 1861056105,
      "node_id": "PRRC_kwDOABII585u7XZp",
      "diff_hunk": "@@ -2151,10 +2175,32 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "in_reply_to_id": 1841679464,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ohh I see, I'll rename that to `parent_wtxid` for the internal context",
      "created_at": "2024-11-27T17:46:19Z",
      "updated_at": "2024-11-27T17:46:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1861056105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1861056105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868406931",
      "pull_request_review_id": 2476817478,
      "id": 1868406931,
      "node_id": "PRRC_kwDOABII585vXaCT",
      "diff_hunk": "@@ -2151,10 +2175,33 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, wtxid)) {\n+                        invs_to_send.push_back(wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "0092f70314b8d59b41ff4bd2bc15a71f954668d4",
      "in_reply_to_id": 1857883023,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added a comment for this instead of making a full set part of the sorting criteria. This should not happen under normal circumstances provided the set size is defined to account for way over the expected traffic between reconciliations. A peer hitting the limit is likely to be either broken or an attacker, and I don't think we should be catering to them (nor making the logic more complex based on that)\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/30116/commits/f51e36057e509356890a70ced3a7209f98e8db4f",
      "created_at": "2024-12-03T21:45:13Z",
      "updated_at": "2024-12-03T21:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1868406931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868406931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868408445",
      "pull_request_review_id": 2476819921,
      "id": 1868408445,
      "node_id": "PRRC_kwDOABII585vXaZ9",
      "diff_hunk": "@@ -2151,10 +2175,32 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "ee46e21a5c913175415a192661b406b328209800",
      "in_reply_to_id": 1841679464,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/pull/30116/commits/f51e36057e509356890a70ced3a7209f98e8db4f",
      "created_at": "2024-12-03T21:46:48Z",
      "updated_at": "2024-12-03T21:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1868408445",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868408445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868409396",
      "pull_request_review_id": 2476821380,
      "id": 1868409396,
      "node_id": "PRRC_kwDOABII585vXao0",
      "diff_hunk": "@@ -357,79 +357,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n+        sorted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        sorted_outbounds.reserve(m_states.size() - m_inbounds_count);\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        // Merge both vectors and return\n+        in_fanout_targets.insert(in_fanout_targets.end(), out_fanout_targets.begin(), out_fanout_targets.end());\n+\n+        return in_fanout_targets;\n     }\n \n-    /*\n-     * TODO. This is currently not marked const, because it would require adding a const version\n-     * of GetRegisteredPeerState. However, this function becomes non-const in the next commit anyway\n-     * due to caching. Thus, we can save us adding that extra function for now.\n-     */\n-    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n-                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n-        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool ShouldFanoutTo(NodeId peer_id, std::vector<NodeId> &fanout_targets) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 103,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "fc06786f32b2fc82c9571ebde67b4ff54f4ad825",
      "in_reply_to_id": 1857927041,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in the last force push",
      "created_at": "2024-12-03T21:47:46Z",
      "updated_at": "2024-12-03T21:47:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1868409396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868409396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 416,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868410206",
      "pull_request_review_id": 2476822619,
      "id": 1868410206,
      "node_id": "PRRC_kwDOABII585vXa1e",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 202,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Covered in https://github.com/bitcoin/bitcoin/pull/30116/commits/f51e36057e509356890a70ced3a7209f98e8db4f",
      "created_at": "2024-12-03T21:48:32Z",
      "updated_at": "2024-12-03T21:48:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1868410206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868410206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1869898732",
      "pull_request_review_id": 2479280107,
      "id": 1869898732,
      "node_id": "PRRC_kwDOABII585vdGPs",
      "diff_hunk": "@@ -347,79 +347,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n-        }\n-        return false;\n+        // Make sure we never select more targets than we can\n+        Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "in_reply_to_id": 1860106036,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That means capturing 4 additional arguments in the lambda just for these two asserts, which seems overkill ",
      "created_at": "2024-12-04T16:28:40Z",
      "updated_at": "2024-12-04T16:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1869898732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1869898732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1869899681",
      "pull_request_review_id": 2479281834,
      "id": 1869899681,
      "node_id": "PRRC_kwDOABII585vdGeh",
      "diff_hunk": "@@ -201,9 +210,17 @@ class TxReconciliationTracker::Impl\n     {\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n-        if (m_states.erase(peer_id)) {\n-            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Forget txreconciliation state of peer=%d\\n\", peer_id);\n+        const auto peer = m_states.find(peer_id);\n+        if (peer == m_states.end()) return;\n+\n+        const auto registered = std::get_if<TxReconciliationState>(&peer->second);\n+        if (registered && !registered->m_we_initiate) {\n+            Assert(m_inbounds_count > 0);\n+            --m_inbounds_count;\n         }\n+\n+        m_states.erase(peer);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "8a73b1ca91b1ff47b56451ca4074f73ef71b9f79",
      "in_reply_to_id": 1860077605,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Covered in 9918f3b08768dece8d8daf73b8144ada60c4ae5a",
      "created_at": "2024-12-04T16:29:21Z",
      "updated_at": "2024-12-04T16:29:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1869899681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1869899681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 334,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870018939",
      "pull_request_review_id": 2479476749,
      "id": 1870018939,
      "node_id": "PRRC_kwDOABII585vdjl7",
      "diff_hunk": "@@ -381,9 +445,9 @@ class TxReconciliationTracker::Impl\n         }\n \n         for (auto &[parent_count, peer_id]: parents_by_peer) {\n-            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n             for (const auto& wtxid: parents) {\n-                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {\n+                if (state.ContainsTx(wtxid, /*include_delayed=*/true)) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 138,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "840a4e14f2d833717c87a54ec2707a92d5131ada",
      "in_reply_to_id": 1857918168,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see your point. The reasoning for this is so we can use `ContainsTx` in testing to check that things have been added/removed to/from the proper collection. Throughout the rest of the codebase, we always call this with `true`, and we do an implicit check on deletion.\r\n\r\nI'm happy to consider an alternative that covers the same functionality if you have one",
      "created_at": "2024-12-04T17:47:47Z",
      "updated_at": "2024-12-04T17:47:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1870018939",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870018939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870137156",
      "pull_request_review_id": 2479667924,
      "id": 1870137156,
      "node_id": "PRRC_kwDOABII585veAdE",
      "diff_hunk": "@@ -347,79 +347,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n-        }\n-        return false;\n+        // Make sure we never select more targets than we can\n+        Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "in_reply_to_id": 1860106036,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "TIL about `[=]` for lambdas, I may take it on the next push",
      "created_at": "2024-12-04T19:05:42Z",
      "updated_at": "2024-12-04T19:05:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1870137156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870137156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870243914",
      "pull_request_review_id": 2479844313,
      "id": 1870243914,
      "node_id": "PRRC_kwDOABII585veahK",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've been playing a bit with this, plus adding a test for `SortPeersByFewestParents`, which was missing. ~The multimap does have a consistent ordering, but it does reverse order of insertion instead of order of insertion for ties. Not really like it matters to be honest, if that is something we care about we can always start from a shuffled copy of `m_states`.~\r\n\r\nnvm, the order was changing because this is iterating over `m_states`, which is an `unordered_map`.\r\n\r\nI'll take the suggestion, but I'm thinking about modifying it a bit so the order does not have to be so reliant on `m_states`, which is something you also pointed out in an older review IIRC. What about something along the line of:\r\n\r\n```cpp\r\nstd::vector<NodeId> registered_peers;\r\nfor (const auto &[peer_id, _]: m_states) {\r\n    registered_peers.push_back(peer_id);\r\n}\r\nstd::shuffle(registered_peers.begin(), registered_peers.end(), FastRandomContext());\r\n\r\nstd::multimap<uint16_t, NodeId> parents_by_peer;\r\nfor (const auto &peer_id: registered_peers) {\r\n    if (const auto state = GetRegisteredPeerState(peer_id)) {\r\n        const size_t parent_count = std::count_if(parents.begin(), parents.end(),\r\n               [state](const auto& wtxid){return state->m_local_set.find(wtxid) != state->m_local_set.end();});\r\n        parents_by_peer.emplace(parent_count, peer_id);\r\n    }\r\n}\r\n\r\nstd::vector<NodeId> sorted_peers;\r\nsorted_peers.reserve(parents_by_peer.size());\r\nfor (const auto &[_, node_id]: parents_by_peer) {\r\n    sorted_peers.emplace_back(node_id);\r\n}\r\n\r\nreturn sorted_peers;\r\n```",
      "created_at": "2024-12-04T20:32:36Z",
      "updated_at": "2024-12-04T22:08:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1870243914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870243914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870943019",
      "pull_request_review_id": 2480981249,
      "id": 1870943019,
      "node_id": "PRRC_kwDOABII585vhFMr",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think an extra shuffle is a bit too much, because then for consistency you'd do it every time we access `m_states`? I think a comment in those places where order might matter is sufficient.\r\n\r\nIm fine if you do this extra shuffle i guess.",
      "created_at": "2024-12-05T09:02:04Z",
      "updated_at": "2024-12-05T09:02:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1870943019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1870943019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1871910138",
      "pull_request_review_id": 2482585332,
      "id": 1871910138,
      "node_id": "PRRC_kwDOABII585vkxT6",
      "diff_hunk": "@@ -217,6 +217,37 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        std::vector<std::pair<uint16_t, NodeId>> parents_by_peer{};\n+        for (const auto &[peer_id, _]: m_states) {\n+            if (GetRegisteredPeerState(peer_id)) {\n+                parents_by_peer.emplace_back(0, peer_id);\n+            }\n+        }\n+\n+        for (auto &[parent_count, peer_id]: parents_by_peer) {\n+            const auto state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+            for (const auto& wtxid: parents) {\n+                if (auto found = state.m_local_set.find(wtxid); found != state.m_local_set.end()) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "1dce9aedc59eba2b623c7785f59430a586fbd833",
      "in_reply_to_id": 1857868518,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added a comment on the header explaining how the order of ties work and dropped the shuffle",
      "created_at": "2024-12-05T18:38:17Z",
      "updated_at": "2024-12-05T18:38:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1871910138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1871910138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1871910969",
      "pull_request_review_id": 2482587260,
      "id": 1871910969,
      "node_id": "PRRC_kwDOABII585vkxg5",
      "diff_hunk": "@@ -347,79 +347,80 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n \n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n-        }\n-        return false;\n+        // Make sure we never select more targets than we can\n+        Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b4d99fb2df2c60a2214487cec627bc560f50f53",
      "in_reply_to_id": 1860106036,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added in [4d66110](https://github.com/bitcoin/bitcoin/pull/30116/commits/4d6611020632d1a6284b365ff6bc8e469169f76c)",
      "created_at": "2024-12-05T18:38:48Z",
      "updated_at": "2024-12-05T18:38:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1871910969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1871910969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1871980842",
      "pull_request_review_id": 2482707191,
      "id": 1871980842,
      "node_id": "PRRC_kwDOABII585vlCkq",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Why RelayTransaction doesn't look at m_tx_inventory_to_send very early (and maybe m_tx_inventory_known_filter too)? That would catch the transactions we already set for flooding, and just pass on them.\r\n\r\nI don't think this really works(?). \r\n\r\nImagine we call this once, and peer `p` (who has ForceRelay` permissions) is selected for reconciliation using a non-deterministic approach.\r\n\r\nNow, the transaction is sent again by `p` shortly after, and now he is selected for flooding instead. The filter won't catch this, and the transaction would end up in both sets.\r\n\r\nThis makes me recall that even though the process of selecting peers is deterministic at the moment, it is dependent on our peer list. Calling this twice with a different set of peers can result in a different ordering, so maybe we should not assume that transactions can be freely added to any of the two sets, and we should make sure that the opposite set does not contain the transaction before adding it to our desired one?",
      "created_at": "2024-12-05T19:41:47Z",
      "updated_at": "2024-12-05T19:41:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1871980842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1871980842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878512468",
      "pull_request_review_id": 2492934888,
      "id": 1878512468,
      "node_id": "PRRC_kwDOABII585v99NU",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n+            }\n+        }\n+\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> fanout_targets(inbounds_target_size + outbounds_target_size);\n+        auto collect_fanout_targets = [&](std::vector<std::pair<uint64_t, NodeId>> weighted_peers, const size_t target_size) {\n+            // Make sure we never select more targets than we can\n+            Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 352,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": null,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fuzzed the class for a bit (fuzz test here: https://github.com/marcofleon/bitcoin/commits/erlay30116-fuzztest/) and this assertion failed.\r\n\r\nI think having a preregistered peer and one inbound peer in `m_states` causes `outbound_target_size` to be 1 while `weighed_outbounds.size()` is 0 because `assign_key` is never called.\r\n\r\nThe equivalent unit test (which fails when I run it) would be something like\r\n```c++\r\nCSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\r\nTxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\r\nNodeId peer_id0 = 0;\r\nNodeId peer_id1 = 1;\r\nFastRandomContext frc{/*fDeterministic=*/true};\r\nstd::vector<NodeId> fanout_targets;\r\n\r\ntracker.PreRegisterPeer(peer_id0);\r\ntracker.PreRegisterPeer(peer_id1);\r\nBOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\r\nfanout_targets = tracker.GetFanoutTargets(Wtxid::FromUint256(frc.rand256()), /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\r\n```\r\n\r\nMaybe it makes sense to have separate maps for preregistered vs registered peers?",
      "created_at": "2024-12-10T17:21:23Z",
      "updated_at": "2024-12-10T17:32:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1878512468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878512468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878513719",
      "pull_request_review_id": 2492934888,
      "id": 1878513719,
      "node_id": "PRRC_kwDOABII585v99g3",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 332,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": null,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does `peer_state` need to be passed in here? I don't think it's used.",
      "created_at": "2024-12-10T17:22:25Z",
      "updated_at": "2024-12-10T17:32:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1878513719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1878513719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1879534029",
      "pull_request_review_id": 2494623321,
      "id": 1879534029,
      "node_id": "PRRC_kwDOABII585wB2nN",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n+            }\n+        }\n+\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> fanout_targets(inbounds_target_size + outbounds_target_size);\n+        auto collect_fanout_targets = [&](std::vector<std::pair<uint64_t, NodeId>> weighted_peers, const size_t target_size) {\n+            // Make sure we never select more targets than we can\n+            Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 352,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": 1878512468,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Great fuzzing!\r\n\r\nahhhh the sloppy part is `m_states.size() - m_inbounds_count;` , it ignores the presence of preregistered peers. \r\n\r\n> Maybe it makes sense to have separate maps for preregistered vs registered peers?\r\n\r\nI'd rather have `m_outbounds_count` cached value (all similar to `m_inbounds_count`), but no big deal.\r\n\r\n",
      "created_at": "2024-12-11T07:52:16Z",
      "updated_at": "2024-12-11T07:52:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1879534029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1879534029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894707254",
      "pull_request_review_id": 2519443536,
      "id": 1894707254,
      "node_id": "PRRC_kwDOABII585w7vA2",
      "diff_hunk": "@@ -115,10 +133,57 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        bool emplaced = m_states.emplace(peer_id, std::move(new_state)).second;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "131c28bfd95f53fc873788d5e49f89a1b853a3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this snippet of code could be documented in the following fashion\r\n\r\n```\r\n// If we receive many `SENDTXRCNCL` from the same peer, before to receive a\r\n// single `VERACK`, re-register the peer id state with potentially different local\r\n// and remote salts.\r\n```\r\n\r\nAs far as I can see, at `SENDTXRCNCL` reception we do not check for duplicate `SENDTXRCNCL` message (we check if we have txreconciliation enabled, then that it’s happening before verack reception and then that transaction-relay is enabled on the link) and we can call `RegisterPeer` multiple times.",
      "created_at": "2024-12-22T00:22:49Z",
      "updated_at": "2024-12-22T01:05:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1894707254",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894707254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894707917",
      "pull_request_review_id": 2519443536,
      "id": 1894707917,
      "node_id": "PRRC_kwDOABII585w7vLN",
      "diff_hunk": "@@ -115,10 +133,57 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        bool emplaced = m_states.emplace(peer_id, std::move(new_state)).second;\n+        Assume(emplaced);\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return false;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 61,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "131c28bfd95f53fc873788d5e49f89a1b853a3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Logging that a given peer’s local reconciliation set max size has been reached can be useuful info for future debug.\r\n\r\n```\r\ndiff --git a/src/node/txreconciliation.cpp b/src/node/txreconciliation.cpp\r\nindex d4d6bdf1ea..b99bb41681 100644\r\n--- a/src/node/txreconciliation.cpp\r\n+++ b/src/node/txreconciliation.cpp\r\n@@ -150,7 +150,11 @@ public:\r\n         if (!peer_state) return false;\r\n \r\n         // Transactions which don't make it to the set due to the limit are announced via fan-out.\r\n-        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return false;\r\n+        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) {\r\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Reconciliation set maximum size reachedfor peer=%d. \",\r\n+                    peer_id);\r\n+            return false;\r\n+        }\r\n \r\n         // The caller currently keeps track of the per-peer transaction announcements, so it\r\n         // should not attempt to add same tx to the set twice. However, if that happens, we will\r\n```",
      "created_at": "2024-12-22T00:29:59Z",
      "updated_at": "2024-12-22T01:05:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1894707917",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894707917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894709326",
      "pull_request_review_id": 2519443536,
      "id": 1894709326,
      "node_id": "PRRC_kwDOABII585w7vhO",
      "diff_hunk": "@@ -206,6 +209,27 @@ class TxReconciliationTracker::Impl\n     }\n };\n \n+AddToSetResult::AddToSetResult(bool succeeded, std::optional<Wtxid> conflict)\n+{\n+    m_succeeded = succeeded;\n+    m_conflict = conflict;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "8811fd28e11f16ef7ae363e034859c2f211495a6",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the variable naming could be enhanced, e.g `m_collision`, to dissociate from mempool conflicts. Here, it’s a collision from SipHash outputs that can arise from 2 distinct transactions, not even spending the same set of UTXOs.",
      "created_at": "2024-12-22T00:45:30Z",
      "updated_at": "2024-12-22T01:05:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1894709326",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894709326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894709738",
      "pull_request_review_id": 2519443536,
      "id": 1894709738,
      "node_id": "PRRC_kwDOABII585w7vnq",
      "diff_hunk": "@@ -108,6 +108,9 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n     /** Relay transaction to all peers. */\n     virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) = 0;\n \n+    /** Get the amount on inbounds and outbounds fanout peers. */\n+    virtual std::pair<size_t, size_t> GetFanoutPeersCount() = 0;",
      "path": "src/net_processing.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "478137aa824d14f014b2b9277ea7755153983ba6",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: s/Get the amount on/Get the amount of/g.\r\nAnd can say inbound is given first.",
      "created_at": "2024-12-22T00:48:10Z",
      "updated_at": "2024-12-22T01:05:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1894709738",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894709738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894728411",
      "pull_request_review_id": 2519534899,
      "id": 1894728411,
      "node_id": "PRRC_kwDOABII585w70Lb",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I simulated this to see if there was any difference between doing the decision-making before or after trickle.\n\nI didn't do it for dependant transactions, just for a single one, trying to answer whether choosing fanout peers at scheduling time or at relay time made any difference. The answer is no, given the number of peers that know about the transaction at both times is almost the same. \n\nThe approach, simulation and results can be found here: https://srgi.notion.site/Select-fanout-candidates-at-relay-time-instead-of-at-relay-scheduling-time-1617b3fef97780b9aa9bc52ec6fb4049\n\nIt is worth mentioning that this applies to fully deployed erlay, which I think is what we should be designing for.",
      "created_at": "2024-12-22T02:03:36Z",
      "updated_at": "2024-12-22T02:03:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1894728411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894728411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900468228",
      "pull_request_review_id": 2526935458,
      "id": 1900468228,
      "node_id": "PRRC_kwDOABII585xRtgE",
      "diff_hunk": "@@ -122,6 +122,16 @@ class TxReconciliationTracker\n      * Check if a peer is registered to reconcile transactions with us.\n      */\n     bool IsPeerRegistered(NodeId peer_id) const;\n+\n+\n+    /**\n+     * Returns a collections of node ids sorted by how many instances of the provided transaction ids\n+     * can be found in their reconciliation sets (from less to more). If two values tie, they will be\n+     * sorted in order or addition, which depends on the internal order of [m_states].\n+     * This is meant to be called with a collection of ancestor ids for a given transaction in order to\n+     * decide whether the transaction should be fanout with ancestors or not.\n+    */\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents);",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c86f4f33595f665cb2691d4a6268800f049e9159",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the rationale for introducing `SortPeersByFewestParents` could be more fleshed out, i.e iiuc explaining that eligible peers with the lowest number of parents for a target transaction in their reconciliation sets are favored for fan-out announcements, as this can be a hint of better connectivity in the overall transaction-relay graph and we wish to propagate the target transaction faster (..?).",
      "created_at": "2025-01-01T22:13:46Z",
      "updated_at": "2025-01-01T22:58:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1900468228",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900468228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900472039",
      "pull_request_review_id": 2526935458,
      "id": 1900472039,
      "node_id": "PRRC_kwDOABII585xRubn",
      "diff_hunk": "@@ -2151,9 +2193,35 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        std::vector<uint256> invs_to_send;\n+        if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto parent_wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, parent_wtxid)) {\n+                        invs_to_send.push_back(parent_wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = std::find(fanout_targets.begin(), fanout_targets.end(), peer_id) != fanout_targets.end();\n+            }\n+        }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            // If the transaction cannot be added to the set, we simply fanout, and do not do any special handling here regarding ancestors.\n+            // This should not happen under normal conditions, given the set size should be well over the number of transactions received\n+            // between reconciling intervals. A peer hitting the limit is likely to be either a broken implementation or an attacker.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        }\n+\n+        for (const auto& hash : invs_to_send) {",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 104,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "feb8c98db1c4fd9dcdf4e8140c015be9e902d754",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If the peer is `m_wtxid_relay=false` should `m_tx_inven tory_known_filter` be checked by `txid` ? Note, given the parent identifiers are retrieved from `GetMemPoolParents()` we can have the identifiers easily. This could avoid some duplicated INV flooding.",
      "created_at": "2025-01-01T22:46:23Z",
      "updated_at": "2025-01-01T22:58:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1900472039",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1900472039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901189022",
      "pull_request_review_id": 2528099179,
      "id": 1901189022,
      "node_id": "PRRC_kwDOABII585xUdee",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 332,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": 1878513719,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It does not. I'll remove it",
      "created_at": "2025-01-02T19:20:16Z",
      "updated_at": "2025-01-02T19:20:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901189022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901189022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901192156",
      "pull_request_review_id": 2528104746,
      "id": 1901192156,
      "node_id": "PRRC_kwDOABII585xUePc",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n+            }\n+        }\n+\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> fanout_targets(inbounds_target_size + outbounds_target_size);\n+        auto collect_fanout_targets = [&](std::vector<std::pair<uint64_t, NodeId>> weighted_peers, const size_t target_size) {\n+            // Make sure we never select more targets than we can\n+            Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 352,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": 1878512468,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've cached `m_outbounds_count` to prevent this from happening.\r\n\r\nThis made me realize that `fanout_targets` was incorrectly initialized, instead of reserving space for `inbounds_target_size + outbounds_target_size`, it was being initialized with `inbounds_target_size + outbounds_target_size` pre-existing elements initialized to 0, meaning that the returned vector contained more elements than expected",
      "created_at": "2025-01-02T19:24:44Z",
      "updated_at": "2025-01-02T19:25:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901192156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901192156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901195650",
      "pull_request_review_id": 2528110540,
      "id": 1901195650,
      "node_id": "PRRC_kwDOABII585xUfGC",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {\n+            uint64_t hash_key = randomizer.Write(node_id).Finalize();\n+            weighted_peers.emplace_back(hash_key, node_id);\n+        };\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_out, weighed_outbounds);\n+                } else {\n+                    assign_key(*peer_state, node_id, deterministic_randomizer_in, weighted_inbounds);\n+                }\n+\n+            }\n+        }\n+\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> fanout_targets(inbounds_target_size + outbounds_target_size);\n+        auto collect_fanout_targets = [&](std::vector<std::pair<uint64_t, NodeId>> weighted_peers, const size_t target_size) {\n+            // Make sure we never select more targets than we can\n+            Assert(outbounds_target_size <= weighed_outbounds.size());",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 352,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": 1878512468,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in 804ccf030362fe5b232fe5c4213b77899a425f2b",
      "created_at": "2025-01-02T19:29:48Z",
      "updated_at": "2025-01-02T19:29:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901195650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901195650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901195715",
      "pull_request_review_id": 2528110639,
      "id": 1901195715,
      "node_id": "PRRC_kwDOABII585xUfHD",
      "diff_hunk": "@@ -142,15 +347,131 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+\n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        size_t outbounds_target_size = 0;\n+        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) {\n+            // This may only happen in testing, but make sure we don't have a target size bigger than our registered outbounds count\n+            outbounds_target_size = std::min(OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay, m_states.size() - m_inbounds_count);\n+        }\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> weighted_inbounds, weighed_outbounds;\n+        weighted_inbounds.reserve(m_inbounds_count);\n+        Assume(m_states.size() >= m_inbounds_count);\n+        weighed_outbounds.reserve(m_states.size() - m_inbounds_count);\n+\n+        auto assign_key = [](const TxReconciliationState& peer_state, NodeId node_id, CSipHasher randomizer, std::vector<std::pair<uint64_t, NodeId>>& weighted_peers) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 332,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "4b9f83a8b717d15fff014dc8a65a684e09f22652",
      "in_reply_to_id": 1878513719,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in 804ccf030362fe5b232fe5c4213b77899a425f2b",
      "created_at": "2025-01-02T19:29:53Z",
      "updated_at": "2025-01-02T19:29:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901195715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901195715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901208893",
      "pull_request_review_id": 2528131941,
      "id": 1901208893,
      "node_id": "PRRC_kwDOABII585xUiU9",
      "diff_hunk": "@@ -2151,9 +2193,35 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        std::vector<uint256> invs_to_send;\n+        if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto parent_wtxid: parents) {\n+                    if (m_txreconciliation->TryRemovingFromSet(peer_id, parent_wtxid)) {\n+                        invs_to_send.push_back(parent_wtxid);\n+                    }\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = std::find(fanout_targets.begin(), fanout_targets.end(), peer_id) != fanout_targets.end();\n+            }\n+        }\n+\n+        if (fanout || !m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid)).m_succeeded) {\n+            // If the transaction cannot be added to the set, we simply fanout, and do not do any special handling here regarding ancestors.\n+            // This should not happen under normal conditions, given the set size should be well over the number of transactions received\n+            // between reconciling intervals. A peer hitting the limit is likely to be either a broken implementation or an attacker.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        }\n+\n+        for (const auto& hash : invs_to_send) {",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 104,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "feb8c98db1c4fd9dcdf4e8140c015be9e902d754",
      "in_reply_to_id": 1900472039,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is already the case. The transaction that is passed to `RelayTransaction` is added to `invs_to_send` using `wtxid/txid` based on `m_wtxid_relay` (that is part of the code you quoted already). For other transactions that may be in `inv_to_send` (e.g. ancestors and/or descendants), this only apply to Erlay, and Erlay enforces `WTXID_RELAY`",
      "created_at": "2025-01-02T19:48:44Z",
      "updated_at": "2025-01-02T19:48:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901208893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901208893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901215478",
      "pull_request_review_id": 2528142489,
      "id": 1901215478,
      "node_id": "PRRC_kwDOABII585xUj72",
      "diff_hunk": "@@ -122,6 +122,16 @@ class TxReconciliationTracker\n      * Check if a peer is registered to reconcile transactions with us.\n      */\n     bool IsPeerRegistered(NodeId peer_id) const;\n+\n+\n+    /**\n+     * Returns a collections of node ids sorted by how many instances of the provided transaction ids\n+     * can be found in their reconciliation sets (from less to more). If two values tie, they will be\n+     * sorted in order or addition, which depends on the internal order of [m_states].\n+     * This is meant to be called with a collection of ancestor ids for a given transaction in order to\n+     * decide whether the transaction should be fanout with ancestors or not.\n+    */\n+    std::vector<NodeId> SortPeersByFewestParents(std::vector<Wtxid> parents);",
      "path": "src/node/txreconciliation.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "c86f4f33595f665cb2691d4a6268800f049e9159",
      "in_reply_to_id": 1900468228,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The rationale for who this method is used is provided in `RelayTransaction` when the method is used\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/804ccf030362fe5b232fe5c4213b77899a425f2b/src/net_processing.cpp#L2154-L2159\r\n\r\nI think the docs give enough rationale as to what this is intended for without being excessively narrow as to what the use cases could be.",
      "created_at": "2025-01-02T19:58:16Z",
      "updated_at": "2025-01-02T19:58:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901215478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901215478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901245990",
      "pull_request_review_id": 2528192700,
      "id": 1901245990,
      "node_id": "PRRC_kwDOABII585xUrYm",
      "diff_hunk": "@@ -115,10 +133,57 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        bool emplaced = m_states.emplace(peer_id, std::move(new_state)).second;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "131c28bfd95f53fc873788d5e49f89a1b853a3e5",
      "in_reply_to_id": 1894707254,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Calling `RegisterPeer` with the same `peer_id` multiple times will result in `ReconciliationRegisterResult::ALREADY_REGISTERED`.\r\n\r\nThe docs of both `PreRegisterPeer` and `RegisterPeer` specify that they should called only once.",
      "created_at": "2025-01-02T20:43:34Z",
      "updated_at": "2025-01-02T20:43:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901245990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901245990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901246821",
      "pull_request_review_id": 2528194120,
      "id": 1901246821,
      "node_id": "PRRC_kwDOABII585xUrll",
      "diff_hunk": "@@ -115,10 +133,57 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        bool emplaced = m_states.emplace(peer_id, std::move(new_state)).second;\n+        Assume(emplaced);\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return false;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 61,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "131c28bfd95f53fc873788d5e49f89a1b853a3e5",
      "in_reply_to_id": 1894707917,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added in [b84348a](https://github.com/bitcoin/bitcoin/pull/30116/commits/b84348a8fc93c86dcefb936f986ff2f1ced320b4)",
      "created_at": "2025-01-02T20:44:57Z",
      "updated_at": "2025-01-02T20:44:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901246821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901246821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901247541",
      "pull_request_review_id": 2528195296,
      "id": 1901247541,
      "node_id": "PRRC_kwDOABII585xUrw1",
      "diff_hunk": "@@ -206,6 +209,27 @@ class TxReconciliationTracker::Impl\n     }\n };\n \n+AddToSetResult::AddToSetResult(bool succeeded, std::optional<Wtxid> conflict)\n+{\n+    m_succeeded = succeeded;\n+    m_conflict = conflict;",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "8811fd28e11f16ef7ae363e034859c2f211495a6",
      "in_reply_to_id": 1894709326,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in 0e290996874200317ba4d3f1b3e12992b40db4d1",
      "created_at": "2025-01-02T20:46:06Z",
      "updated_at": "2025-01-02T20:46:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901247541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901247541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901247923",
      "pull_request_review_id": 2528195906,
      "id": 1901247923,
      "node_id": "PRRC_kwDOABII585xUr2z",
      "diff_hunk": "@@ -108,6 +108,9 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n     /** Relay transaction to all peers. */\n     virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) = 0;\n \n+    /** Get the amount on inbounds and outbounds fanout peers. */\n+    virtual std::pair<size_t, size_t> GetFanoutPeersCount() = 0;",
      "path": "src/net_processing.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "478137aa824d14f014b2b9277ea7755153983ba6",
      "in_reply_to_id": 1894709738,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in a461a1204109762ea38b21d9b6c445e9b9ba570f",
      "created_at": "2025-01-02T20:46:42Z",
      "updated_at": "2025-01-02T20:46:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901247923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901247923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901324742",
      "pull_request_review_id": 2528318804,
      "id": 1901324742,
      "node_id": "PRRC_kwDOABII585xU-nG",
      "diff_hunk": "@@ -192,15 +190,42 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool HasCollision(TxReconciliationState *peer_state, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+\n+        short_id = peer_state->ComputeShortID(wtxid);\n+        const auto iter = peer_state->m_short_id_mapping.find(short_id);\n+\n+        if (iter != peer_state->m_short_id_mapping.end()) {\n+            collision = iter->second;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     AddToSetResult AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n         auto peer_state = GetRegisteredPeerState(peer_id);\n         if (!peer_state) return AddToSetResult::Failed();\n \n-        // TODO: We should compute the short_id here here first and see if there's any collision\n-        // if so, return AddToSetResult::Collision(wtxid)\n+        // Bypass if the wtxid is already in the set\n+        if (peer_state->m_local_set.find(wtxid) != peer_state->m_local_set.end()) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"%s already in reconciliation set for peer=%d. Bypassing.\\n\",\n+                          wtxid.ToString(), peer_id);\n+            return AddToSetResult::Succeeded();\n+        }\n+\n+        // Make sure there is no short id collision between the wtxid we are trying to add\n+        // and any existing one in the reconciliation set\n+        Wtxid collision;\n+        uint32_t short_id;\n+        if (HasCollision(peer_state, wtxid, collision, short_id)) {\n+            return AddToSetResult::Collision(collision);",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 56,
      "commit_id": "e5f1244d68943b2f0d56a03fe3f360baf8a1602a",
      "original_commit_id": "bbdc84ca0fed5350d933d37c6131072d8f82e491",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: The `Collision` here could be `LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, “…”)`.",
      "created_at": "2025-01-02T22:44:30Z",
      "updated_at": "2025-01-02T22:56:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1901324742",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901324742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    }
  ]
}